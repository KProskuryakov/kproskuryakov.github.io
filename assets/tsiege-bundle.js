!function(e){var t={};function o(n){if(t[n])return t[n].exports;var i=t[n]={i:n,l:!1,exports:{}};return e[n].call(i.exports,i,i.exports,o),i.l=!0,i.exports}o.m=e,o.c=t,o.d=function(e,t,n){o.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},o.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.t=function(e,t){if(1&t&&(e=o(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(o.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)o.d(n,i,function(t){return e[t]}.bind(null,i));return n},o.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(t,"a",t),t},o.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},o.p="",o(o.s=35)}({15:function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.drawUnit=t.updateUnit=t.isUnit=t.newUnit=void 0;const n={x:0,y:0,w:20,h:20,movepoint:void 0,speed:300,img:void 0};t.newUnit=function(e){return Object.assign(Object.create(n),e)},t.isUnit=function(e){return void 0!==e.speed},t.updateUnit=function(e,t){if(null==e?void 0:e.movepoint){const o=Math.atan2(e.movepoint.y-e.y,e.movepoint.x-e.x);e.x=e.x+Math.cos(o)*e.speed*t/1e3,e.y=e.y+Math.sin(o)*e.speed*t/1e3,Math.abs(e.x-e.movepoint.x)<5&&Math.abs(e.y-e.movepoint.y)<5&&(e.movepoint=void 0)}},t.drawUnit=function(e,t){e.img?t.drawImage(e.img,e.x-e.w/2,e.y-e.h/2):(t.fillStyle="red",t.fillRect(e.x-e.w/2,e.y-e.h/2,e.w,e.h)),e.movepoint&&(t.strokeStyle="green",t.strokeRect(e.movepoint.x-5,e.movepoint.y-5,10,10))}},35:function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=o(36),i=o(37),s=o(38),r=o(15),c=o(40);window.addEventListener("load",()=>{!function(){const e=document.getElementById("tsiege-canvas"),t=e.getContext("2d"),o=c.loadAssets(),l=[r.newUnit({x:50,y:50,img:o.get("catgirl-forward")}),r.newUnit({x:400,y:400,img:o.get("catgirl-forward")}),r.newUnit({x:500,y:100,img:o.get("catgirl-forward")})],u=[n.newBuilding({x:100,y:100})],d=new s.Selector,a=new i.default;e.oncontextmenu=e=>e.preventDefault(),e.addEventListener("mousedown",e=>{d.onmousedown(e)}),e.addEventListener("mousemove",e=>{d.onmousemove(e)}),e.addEventListener("mouseup",e=>{d.onmouseup(e,l)}),requestAnimationFrame((function o(i){const s=a.delta(i);l.forEach(e=>{r.updateUnit(e,s)}),function(){const{width:o,height:i}=e;t.fillStyle="black",t.fillRect(0,0,o,i),u.forEach(e=>{n.drawBuilding(e,t)}),l.forEach(e=>{r.drawUnit(e,t)}),d.draw(t),a.draw(t)}(),requestAnimationFrame(o)}))}()})},36:function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.drawBuilding=t.newBuilding=void 0;const n={x:0,y:0,w:50,h:50,rallypoint:void 0};t.newBuilding=function(e){return Object.assign(Object.create(n),e)},t.drawBuilding=function(e,t){t.strokeStyle="red",t.strokeRect(e.x-e.w/2,e.y-e.h/2,e.w,e.h),e.rallypoint&&(t.strokeStyle="green",t.strokeRect(e.rallypoint.x-5,e.rallypoint.y-5,10,10))}},37:function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=class{constructor(){this.fps=0,this.oldTime=0}delta(e){const t=e-this.oldTime;return this.oldTime=e,this.fps=1e3/t,t}draw(e){e.fillStyle="white",e.font="1em monospace",e.fillText("fps: "+Math.round(this.fps),7,20)}}},38:function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Selector=void 0;const n=o(15),i=o(39);t.Selector=class{onmousedown(e){0===e.button&&(this.selectionBox={x1:e.offsetX,y1:e.offsetY,x2:e.offsetX,y2:e.offsetY})}onmousemove(e){0===e.button&&this.selectionBox&&(this.selectionBox.x2=e.offsetX,this.selectionBox.y2=e.offsetY)}onmouseup(e,t){0===e.button?(this.selected=[],this.selectionBox&&this.isValidSelectionBox()?this.selected=t.filter(e=>this.isWithinSelectionBox(e)):t.forEach(t=>{i.inBounds(t,e.offsetX,e.offsetY)&&(this.selected=[t])})):2===e.button&&this.selected&&this.selected.filter(n.isUnit).forEach(t=>{t.movepoint={x:e.offsetX,y:e.offsetY}}),this.selectionBox=void 0}draw(e){if(this.selected&&(e.strokeStyle="white",this.selected.forEach(t=>{e.strokeRect(t.x-t.w/2,t.y-t.h/2,t.w,t.h)})),this.selectionBox){e.strokeStyle="white";const{x1:t,y1:o,x2:n,y2:i}=this.selectionBox,s=Math.min(t,n),r=Math.min(o,i);e.strokeRect(s-1,r-1,Math.abs(t-n)+2,Math.abs(o-i)+2)}}isWithinSelectionBox(e){if(!this.selectionBox)return!1;const{x:t,y:o}=e,{x1:n,y1:i,x2:s,y2:r}=this.selectionBox;return!(t>n&&t>s||t<n&&t<s||o>i&&o>r||o<i&&o<r)}isValidSelectionBox(){if(!this.selectionBox)return!1;const{x1:e,y1:t,x2:o,y2:n}=this.selectionBox;return Math.abs((e-o)*(t-n))>25}}},39:function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.inBounds=void 0,t.inBounds=function(e,t,o){return t>e.x-e.w/2&&t<e.x+e.w/2&&o>e.y-e.h/2&&o<e.y+e.h/2}},40:function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.loadAssets=void 0,t.loadAssets=function(){const e=new Map;return e.set("catgirl-forward",function(e){const t=new Image;return t.src=e,t}("/assets/tsiege/catgirl-forward.png")),e}}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL3RzaWVnZS91bml0LnRzIiwid2VicGFjazovLy8uL3NyYy90c2llZ2UvbWFpbi50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdHNpZWdlL2J1aWxkaW5nLnRzIiwid2VicGFjazovLy8uL3NyYy90c2llZ2UvZnBzLnRzIiwid2VicGFjazovLy8uL3NyYy90c2llZ2Uvc2VsZWN0b3IudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3RzaWVnZS9lbnRpdHkudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3RzaWVnZS9hc3NldHMudHMiXSwibmFtZXMiOlsiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJkZWZhdWx0VW5pdCIsIngiLCJ5IiwidyIsImgiLCJtb3ZlcG9pbnQiLCJ1bmRlZmluZWQiLCJzcGVlZCIsImltZyIsInVuaXQiLCJhc3NpZ24iLCJkdCIsImFuZ2xlIiwiTWF0aCIsImF0YW4yIiwiY29zIiwic2luIiwiYWJzIiwiY3R4IiwiZHJhd0ltYWdlIiwiZmlsbFN0eWxlIiwiZmlsbFJlY3QiLCJzdHJva2VTdHlsZSIsInN0cm9rZVJlY3QiLCJ3aW5kb3ciLCJhZGRFdmVudExpc3RlbmVyIiwiY2FudmFzIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsImdldENvbnRleHQiLCJpbWFnZXMiLCJsb2FkQXNzZXRzIiwidW5pdHMiLCJuZXdVbml0IiwiYnVpbGRpbmdzIiwibmV3QnVpbGRpbmciLCJzZWxlY3RvciIsIlNlbGVjdG9yIiwiZnBzIiwib25jb250ZXh0bWVudSIsImUiLCJwcmV2ZW50RGVmYXVsdCIsIm9ubW91c2Vkb3duIiwib25tb3VzZW1vdmUiLCJvbm1vdXNldXAiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJ1cGRhdGUiLCJ0aW1lIiwiZGVsdGEiLCJmb3JFYWNoIiwidXBkYXRlVW5pdCIsIndpZHRoIiwiaGVpZ2h0IiwiYnVpbGRpbmciLCJkcmF3QnVpbGRpbmciLCJkcmF3VW5pdCIsImRyYXciLCJpbml0IiwiZGVmYXVsdEJ1aWxkaW5nIiwicmFsbHlwb2ludCIsIm9sZFRpbWUiLCJuZXdUaW1lIiwidGhpcyIsImZvbnQiLCJmaWxsVGV4dCIsInJvdW5kIiwiYnV0dG9uIiwic2VsZWN0aW9uQm94IiwieDEiLCJvZmZzZXRYIiwieTEiLCJvZmZzZXRZIiwieDIiLCJ5MiIsInNlbGVjdGVkIiwiaXNWYWxpZFNlbGVjdGlvbkJveCIsImZpbHRlciIsInUiLCJpc1dpdGhpblNlbGVjdGlvbkJveCIsImluQm91bmRzIiwiaXNVbml0IiwibWluIiwiZW50aXR5IiwiTWFwIiwic2V0IiwicGF0aCIsImltYWdlIiwiSW1hZ2UiLCJzcmMiLCJuZXdJbWFnZSJdLCJtYXBwaW5ncyI6ImFBQ0UsSUFBSUEsRUFBbUIsR0FHdkIsU0FBU0MsRUFBb0JDLEdBRzVCLEdBQUdGLEVBQWlCRSxHQUNuQixPQUFPRixFQUFpQkUsR0FBVUMsUUFHbkMsSUFBSUMsRUFBU0osRUFBaUJFLEdBQVksQ0FDekNHLEVBQUdILEVBQ0hJLEdBQUcsRUFDSEgsUUFBUyxJQVVWLE9BTkFJLEVBQVFMLEdBQVVNLEtBQUtKLEVBQU9ELFFBQVNDLEVBQVFBLEVBQU9ELFFBQVNGLEdBRy9ERyxFQUFPRSxHQUFJLEVBR0pGLEVBQU9ELFFBS2ZGLEVBQW9CUSxFQUFJRixFQUd4Qk4sRUFB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RUFBRzNELEtBQUtJLElBQUlxRCxFQUFLRyxHQUFNLElBSXBFLHFCQUFxQmpDLEdBQzNCLElBQUtzQixLQUFLSyxhQUNSLE9BQU8sRUFFVCxNQUFNLEVBQUVsRSxFQUFDLEVBQUVDLEdBQU1zQyxHQUNYLEdBQUU0QixFQUFFLEdBQUVFLEVBQUUsR0FBRUUsRUFBRSxHQUFFQyxHQUFPWCxLQUFLSyxhQUVoQyxRQUFTbEUsRUFBSW1FLEdBQU1uRSxFQUFJdUUsR0FBTXZFLEVBQUltRSxHQUFNbkUsRUFBSXVFLEdBQU10RSxFQUFJb0UsR0FBTXBFLEVBQUl1RSxHQUFNdkUsRUFBSW9FLEdBQU1wRSxFQUFJdUUsR0FHN0Usc0JBQ04sSUFBS1gsS0FBS0ssYUFDUixPQUFPLEVBRVQsTUFBTSxHQUFFQyxFQUFFLEdBQUVFLEVBQUUsR0FBRUUsRUFBRSxHQUFFQyxHQUFPWCxLQUFLSyxhQUNoQyxPQUFPdEQsS0FBS0ksS0FBS21ELEVBQUtJLElBQU9GLEVBQUtHLElBQU8sTSxtR0NwRTdDLG9CQUF5QlMsRUFBc0JqRixFQUFXQyxHQUN0RCxPQUFPRCxFQUFJaUYsRUFBT2pGLEVBQUlpRixFQUFPL0UsRUFBSSxHQUFLRixFQUFJaUYsRUFBT2pGLEVBQUlpRixFQUFPL0UsRUFBSSxHQUFLRCxFQUFJZ0YsRUFBT2hGLEVBQUlnRixFQUFPOUUsRUFBSSxHQUFLRixFQUFJZ0YsRUFBT2hGLEVBQUlnRixFQUFPOUUsRUFBSSxJLHFHQ1JsSSx3QkFDRSxNQUFNMEIsRUFBUyxJQUFJcUQsSUFJbkIsT0FIQXJELEVBQU9zRCxJQUFJLGtCQU1iLFNBQWtCQyxHQUNoQixNQUFNQyxFQUFRLElBQUlDLE1BRWxCLE9BREFELEVBQU1FLElBQU1ILEVBQ0xDLEVBVHVCRyxDQUFTLHVDQUdoQzNEIiwiZmlsZSI6InRzaWVnZS1idW5kbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMzUpO1xuIiwiaW1wb3J0IHsgU3F1YXJlRW50aXR5IH0gZnJvbSBcIi4vZW50aXR5XCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgVW5pdCBleHRlbmRzIFNxdWFyZUVudGl0eSB7XG4gIG1vdmVwb2ludDogeyB4OiBudW1iZXIsIHk6IG51bWJlciB9IHwgdW5kZWZpbmVkO1xuICBzcGVlZDogbnVtYmVyO1xuICBpbWc6IEhUTUxJbWFnZUVsZW1lbnQgfCB1bmRlZmluZWQ7XG59XG5cbmNvbnN0IGRlZmF1bHRVbml0OiBVbml0ID0geyB4OiAwLCB5OiAwLCB3OiAyMCwgaDogMjAsIG1vdmVwb2ludDogdW5kZWZpbmVkLCBzcGVlZDogMzAwLCBpbWc6IHVuZGVmaW5lZCB9O1xuXG5leHBvcnQgZnVuY3Rpb24gbmV3VW5pdCh1bml0OiBQYXJ0aWFsPFVuaXQ+KTogVW5pdCB7XG4gIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5jcmVhdGUoZGVmYXVsdFVuaXQpLCB1bml0KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzVW5pdCh1bml0OiBTcXVhcmVFbnRpdHkpOiB1bml0IGlzIFVuaXQge1xuICByZXR1cm4gKHVuaXQgYXMgVW5pdCkuc3BlZWQgIT09IHVuZGVmaW5lZDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZVVuaXQodW5pdDogVW5pdCwgZHQ6IG51bWJlcik6IHZvaWQge1xuICBpZiAodW5pdD8ubW92ZXBvaW50KSB7XG4gICAgY29uc3QgYW5nbGUgPSBNYXRoLmF0YW4yKHVuaXQubW92ZXBvaW50LnkgLSB1bml0LnksIHVuaXQubW92ZXBvaW50LnggLSB1bml0LngpO1xuICAgIHVuaXQueCA9IHVuaXQueCArIE1hdGguY29zKGFuZ2xlKSAqIHVuaXQuc3BlZWQgKiBkdCAvIDEwMDA7XG4gICAgdW5pdC55ID0gdW5pdC55ICsgTWF0aC5zaW4oYW5nbGUpICogdW5pdC5zcGVlZCAqIGR0IC8gMTAwMDtcblxuICAgIGlmIChNYXRoLmFicyh1bml0LnggLSB1bml0Lm1vdmVwb2ludC54KSA8IDUgJiYgTWF0aC5hYnModW5pdC55IC0gdW5pdC5tb3ZlcG9pbnQueSkgPCA1KSB7XG4gICAgICB1bml0Lm1vdmVwb2ludCA9IHVuZGVmaW5lZDtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRyYXdVbml0KHVuaXQ6IFVuaXQsIGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEKTogdm9pZCB7XG4gIGlmICh1bml0LmltZykge1xuICAgIGN0eC5kcmF3SW1hZ2UodW5pdC5pbWcsIHVuaXQueCAtIHVuaXQudyAvIDIsIHVuaXQueSAtIHVuaXQuaCAvIDIpO1xuICB9IGVsc2Uge1xuICAgIGN0eC5maWxsU3R5bGUgPSBcInJlZFwiO1xuICAgIGN0eC5maWxsUmVjdCh1bml0LnggLSB1bml0LncgLyAyLCB1bml0LnkgLSB1bml0LmggLyAyLCB1bml0LncsIHVuaXQuaCk7XG4gIH1cbiAgXG4gIGlmICh1bml0Lm1vdmVwb2ludCkge1xuICAgIGN0eC5zdHJva2VTdHlsZSA9IFwiZ3JlZW5cIjtcbiAgICBjdHguc3Ryb2tlUmVjdCh1bml0Lm1vdmVwb2ludC54IC0gNSwgdW5pdC5tb3ZlcG9pbnQueSAtIDUsIDEwLCAxMCk7XG4gIH1cbn1cbiIsImltcG9ydCB7IEJ1aWxkaW5nLCBuZXdCdWlsZGluZywgZHJhd0J1aWxkaW5nIH0gZnJvbSBcIi4vYnVpbGRpbmdcIjtcbmltcG9ydCBGcHMgZnJvbSBcIi4vZnBzXCI7XG5pbXBvcnQgeyBTZWxlY3RvciB9IGZyb20gXCIuL3NlbGVjdG9yXCI7XG5pbXBvcnQgeyBuZXdVbml0LCBVbml0LCB1cGRhdGVVbml0LCBkcmF3VW5pdCB9IGZyb20gXCIuL3VuaXRcIjtcbmltcG9ydCB7IGxvYWRBc3NldHMgfSBmcm9tIFwiLi9hc3NldHNcIjtcblxud2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsICgpID0+IHtcbiAgaW5pdCgpO1xufSk7XG5cbmZ1bmN0aW9uIGluaXQoKSB7XG4gIGNvbnN0IGNhbnZhcyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwidHNpZWdlLWNhbnZhc1wiKSBhcyBIVE1MQ2FudmFzRWxlbWVudDtcbiAgY29uc3QgY3R4ID0gY2FudmFzLmdldENvbnRleHQoXCIyZFwiKSBhcyBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQ7XG5cbiAgY29uc3QgaW1hZ2VzID0gbG9hZEFzc2V0cygpO1xuXG4gIGNvbnN0IHVuaXRzOiBVbml0W10gPSBbXG4gICAgbmV3VW5pdCh7eDogNTAsIHk6IDUwLCBpbWc6IGltYWdlcy5nZXQoXCJjYXRnaXJsLWZvcndhcmRcIil9KSxcbiAgICBuZXdVbml0KHt4OiA0MDAsIHk6IDQwMCwgaW1nOiBpbWFnZXMuZ2V0KFwiY2F0Z2lybC1mb3J3YXJkXCIpfSksXG4gICAgbmV3VW5pdCh7eDogNTAwLCB5OiAxMDAsIGltZzogaW1hZ2VzLmdldChcImNhdGdpcmwtZm9yd2FyZFwiKX0pLFxuICBdO1xuXG4gIGNvbnN0IGJ1aWxkaW5nczogQnVpbGRpbmdbXSA9IFtcbiAgICBuZXdCdWlsZGluZyh7IHg6IDEwMCwgeTogMTAwIH0pLFxuICBdO1xuXG4gIGNvbnN0IHNlbGVjdG9yID0gbmV3IFNlbGVjdG9yKCk7XG4gIGNvbnN0IGZwcyA9IG5ldyBGcHMoKTtcblxuICBjYW52YXMub25jb250ZXh0bWVudSA9IChlKSA9PiBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgY2FudmFzLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWRvd25cIiwgKGUpID0+IHtcbiAgICBzZWxlY3Rvci5vbm1vdXNlZG93bihlKTtcbiAgfSk7XG5cbiAgY2FudmFzLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIiwgKGUpID0+IHtcbiAgICBzZWxlY3Rvci5vbm1vdXNlbW92ZShlKTtcbiAgfSk7XG5cbiAgY2FudmFzLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZXVwXCIsIChlKSA9PiB7XG4gICAgc2VsZWN0b3Iub25tb3VzZXVwKGUsIHVuaXRzKTtcbiAgfSk7XG5cbiAgZnVuY3Rpb24gdXBkYXRlKHRpbWU6IG51bWJlcikge1xuICAgIGNvbnN0IGR0ID0gZnBzLmRlbHRhKHRpbWUpO1xuXG4gICAgdW5pdHMuZm9yRWFjaCgodW5pdCkgPT4ge1xuICAgICAgdXBkYXRlVW5pdCh1bml0LCBkdCk7XG4gICAgfSk7XG5cbiAgICBkcmF3KCk7XG4gICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHVwZGF0ZSk7XG4gIH1cblxuICBmdW5jdGlvbiBkcmF3KCkge1xuICAgIGNvbnN0IHsgd2lkdGgsIGhlaWdodCB9ID0gY2FudmFzO1xuICAgIGN0eC5maWxsU3R5bGUgPSBcImJsYWNrXCI7XG4gICAgY3R4LmZpbGxSZWN0KDAsIDAsIHdpZHRoLCBoZWlnaHQpO1xuXG4gICAgYnVpbGRpbmdzLmZvckVhY2goKGJ1aWxkaW5nKSA9PiB7XG4gICAgICBkcmF3QnVpbGRpbmcoYnVpbGRpbmcsIGN0eCk7XG4gICAgfSk7XG5cbiAgICB1bml0cy5mb3JFYWNoKCh1bml0KSA9PiB7XG4gICAgICBkcmF3VW5pdCh1bml0LCBjdHgpO1xuICAgIH0pO1xuXG4gICAgc2VsZWN0b3IuZHJhdyhjdHgpO1xuICAgIGZwcy5kcmF3KGN0eCk7XG4gIH1cblxuICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUodXBkYXRlKTtcbn1cbiIsImltcG9ydCB7IFNxdWFyZUVudGl0eSB9IGZyb20gXCIuL2VudGl0eVwiO1xuXG5leHBvcnQgaW50ZXJmYWNlIEJ1aWxkaW5nIGV4dGVuZHMgU3F1YXJlRW50aXR5IHtcbiAgcmFsbHlwb2ludDogeyB4OiBudW1iZXIsIHk6IG51bWJlciB9IHwgdW5kZWZpbmVkO1xufVxuXG5jb25zdCBkZWZhdWx0QnVpbGRpbmc6IEJ1aWxkaW5nID0ge3g6IDAsIHk6IDAsIHc6IDUwLCBoOiA1MCwgcmFsbHlwb2ludDogdW5kZWZpbmVkfTtcblxuZXhwb3J0IGZ1bmN0aW9uIG5ld0J1aWxkaW5nKGJ1aWxkaW5nOiBQYXJ0aWFsPEJ1aWxkaW5nPik6IEJ1aWxkaW5nIHtcbiAgcmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmNyZWF0ZShkZWZhdWx0QnVpbGRpbmcpLCBidWlsZGluZyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkcmF3QnVpbGRpbmcoYnVpbGRpbmc6IEJ1aWxkaW5nLCBjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCk6IHZvaWQge1xuICBjdHguc3Ryb2tlU3R5bGUgPSBcInJlZFwiO1xuICBjdHguc3Ryb2tlUmVjdChidWlsZGluZy54IC0gYnVpbGRpbmcudyAvIDIsIGJ1aWxkaW5nLnkgLSBidWlsZGluZy5oIC8gMiwgYnVpbGRpbmcudywgYnVpbGRpbmcuaCk7XG4gIGlmIChidWlsZGluZy5yYWxseXBvaW50KSB7XG4gICAgY3R4LnN0cm9rZVN0eWxlID0gXCJncmVlblwiO1xuICAgIGN0eC5zdHJva2VSZWN0KGJ1aWxkaW5nLnJhbGx5cG9pbnQueCAtIDUsIGJ1aWxkaW5nLnJhbGx5cG9pbnQueSAtIDUsIDEwLCAxMCk7XG4gIH1cbn0iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBGcHMge1xuICBwcml2YXRlIGZwcyA9IDA7XG4gIHByaXZhdGUgb2xkVGltZSA9IDA7XG5cbiAgcHVibGljIGRlbHRhKG5ld1RpbWU6IG51bWJlcik6IG51bWJlciB7XG4gICAgY29uc3QgZHQgPSBuZXdUaW1lIC0gdGhpcy5vbGRUaW1lO1xuICAgIHRoaXMub2xkVGltZSA9IG5ld1RpbWU7XG4gICAgdGhpcy5mcHMgPSAxMDAwIC8gZHQ7XG4gICAgcmV0dXJuIGR0O1xuICB9XG5cbiAgcHVibGljIGRyYXcoY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQpOiB2b2lkIHtcbiAgICBjdHguZmlsbFN0eWxlID0gXCJ3aGl0ZVwiO1xuICAgIGN0eC5mb250ID0gXCIxZW0gbW9ub3NwYWNlXCI7XG4gICAgY3R4LmZpbGxUZXh0KGBmcHM6ICR7TWF0aC5yb3VuZCh0aGlzLmZwcyl9YCwgNywgMjApO1xuICB9XG59XG4iLCJpbXBvcnQgeyBCdWlsZGluZyB9IGZyb20gXCIuL2J1aWxkaW5nXCI7XG5pbXBvcnQgeyBpc1VuaXQsIFVuaXQgfSBmcm9tIFwiLi91bml0XCI7XG5pbXBvcnQgeyBpbkJvdW5kcywgU3F1YXJlRW50aXR5IH0gZnJvbSBcIi4vZW50aXR5XCI7XG5cbmV4cG9ydCBjbGFzcyBTZWxlY3RvciB7XG4gIHByaXZhdGUgc2VsZWN0ZWQ6IEFycmF5PFVuaXQgfCBCdWlsZGluZz4gfCB1bmRlZmluZWQ7XG4gIHByaXZhdGUgc2VsZWN0aW9uQm94OiB7IHgxOiBudW1iZXIsIHkxOiBudW1iZXIsIHgyOiBudW1iZXIsIHkyOiBudW1iZXIgfSB8IHVuZGVmaW5lZDtcblxuICBwdWJsaWMgb25tb3VzZWRvd24oZTogTW91c2VFdmVudCkge1xuICAgIGlmIChlLmJ1dHRvbiA9PT0gMCkgeyAvLyBib3ggc2VsZWN0XG4gICAgICB0aGlzLnNlbGVjdGlvbkJveCA9IHsgeDE6IGUub2Zmc2V0WCwgeTE6IGUub2Zmc2V0WSwgeDI6IGUub2Zmc2V0WCwgeTI6IGUub2Zmc2V0WSB9O1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBvbm1vdXNlbW92ZShlOiBNb3VzZUV2ZW50KSB7XG4gICAgaWYgKGUuYnV0dG9uID09PSAwICYmIHRoaXMuc2VsZWN0aW9uQm94KSB7IC8vIGJveCBzZWxlY3RcbiAgICAgIHRoaXMuc2VsZWN0aW9uQm94LngyID0gZS5vZmZzZXRYO1xuICAgICAgdGhpcy5zZWxlY3Rpb25Cb3gueTIgPSBlLm9mZnNldFk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIG9ubW91c2V1cChlOiBNb3VzZUV2ZW50LCB1bml0czogVW5pdFtdKSB7XG4gICAgaWYgKGUuYnV0dG9uID09PSAwKSB7IC8vIGxlZnQgY2xpY2tcbiAgICAgIHRoaXMuc2VsZWN0ZWQgPSBbXTtcbiAgICAgIGlmICh0aGlzLnNlbGVjdGlvbkJveCAmJiB0aGlzLmlzVmFsaWRTZWxlY3Rpb25Cb3goKSkge1xuICAgICAgICB0aGlzLnNlbGVjdGVkID0gdW5pdHMuZmlsdGVyKCh1KSA9PiB0aGlzLmlzV2l0aGluU2VsZWN0aW9uQm94KHUpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHVuaXRzLmZvckVhY2goKHVuaXQpID0+IHtcbiAgICAgICAgICBpZiAoaW5Cb3VuZHModW5pdCwgZS5vZmZzZXRYLCBlLm9mZnNldFkpKSB7XG4gICAgICAgICAgICB0aGlzLnNlbGVjdGVkID0gW3VuaXRdO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChlLmJ1dHRvbiA9PT0gMikgeyAvLyByaWdodCBjbGlja1xuICAgICAgaWYgKHRoaXMuc2VsZWN0ZWQpIHtcbiAgICAgICAgdGhpcy5zZWxlY3RlZC5maWx0ZXIoaXNVbml0KS5mb3JFYWNoKChzKSA9PiB7XG4gICAgICAgICAgcy5tb3ZlcG9pbnQgPSB7IHg6IGUub2Zmc2V0WCwgeTogZS5vZmZzZXRZIH07XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLnNlbGVjdGlvbkJveCA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gIHB1YmxpYyBkcmF3KGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEKSB7XG4gICAgaWYgKHRoaXMuc2VsZWN0ZWQpIHtcbiAgICAgIGN0eC5zdHJva2VTdHlsZSA9IFwid2hpdGVcIjtcbiAgICAgIHRoaXMuc2VsZWN0ZWQuZm9yRWFjaCgocykgPT4ge1xuICAgICAgICBjdHguc3Ryb2tlUmVjdChzLnggLSBzLncgLyAyLCBzLnkgLSBzLmggLyAyLCBzLncsIHMuaCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5zZWxlY3Rpb25Cb3gpIHtcbiAgICAgIGN0eC5zdHJva2VTdHlsZSA9IFwid2hpdGVcIjtcbiAgICAgIGNvbnN0IHt4MSwgeTEsIHgyLCB5Mn0gPSB0aGlzLnNlbGVjdGlvbkJveDtcbiAgICAgIGNvbnN0IHggPSBNYXRoLm1pbih4MSwgeDIpO1xuICAgICAgY29uc3QgeSA9IE1hdGgubWluKHkxLCB5Mik7XG4gICAgICBjdHguc3Ryb2tlUmVjdCh4IC0gMSwgeSAtIDEsIE1hdGguYWJzKHgxIC0geDIpICsgMiwgTWF0aC5hYnMoeTEgLSB5MikgKyAyKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGlzV2l0aGluU2VsZWN0aW9uQm94KGU6IFNxdWFyZUVudGl0eSkge1xuICAgIGlmICghdGhpcy5zZWxlY3Rpb25Cb3gpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgY29uc3QgeyB4LCB5IH0gPSBlO1xuICAgIGNvbnN0IHsgeDEsIHkxLCB4MiwgeTIgfSA9IHRoaXMuc2VsZWN0aW9uQm94O1xuXG4gICAgcmV0dXJuICEoeCA+IHgxICYmIHggPiB4MiB8fCB4IDwgeDEgJiYgeCA8IHgyIHx8IHkgPiB5MSAmJiB5ID4geTIgfHwgeSA8IHkxICYmIHkgPCB5Mik7XG4gIH1cblxuICBwcml2YXRlIGlzVmFsaWRTZWxlY3Rpb25Cb3goKSB7XG4gICAgaWYgKCF0aGlzLnNlbGVjdGlvbkJveCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBjb25zdCB7IHgxLCB5MSwgeDIsIHkyIH0gPSB0aGlzLnNlbGVjdGlvbkJveDtcbiAgICByZXR1cm4gTWF0aC5hYnMoKHgxIC0geDIpICogKHkxIC0geTIpKSA+IDI1O1xuICB9XG59XG4iLCJleHBvcnQgaW50ZXJmYWNlIFNxdWFyZUVudGl0eSB7XG4gICAgeDogbnVtYmVyO1xuICAgIHk6IG51bWJlcjtcbiAgICB3OiBudW1iZXI7XG4gICAgaDogbnVtYmVyO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaW5Cb3VuZHMoZW50aXR5OiBTcXVhcmVFbnRpdHksIHg6IG51bWJlciwgeTogbnVtYmVyKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHggPiBlbnRpdHkueCAtIGVudGl0eS53IC8gMiAmJiB4IDwgZW50aXR5LnggKyBlbnRpdHkudyAvIDIgJiYgeSA+IGVudGl0eS55IC0gZW50aXR5LmggLyAyICYmIHkgPCBlbnRpdHkueSArIGVudGl0eS5oIC8gMjtcbn0iLCJleHBvcnQgZnVuY3Rpb24gbG9hZEFzc2V0cygpOiBNYXA8c3RyaW5nLCBIVE1MSW1hZ2VFbGVtZW50PiB7XG4gIGNvbnN0IGltYWdlcyA9IG5ldyBNYXA8c3RyaW5nLCBIVE1MSW1hZ2VFbGVtZW50PigpO1xuICBpbWFnZXMuc2V0KFwiY2F0Z2lybC1mb3J3YXJkXCIsIG5ld0ltYWdlKFwiL2Fzc2V0cy90c2llZ2UvY2F0Z2lybC1mb3J3YXJkLnBuZ1wiKSk7XG4gIFxuXG4gIHJldHVybiBpbWFnZXM7XG59XG5cbmZ1bmN0aW9uIG5ld0ltYWdlKHBhdGg6IHN0cmluZyk6IEhUTUxJbWFnZUVsZW1lbnQge1xuICBjb25zdCBpbWFnZSA9IG5ldyBJbWFnZSgpO1xuICBpbWFnZS5zcmMgPSBwYXRoO1xuICByZXR1cm4gaW1hZ2U7XG59Il0sInNvdXJjZVJvb3QiOiIifQ==