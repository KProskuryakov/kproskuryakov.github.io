!function(e){var t={};function o(n){if(t[n])return t[n].exports;var i=t[n]={i:n,l:!1,exports:{}};return e[n].call(i.exports,i,i.exports,o),i.l=!0,i.exports}o.m=e,o.c=t,o.d=function(e,t,n){o.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},o.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.t=function(e,t){if(1&t&&(e=o(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(o.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)o.d(n,i,function(t){return e[t]}.bind(null,i));return n},o.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(t,"a",t),t},o.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},o.p="",o(o.s=35)}({15:function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.inBounds=t.updateUnit=t.isUnit=t.newUnit=void 0;const n={x:0,y:0,w:20,h:20,movepoint:void 0,speed:300};t.newUnit=function(e){return Object.assign(Object.create(n),e)},t.isUnit=function(e){return void 0!==e.speed},t.updateUnit=function(e,t){if(null==e?void 0:e.movepoint){const o=Math.atan2(e.movepoint.y-e.y,e.movepoint.x-e.x);e.x=e.x+Math.cos(o)*e.speed*t/1e3,e.y=e.y+Math.sin(o)*e.speed*t/1e3,Math.abs(e.x-e.movepoint.x)<5&&Math.abs(e.y-e.movepoint.y)<5&&(e.movepoint=void 0)}},t.inBounds=function(e,t,o){return t>e.x-e.w/2&&t<e.x+e.w/2&&o>e.y-e.h/2&&o<e.y+e.h/2}},35:function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=o(36),i=o(37),s=o(38),r=o(15);window.addEventListener("load",()=>{!function(){const e=document.getElementById("tsiege-canvas"),t=e.getContext("2d"),o=[r.newUnit({x:50,y:50}),r.newUnit({x:400,y:400}),r.newUnit({x:500,y:100})],c=[n.newBuilding({x:100,y:100})],l=new s.Selector,u=new i.default;e.oncontextmenu=e=>e.preventDefault(),e.addEventListener("mousedown",e=>{l.onmousedown(e)}),e.addEventListener("mousemove",e=>{l.onmousemove(e)}),e.addEventListener("mouseup",e=>{l.onmouseup(e,o)}),requestAnimationFrame((function n(i){const s=u.delta(i);o.forEach(e=>{r.updateUnit(e,s)}),function(){const{width:n,height:i}=e;t.fillStyle="black",t.fillRect(0,0,n,i),c.forEach(e=>{t.strokeStyle="red",t.strokeRect(e.x-e.w/2,e.y-e.h/2,e.w,e.h),e.rallypoint&&(t.strokeStyle="green",t.strokeRect(e.rallypoint.x-5,e.rallypoint.y-5,10,10))}),o.forEach(e=>{t.fillStyle="red",t.fillRect(e.x-e.w/2,e.y-e.h/2,e.w,e.h),e.movepoint&&(t.strokeStyle="green",t.strokeRect(e.movepoint.x-5,e.movepoint.y-5,10,10))}),l.draw(t),u.draw(t)}(),requestAnimationFrame(n)}))}()})},36:function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.newBuilding=void 0;const n={x:0,y:0,w:50,h:50,rallypoint:void 0};t.newBuilding=function(e){return Object.assign(Object.create(n),e)}},37:function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=class{constructor(){this.fps=0,this.oldTime=0}delta(e){const t=e-this.oldTime;return this.oldTime=e,this.fps=1e3/t,t}draw(e){e.fillStyle="white",e.font="1em monospace",e.fillText("fps: "+Math.round(this.fps),7,20)}}},38:function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Selector=void 0;const n=o(15);t.Selector=class{onmousedown(e){0===e.button&&(this.selectionBox={x1:e.offsetX,y1:e.offsetY,x2:e.offsetX,y2:e.offsetY})}onmousemove(e){0===e.button&&this.selectionBox&&(this.selectionBox.x2=e.offsetX,this.selectionBox.y2=e.offsetY)}onmouseup(e,t){0===e.button?(this.selected=[],this.selectionBox&&this.isValidSelectionBox()?this.selected=t.filter(e=>this.isWithinSelectionBox(e)):t.forEach(t=>{n.inBounds(t,e.offsetX,e.offsetY)&&(this.selected=[t])})):2===e.button&&this.selected&&this.selected.filter(n.isUnit).forEach(t=>{t.movepoint={x:e.offsetX,y:e.offsetY}}),this.selectionBox=void 0}draw(e){if(this.selected&&(e.strokeStyle="white",this.selected.forEach(t=>{e.strokeRect(t.x-t.w/2,t.y-t.h/2,t.w,t.h)})),this.selectionBox){e.strokeStyle="white";const{x1:t,y1:o,x2:n,y2:i}=this.selectionBox,s=Math.min(t,n),r=Math.min(o,i);e.strokeRect(s-1,r-1,Math.abs(t-n)+2,Math.abs(o-i)+2)}}isWithinSelectionBox(e){if(!this.selectionBox)return!1;const{x:t,y:o}=e,{x1:n,y1:i,x2:s,y2:r}=this.selectionBox;return!(t>n&&t>s||t<n&&t<s||o>i&&o>r||o<i&&o<r)}isValidSelectionBox(){if(!this.selectionBox)return!1;const{x1:e,y1:t,x2:o,y2:n}=this.selectionBox;return Math.abs((e-o)*(t-n))>25}}}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,