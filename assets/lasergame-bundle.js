!function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(r,i,function(t){return e[t]}.bind(null,i));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=7)}([function(e,t){e.exports=function(){throw new Error("define cannot be used indirect")}},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t){(function(t){e.exports=t}).call(this,{})},function(e,t,n){"use strict";var r;Object.defineProperty(t,"__esModule",{value:!0}),t.getOppositeDirection=void 0,function(e){e[e.NORTH=0]="NORTH",e[e.EAST=1]="EAST",e[e.SOUTH=2]="SOUTH",e[e.WEST=3]="WEST",e[e.NONE=4]="NONE",e[e.SPLIT_EAST_WEST=5]="SPLIT_EAST_WEST",e[e.SPLIT_NORTH_SOUTH=6]="SPLIT_NORTH_SOUTH"}(r||(r={})),t.default=r;const i=[r.SOUTH,r.WEST,r.NORTH,r.EAST];t.getOppositeDirection=function(e){const t=i[e];return void 0===t?r.NONE:t}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.tileWithinAreaExclusive=t.tileWithinAreaInclusive=t.tileCompare=t.tileNotNegative=t.copyTile=t.subTiles=t.addTiles=t.nextTile=t.directionToTile=void 0;const r=n(3);function i(e){switch(e){case r.default.NORTH:return{x:0,y:-1};case r.default.EAST:return{x:1,y:0};case r.default.SOUTH:return{x:0,y:1};case r.default.WEST:return{x:-1,y:0};default:return{x:0,y:0}}}function o(...e){return e.reduce((e,t,n)=>({x:e.x+t.x,y:e.y+t.y}),{x:0,y:0})}function l(e,t,n){return n(e.x,t.x)&&n(e.y,t.y)}t.directionToTile=i,t.nextTile=function(e,t){return o(e,i(t))},t.addTiles=o,t.subTiles=function(e,t){return{x:e.x-t.x,y:e.y-t.y}},t.copyTile=function(e){return{x:e.x,y:e.y}},t.tileNotNegative=function(e){return l(e,{x:-1,y:-1},(e,t)=>e>t)},t.tileCompare=l,t.tileWithinAreaInclusive=function(e,t,n){return l(e,t,(e,t)=>e>=t)&&l(e,n,(e,t)=>e<=t)},t.tileWithinAreaExclusive=function(e,t,n){return l(e,t,(e,t)=>e>t)&&l(e,n,(e,t)=>e<t)}},function(e,t,n){"use strict";var r;Object.defineProperty(t,"__esModule",{value:!0}),t.colorToName=t.colorToRGBString=t.addColors=void 0,function(e){e[e.BLACK=0]="BLACK",e[e.BLUE=1]="BLUE",e[e.GREEN=2]="GREEN",e[e.CYAN=3]="CYAN",e[e.RED=4]="RED",e[e.MAGENTA=5]="MAGENTA",e[e.YELLOW=6]="YELLOW",e[e.WHITE=7]="WHITE"}(r||(r={})),t.default=r,t.addColors=function(e,t){return e|t},t.colorToRGBString=function(e){return`rgb(${4==(4&e)?255:0},${2==(2&e)?255:0},${1==(1&e)?255:0})`},t.colorToName=function(e){return r[e]}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.tileToPixels=t.tileFromPixels=t.TILE_HALF=t.TILE_FULL=void 0,t.TILE_FULL=50,t.TILE_HALF=t.TILE_FULL/2,t.tileFromPixels=function(e,n){return{x:Math.floor(e/t.TILE_FULL),y:Math.floor(n/t.TILE_FULL)}},t.tileToPixels=function(e){return{px:e.x*t.TILE_FULL,py:e.y*t.TILE_FULL}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.printPaths=t.edgeLevelData=t.availablePieces=t.pieceComponents=t.lasergridComponent=t.toolbar=void 0;const r=n(8),i=n(15),o=n(12),l=n(10),s=n(16),a=n(18),c=n(19),u=n(20),d=n(22),f=n(23),p=n(14);let g;t.toolbar=new c.default("assets/lasergame/toolbar.png",{x:0,y:7},8,1,T),t.lasergridComponent=new s.default("assets/lasergame/lasergrid.png",{x:0,y:0},7,7,T),t.pieceComponents=[],t.availablePieces=[];let h=i.default.Custom;function T(){d.ctx.clearRect(0,0,d.canvas.width,d.canvas.height),d.ctx.fillStyle="#9c9a9b",d.ctx.fillRect(0,0,d.canvas.width,d.canvas.height),t.lasergridComponent.draw(d.ctx),t.toolbar.draw(d.ctx)}function x(e){const n=function(e,t){const n=d.canvas.getBoundingClientRect();return{x:e-n.left*(d.canvas.width/n.width),y:t-n.top*(d.canvas.height/n.height)}}(e.clientX,e.clientY);t.lasergridComponent.processMouseClick(n.x,n.y,e.button),t.toolbar.processMouseClick(n.x,n.y,e.button),v(),g&&function(){for(const e of t.edgeLevelData)if(!e.solved)return!1;return!0}()&&(h===i.default.Seed?d.victoryP.textContent="You beat the seed level!":h===i.default.Daily&&(d.victoryP.textContent="Wow! You beat the daily level!"),d.victoryP.hidden=!1),T()}function v(){g?(function(){if(g){t.edgeLevelData=[];for(const e of g){const n=e.start;let r=!1;o.equalPaths(e,t.lasergridComponent.lasergrid.paths[e.start-1])&&(r=!0),t.edgeLevelData.push({edge:n,solved:r})}}}(),function(){d.pathsPre.innerHTML="";const e=t.lasergridComponent.lasergrid.paths;for(let n=0;n<g.length;n++){const r=g[n],i=e[r.start-1];let l=u.pathToString(r);l=o.equalPaths(i,r)?`<span style='color: green'>${l}</span>`:`<span style='color: red'>${l}</span>`,t.lasergridComponent.selectedEdge===r.start&&(l=`><b>${l}</b>`),d.pathsPre.innerHTML+=l,n<g.length-1&&(d.pathsPre.innerHTML+="\n")}}()):function(){d.pathsPre.innerHTML="";const e=t.lasergridComponent.lasergrid.paths;for(let n=0;n<20;n++){const r=e[n];let i=u.pathToString(r);t.lasergridComponent.selectedEdge===n+1&&(i=`><b>${i}</b>`),d.pathsPre.innerHTML+=i,n<19&&(d.pathsPre.innerHTML+="\n")}}()}function y(e,n){t.lasergridComponent.clear();const r=f.generateLevel(e,n);g=[],r.paths.forEach(e=>g.push(e)),t.availablePieces=r.availablePieces,v(),t.lasergridComponent.calculateDrawPathWrapper(),T()}function L(){let e=d.seedInput.value,t=parseInt(d.edgesInput.value);""===e&&(e=Date.now().toString()),(isNaN(t)||t<1||t>20)&&(t=void 0),h=i.default.Seed,d.victoryP.textContent="Currently playing seed: "+e,y(e,t)}function E(){const e=(new Date).toDateString(),t=10*p(e)()+5;h=i.default.Daily,d.victoryP.textContent="Currently playing daily level: "+e,y(e,t)}t.printPaths=v,window.addEventListener("load",()=>{!function(){d.canvas.addEventListener("click",x),d.canvas.addEventListener("contextmenu",e=>{e.preventDefault(),x(e)}),d.seedLevelButton.addEventListener("click",L),d.dailyLevelButton.addEventListener("click",E),t.pieceComponents[l.default.FORWARD_SLASH]=new a.default("assets/lasergame/pieces/mirror_forwardslash.png",T),t.pieceComponents[l.default.BACK_SLASH]=new a.default("assets/lasergame/pieces/mirror_backslash.png",T),t.pieceComponents[l.default.BLACK_HOLE]=new a.default("assets/lasergame/pieces/mirror_blackhole.png",T),t.pieceComponents[l.default.HORI_SPLIT]=new a.default("assets/lasergame/pieces/mirror_sidesplit.png",T),t.pieceComponents[l.default.VERT_SPLIT]=new a.default("assets/lasergame/pieces/mirror_upsplit.png",T),t.pieceComponents[l.default.BLUE]=new a.default("assets/lasergame/pieces/swatch_blue.png",T),t.pieceComponents[l.default.RED]=new a.default("assets/lasergame/pieces/swatch_red.png",T),t.pieceComponents[l.default.GREEN]=new a.default("assets/lasergame/pieces/swatch_green.png",T);for(let e=0;e<8;e++){const n={pieceID:e,tile:{x:-1,y:-1},index:e};t.availablePieces[e]=n}r.calculateAllEndings(t.lasergridComponent.lasergrid),v(),t.lasergridComponent.calculateDrawPathWrapper()}()})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.calculateAllEndings=t.setPieceInGrid=t.removePieceFromGrid=t.isValidSpace=t.getPieceFromGrid=t.edgeNumberToLaser=t.tileToEdgeNumber=t.makeDefaultGrid=void 0;const r=n(5),i=n(3),o=n(9),l=n(10),s=n(4);function a(e){const t=e.x,n=e.y;return-1===n&&t>-1&&t<5?1+t:5===t&&n>-1&&n<5?6+n:5===n&&t>-1&&t<5?15-t:-1===t&&n>-1&&n<5?20-n:0}function c(e){if(e<6)return{tile:{x:e-1,y:-1},dir:i.default.SOUTH,color:r.default.BLACK};if(e<11)return{tile:{x:5,y:e-6},dir:i.default.WEST,color:r.default.BLACK};if(e<16)return{tile:{x:15-e,y:5},dir:i.default.NORTH,color:r.default.BLACK};if(e<21)return{tile:{x:-1,y:20-e},dir:i.default.EAST,color:r.default.BLACK};throw new Error("Incorrect Edge")}function u(e,t){if(e.grid[t.y])return e.grid[t.y][t.x]}function d(e,t){return s.tileWithinAreaExclusive(t,{x:-1,y:-1},{x:e.width,y:e.length})}function f(e,t){return e.grid[t.tile.y][t.tile.x]=void 0,t.tile={x:-1,y:-1},p(e),t}function p(e){const t=[];for(let n=0;n<20;n++)t[n]={start:n+1,endings:g(e,n+1)};e.paths=t}function g(e,t){const n=[];return function e(t,r){for(let c=0;c<100;c++){if(r.tile=s.nextTile(r.tile,r.dir),!d(t,r.tile)){const e=a(r.tile);return void n.push({end:e,color:r.color})}const c=u(t,r.tile);if(c)switch(l.applyPieceToLaser(r,c.pieceID),r.dir){case i.default.SPLIT_NORTH_SOUTH:r.dir=i.default.NORTH,e(t,{tile:r.tile,dir:i.default.SOUTH,color:r.color});break;case i.default.SPLIT_EAST_WEST:r.dir=i.default.EAST,e(t,{tile:r.tile,dir:i.default.WEST,color:r.color});break;case i.default.NONE:return void n.push({end:o.End.Blocked,color:r.color})}}n.push({end:o.End.Loop,color:r.color})}(e,c(t)),n.sort((e,t)=>e.end<t.end?-1:1),n}t.makeDefaultGrid=function(){const e=[];for(let t=0;t<5;t++)e[t]=[];const t={paths:[],grid:e,length:5,width:5};return p(t),t},t.tileToEdgeNumber=a,t.edgeNumberToLaser=c,t.getPieceFromGrid=u,t.isValidSpace=d,t.removePieceFromGrid=f,t.setPieceInGrid=function(e,t,n){d(e,t.tile)&&(e.grid[t.tile.y][t.tile.x]=void 0);const r=u(e,n);let i=void 0;return r&&(i=f(e,r)),t.tile=n,e.grid[n.y][n.x]=t,p(e),i},t.calculateAllEndings=p},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.endingsEqual=t.End=void 0,function(e){e[e.Blocked=-2]="Blocked",e[e.Loop=-1]="Loop"}(t.End||(t.End={})),t.endingsEqual=function(e,t){return e.end===t.end&&e.color===t.color}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.applyPieceToLaser=void 0;const r=n(5),i=r,o=n(3);var l;!function(e){e[e.FORWARD_SLASH=0]="FORWARD_SLASH",e[e.BACK_SLASH=1]="BACK_SLASH",e[e.BLACK_HOLE=2]="BLACK_HOLE",e[e.HORI_SPLIT=3]="HORI_SPLIT",e[e.VERT_SPLIT=4]="VERT_SPLIT",e[e.RED=5]="RED",e[e.BLUE=6]="BLUE",e[e.GREEN=7]="GREEN"}(l||(l={})),t.default=l;const s=[{dirs:[o.default.EAST,o.default.NORTH,o.default.WEST,o.default.SOUTH]},{dirs:[o.default.WEST,o.default.SOUTH,o.default.EAST,o.default.NORTH]},{dirs:[o.default.NONE,o.default.NONE,o.default.NONE,o.default.NONE]},{dirs:[o.default.EAST,o.default.NONE,o.default.EAST,o.default.SPLIT_NORTH_SOUTH]},{dirs:[o.default.NONE,o.default.NORTH,o.default.SPLIT_EAST_WEST,o.default.NORTH]},{color:r.default.RED},{color:r.default.BLUE},{color:r.default.GREEN}];t.applyPieceToLaser=function(e,t){const n=s[t];return n.dirs&&(e.dir=n.dirs[e.dir]),n.color&&(e.color=i.addColors(e.color,n.color)),e}},,function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.equalPaths=void 0;const r=n(9);t.equalPaths=function(e,t){if(e.endings.length!==t.endings.length)return!1;for(let n=0;n<e.endings.length;n++)if(!r.endingsEqual(e.endings[n],t.endings[n]))return!1;return!0}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(4),i=n(6);t.default=class{constructor(e,t,n,r,i,o=0,l=0){this.img=new Image,this.img.onload=()=>{i()},this.img.src=e,this.tile=t,this.widthInTiles=n,this.heightInTiles=r,this.offsetX=o,this.offsetY=l}draw(e){const t=i.tileToPixels(this.tile);e.drawImage(this.img,t.px+this.offsetX,t.py+this.offsetY)}processMouseClick(e,t,n){const o=r.subTiles(i.tileFromPixels(e,t),this.tile);return r.tileWithinAreaExclusive(o,{x:-1,y:-1},{x:this.widthInTiles,y:this.heightInTiles})?o:null}}},function(e,t,n){var r=n(24),i=n(25),o=n(26),l=n(27),s=n(28),a=n(29),c=n(30);c.alea=r,c.xor128=i,c.xorwow=o,c.xorshift7=l,c.xor4096=s,c.tychei=a,e.exports=c},function(e,t,n){"use strict";var r;Object.defineProperty(t,"__esModule",{value:!0}),function(e){e[e.Daily=0]="Daily",e[e.Seed=1]="Seed",e[e.Custom=2]="Custom"}(r||(r={})),t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(5),i=n(3),o=n(8),l=n(17),s=n(10),a=n(4),c=n(7),u=n(6),d=n(13);class f extends d.default{constructor(e,t,n,r,i,l=0,s=0){super(e,t,n,r,i,l,s),this.lasergrid=o.makeDefaultGrid(),this.selectedEdge=1,this.drawPath=[]}draw(e){super.draw(e);for(const t of c.availablePieces)a.tileWithinAreaInclusive(t.tile,{x:0,y:0},{x:4,y:4})&&c.pieceComponents[t.pieceID].drawAt(a.addTiles(this.tile,t.tile,{x:1,y:1}),e);for(const t of this.drawPath){e.beginPath(),e.strokeStyle=r.colorToRGBString(t.color);const n=u.tileToPixels(a.addTiles(t.tile,{x:1,y:1}));n.px+=u.TILE_HALF,n.py+=u.TILE_HALF,e.moveTo(n.px,n.py);const i=a.directionToTile(t.dir);e.lineTo(n.px+i.x*u.TILE_HALF,n.py+i.y*u.TILE_HALF),e.stroke()}let t=u.tileToPixels(a.addTiles(o.edgeNumberToLaser(this.selectedEdge).tile,{x:1,y:1}));if(e.strokeStyle="#FFFFFF",e.beginPath(),this.selectedEdge<6?(e.moveTo(t.px+u.TILE_HALF-5,t.py+u.TILE_FULL-5),e.lineTo(t.px+u.TILE_HALF,t.py+u.TILE_FULL),e.lineTo(t.px+u.TILE_HALF+5,t.py+u.TILE_FULL-5)):this.selectedEdge<11?(e.moveTo(t.px+5,t.py+u.TILE_HALF-5),e.lineTo(t.px,t.py+u.TILE_HALF),e.lineTo(t.px+5,t.py+u.TILE_HALF+5)):this.selectedEdge<16?(e.moveTo(t.px+u.TILE_HALF-5,t.py+5),e.lineTo(t.px+u.TILE_HALF,t.py),e.lineTo(t.px+u.TILE_HALF+5,t.py+5)):this.selectedEdge<21&&(e.moveTo(t.px+u.TILE_FULL-5,t.py+u.TILE_HALF-5),e.lineTo(t.px+u.TILE_FULL,t.py+u.TILE_HALF),e.lineTo(t.px+u.TILE_FULL-5,t.py+u.TILE_HALF+5)),e.stroke(),c.edgeLevelData){e.globalAlpha=.1;for(const n of c.edgeLevelData)t=u.tileToPixels(a.addTiles(o.edgeNumberToLaser(n.edge).tile,{x:1,y:1})),e.fillStyle=n.solved?"#00FF00":"#FF0000",e.fillRect(t.px,t.py,u.TILE_FULL,u.TILE_FULL);e.globalAlpha=1}for(let n=1;n<=20;n++)t=u.tileToPixels(a.addTiles(o.edgeNumberToLaser(n).tile,{x:1,y:1})),e.fillStyle="#000000",e.font="24px sans-serif",e.textBaseline="middle",e.fillText(n.toString(),t.px+u.TILE_HALF-e.measureText(n.toString()).width/2,t.py+u.TILE_HALF)}clear(){this.lasergrid=o.makeDefaultGrid(),this.selectedEdge=1,this.drawPath=[]}processMouseClick(e,t,n){const r=super.processMouseClick(e,t,n);if(console.log(n),null===r)return null;if(a.tileWithinAreaInclusive(r,{x:1,y:1},{x:5,y:5})){const e=a.subTiles(r,{x:1,y:1}),t=o.getPieceFromGrid(this.lasergrid,e);if(t){const e=o.removePieceFromGrid(this.lasergrid,t);0===n&&(c.toolbar.selectedPiece=e.index)}else o.setPieceInGrid(this.lasergrid,c.availablePieces[c.toolbar.selectedPiece],e);c.printPaths(),this.calculateDrawPathWrapper()}const i=o.tileToEdgeNumber(a.addTiles(r,{x:-1,y:-1}));return 0!==i&&(this.selectedEdge=i),this.calculateDrawPathWrapper(),r}calculateDrawPathWrapper(){this.drawPath=[],this.calculateDrawPath(o.edgeNumberToLaser(this.selectedEdge))}calculateDrawPath(e){for(let t=0;t<100;t++){if(e.tile=a.nextTile(e.tile,e.dir),!a.tileWithinAreaInclusive(e.tile,{x:0,y:0},{x:4,y:4}))return;const t=o.getPieceFromGrid(this.lasergrid,e.tile);if(this.drawPath.push(l.getOppositeLaserSegment(e)),t)switch(s.applyPieceToLaser(e,t.pieceID),e.dir){case i.default.SPLIT_NORTH_SOUTH:e.dir=i.default.NORTH,this.drawPath.push(l.getOppositeLaserSegment(e)),this.calculateDrawPath(l.getOppositeLaserSegment(e));break;case i.default.SPLIT_EAST_WEST:e.dir=i.default.EAST,this.drawPath.push(l.getOppositeLaserSegment(e)),this.calculateDrawPath(l.getOppositeLaserSegment(e));break;case i.default.NONE:return}this.drawPath.push(l.copyLaserSegment(e))}}}t.default=f},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.copyLaserSegment=t.getOppositeLaserSegment=void 0;const r=n(3),i=n(4);t.getOppositeLaserSegment=function(e){return{tile:i.copyTile(e.tile),dir:r.getOppositeDirection(e.dir),color:e.color}},t.copyLaserSegment=function(e){return{tile:i.copyTile(e.tile),dir:e.dir,color:e.color}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(6);t.default=class{constructor(e,t){this.isPlaced=!1,this.img=new Image,this.img.onload=()=>{t()},this.img.src=e}drawAt(e,t){const n=r.tileToPixels(e);t.drawImage(this.img,n.px,n.py)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(4),i=n(7),o=n(6),l=n(13);class s extends l.default{constructor(e,t,n,r,i,o=0,l=0){super(e,t,n,r,i,o,l),this.selectedPiece=0}draw(e){super.draw(e);for(let t=0;t<i.availablePieces.length;t++)i.pieceComponents[i.availablePieces[t].pieceID].drawAt(r.addTiles(this.tile,{x:t,y:0}),e);e.fillStyle="green",e.globalAlpha=.2;let t=o.tileToPixels(r.addTiles(this.tile,{x:this.selectedPiece,y:0}));e.fillRect(t.px,t.py,o.TILE_FULL,o.TILE_FULL),e.fillStyle="red";for(let n=0;n<i.availablePieces.length;n++){const l=i.availablePieces[n];n!==this.selectedPiece&&r.tileNotNegative(l.tile)&&(t=o.tileToPixels(r.addTiles(this.tile,{x:n,y:0})),e.fillRect(t.px,t.py,o.TILE_FULL,o.TILE_FULL))}e.globalAlpha=1}processMouseClick(e,t,n){const r=super.processMouseClick(e,t,n);return null!==r&&(this.selectedPiece=r.x),r}getSelectedPieceComponent(){return i.pieceComponents[this.selectedPiece]}}t.default=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.endingListToString=t.startToString=t.pathToString=void 0;const r=n(21);function i(e){let t=""+e.start;return e.start<10?t+="  -> ":t+=" -> ",t}function o(e){if(e.endings.length>1){let t=`{${r.endingToString(e.endings[0])}, `;for(let n=1;n<e.endings.length-1;n++)t+=r.endingToString(e.endings[n])+", ";return t+=r.endingToString(e.endings[e.endings.length-1])+"}",t}return r.endingToString(e.endings[0])}t.pathToString=function(e){return i(e)+o(e)},t.startToString=i,t.endingListToString=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.endingToString=void 0;const r=n(5),i=n(9);t.endingToString=function(e){const t=r.colorToName(e.color);return e.end===i.End.Blocked?"blocked "+t:e.end===i.End.Loop?"loop "+t:`${e.end} ${t}`}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ctx=t.seedInput=t.edgesInput=t.dailyLevelButton=t.seedLevelButton=t.victoryP=t.canvas=t.pathsPre=t.importPre=void 0,t.importPre=document.getElementById("imported-pre"),t.pathsPre=document.getElementById("paths-pre"),t.canvas=document.getElementById("laser-game-canvas"),t.victoryP=document.getElementById("victory-p"),t.seedLevelButton=document.getElementById("seed-level"),t.dailyLevelButton=document.getElementById("daily-level"),t.edgesInput=document.getElementById("edges"),t.seedInput=document.getElementById("seed"),t.ctx=t.canvas.getContext("2d")},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.generateLevel=void 0;const r=n(12),i=n(14),o=n(8),l=o.makeDefaultGrid();function s(e,t){let n,r,i=e.length;for(;i;)r=Math.floor(t()*i--),n=e[i],e[i]=e[r],e[r]=n}t.generateLevel=function(e=Date.now().toString(),t=5){const n=i(e),a=[],c=[],u=[];for(let e=0;e<8;e++)u[e]={pieceID:Math.floor(8*n()),tile:{x:-1,y:-1},index:e};const d=o.makeDefaultGrid();u.forEach(e=>{for(;;){const t={x:Math.floor(5*n()),y:Math.floor(5*n())};if(!o.getPieceFromGrid(d,t)){o.setPieceInGrid(d,e,t);break}}});const f=d.paths;for(let e=0;e<f.length;e++)r.equalPaths(f[e],l.paths[e])?c.push(f[e]):a.push(f[e]);s(a,n);let p=a.slice(0,t);p.length<t&&(s(c,n),p=p.concat(c.slice(0,t-p.length))),p.sort((e,t)=>e.start<t.start?-1:1);for(const e of u)e.tile={x:-1,y:-1};return{paths:p,availablePieces:u}}},function(e,t,n){(function(e){var r;!function(e,i,o){function l(e){var t,n=this,r=(t=4022871197,function(e){e=e.toString();for(var n=0;n<e.length;n++){var r=.02519603282416938*(t+=e.charCodeAt(n));r-=t=r>>>0,t=(r*=t)>>>0,t+=4294967296*(r-=t)}return 2.3283064365386963e-10*(t>>>0)});n.next=function(){var e=2091639*n.s0+2.3283064365386963e-10*n.c;return n.s0=n.s1,n.s1=n.s2,n.s2=e-(n.c=0|e)},n.c=1,n.s0=r(" "),n.s1=r(" "),n.s2=r(" "),n.s0-=r(e),n.s0<0&&(n.s0+=1),n.s1-=r(e),n.s1<0&&(n.s1+=1),n.s2-=r(e),n.s2<0&&(n.s2+=1),r=null}function s(e,t){return t.c=e.c,t.s0=e.s0,t.s1=e.s1,t.s2=e.s2,t}function a(e,t){var n=new l(e),r=t&&t.state,i=n.next;return i.int32=function(){return 4294967296*n.next()|0},i.double=function(){return i()+11102230246251565e-32*(2097152*i()|0)},i.quick=i,r&&("object"==typeof r&&s(r,n),i.state=function(){return s(n,{})}),i}i&&i.exports?i.exports=a:n(0)&&n(2)?void 0===(r=function(){return a}.call(t,n,t,i))||(i.exports=r):this.alea=a}(0,e,n(0))}).call(this,n(1)(e))},function(e,t,n){(function(e){var r;!function(e,i,o){function l(e){var t=this,n="";t.x=0,t.y=0,t.z=0,t.w=0,t.next=function(){var e=t.x^t.x<<11;return t.x=t.y,t.y=t.z,t.z=t.w,t.w^=t.w>>>19^e^e>>>8},e===(0|e)?t.x=e:n+=e;for(var r=0;r<n.length+64;r++)t.x^=0|n.charCodeAt(r),t.next()}function s(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t}function a(e,t){var n=new l(e),r=t&&t.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},i.int32=n.next,i.quick=i,r&&("object"==typeof r&&s(r,n),i.state=function(){return s(n,{})}),i}i&&i.exports?i.exports=a:n(0)&&n(2)?void 0===(r=function(){return a}.call(t,n,t,i))||(i.exports=r):this.xor128=a}(0,e,n(0))}).call(this,n(1)(e))},function(e,t,n){(function(e){var r;!function(e,i,o){function l(e){var t=this,n="";t.next=function(){var e=t.x^t.x>>>2;return t.x=t.y,t.y=t.z,t.z=t.w,t.w=t.v,(t.d=t.d+362437|0)+(t.v=t.v^t.v<<4^e^e<<1)|0},t.x=0,t.y=0,t.z=0,t.w=0,t.v=0,e===(0|e)?t.x=e:n+=e;for(var r=0;r<n.length+64;r++)t.x^=0|n.charCodeAt(r),r==n.length&&(t.d=t.x<<10^t.x>>>4),t.next()}function s(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t.v=e.v,t.d=e.d,t}function a(e,t){var n=new l(e),r=t&&t.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},i.int32=n.next,i.quick=i,r&&("object"==typeof r&&s(r,n),i.state=function(){return s(n,{})}),i}i&&i.exports?i.exports=a:n(0)&&n(2)?void 0===(r=function(){return a}.call(t,n,t,i))||(i.exports=r):this.xorwow=a}(0,e,n(0))}).call(this,n(1)(e))},function(e,t,n){(function(e){var r;!function(e,i,o){function l(e){var t=this;t.next=function(){var e,n,r=t.x,i=t.i;return e=r[i],n=(e^=e>>>7)^e<<24,n^=(e=r[i+1&7])^e>>>10,n^=(e=r[i+3&7])^e>>>3,n^=(e=r[i+4&7])^e<<7,e=r[i+7&7],n^=(e^=e<<13)^e<<9,r[i]=n,t.i=i+1&7,n},function(e,t){var n,r=[];if(t===(0|t))r[0]=t;else for(t=""+t,n=0;n<t.length;++n)r[7&n]=r[7&n]<<15^t.charCodeAt(n)+r[n+1&7]<<13;for(;r.length<8;)r.push(0);for(n=0;n<8&&0===r[n];++n);for(8==n?r[7]=-1:r[n],e.x=r,e.i=0,n=256;n>0;--n)e.next()}(t,e)}function s(e,t){return t.x=e.x.slice(),t.i=e.i,t}function a(e,t){null==e&&(e=+new Date);var n=new l(e),r=t&&t.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},i.int32=n.next,i.quick=i,r&&(r.x&&s(r,n),i.state=function(){return s(n,{})}),i}i&&i.exports?i.exports=a:n(0)&&n(2)?void 0===(r=function(){return a}.call(t,n,t,i))||(i.exports=r):this.xorshift7=a}(0,e,n(0))}).call(this,n(1)(e))},function(e,t,n){(function(e){var r;!function(e,i,o){function l(e){var t=this;t.next=function(){var e,n,r=t.w,i=t.X,o=t.i;return t.w=r=r+1640531527|0,n=i[o+34&127],e=i[o=o+1&127],n^=n<<13,e^=e<<17,n^=n>>>15,e^=e>>>12,n=i[o]=n^e,t.i=o,n+(r^r>>>16)|0},function(e,t){var n,r,i,o,l,s=[],a=128;for(t===(0|t)?(r=t,t=null):(t+="\0",r=0,a=Math.max(a,t.length)),i=0,o=-32;o<a;++o)t&&(r^=t.charCodeAt((o+32)%t.length)),0===o&&(l=r),r^=r<<10,r^=r>>>15,r^=r<<4,r^=r>>>13,o>=0&&(l=l+1640531527|0,i=0==(n=s[127&o]^=r+l)?i+1:0);for(i>=128&&(s[127&(t&&t.length||0)]=-1),i=127,o=512;o>0;--o)r=s[i+34&127],n=s[i=i+1&127],r^=r<<13,n^=n<<17,r^=r>>>15,n^=n>>>12,s[i]=r^n;e.w=l,e.X=s,e.i=i}(t,e)}function s(e,t){return t.i=e.i,t.w=e.w,t.X=e.X.slice(),t}function a(e,t){null==e&&(e=+new Date);var n=new l(e),r=t&&t.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},i.int32=n.next,i.quick=i,r&&(r.X&&s(r,n),i.state=function(){return s(n,{})}),i}i&&i.exports?i.exports=a:n(0)&&n(2)?void 0===(r=function(){return a}.call(t,n,t,i))||(i.exports=r):this.xor4096=a}(0,e,n(0))}).call(this,n(1)(e))},function(e,t,n){(function(e){var r;!function(e,i,o){function l(e){var t=this,n="";t.next=function(){var e=t.b,n=t.c,r=t.d,i=t.a;return e=e<<25^e>>>7^n,n=n-r|0,r=r<<24^r>>>8^i,i=i-e|0,t.b=e=e<<20^e>>>12^n,t.c=n=n-r|0,t.d=r<<16^n>>>16^i,t.a=i-e|0},t.a=0,t.b=0,t.c=-1640531527,t.d=1367130551,e===Math.floor(e)?(t.a=e/4294967296|0,t.b=0|e):n+=e;for(var r=0;r<n.length+20;r++)t.b^=0|n.charCodeAt(r),t.next()}function s(e,t){return t.a=e.a,t.b=e.b,t.c=e.c,t.d=e.d,t}function a(e,t){var n=new l(e),r=t&&t.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},i.int32=n.next,i.quick=i,r&&("object"==typeof r&&s(r,n),i.state=function(){return s(n,{})}),i}i&&i.exports?i.exports=a:n(0)&&n(2)?void 0===(r=function(){return a}.call(t,n,t,i))||(i.exports=r):this.tychei=a}(0,e,n(0))}).call(this,n(1)(e))},function(e,t,n){var r;!function(i,o){var l,s=(0,eval)("this"),a=o.pow(256,6),c=o.pow(2,52),u=2*c;function d(e,t,n){var r=[],d=g(function e(t,n){var r,i=[],o=typeof t;if(n&&"object"==o)for(r in t)try{i.push(e(t[r],n-1))}catch(e){}return i.length?i:"string"==o?t:t+"\0"}((t=1==t?{entropy:!0}:t||{}).entropy?[e,h(i)]:null==e?function(){try{var e;return l&&(e=l.randomBytes)?e=e(256):(e=new Uint8Array(256),(s.crypto||s.msCrypto).getRandomValues(e)),h(e)}catch(e){var t=s.navigator,n=t&&t.plugins;return[+new Date,s,n,s.screen,h(i)]}}():e,3),r),T=new f(r),x=function(){for(var e=T.g(6),t=a,n=0;e<c;)e=256*(e+n),t*=256,n=T.g(1);for(;e>=u;)e/=2,t/=2,n>>>=1;return(e+n)/t};return x.int32=function(){return 0|T.g(4)},x.quick=function(){return T.g(4)/4294967296},x.double=x,g(h(T.S),i),(t.pass||n||function(e,t,n,r){return r&&(r.S&&p(r,T),e.state=function(){return p(T,{})}),n?(o.random=e,t):e})(x,d,"global"in t?t.global:this==o,t.state)}function f(e){var t,n=e.length,r=this,i=0,o=r.i=r.j=0,l=r.S=[];for(n||(e=[n++]);i<256;)l[i]=i++;for(i=0;i<256;i++)l[i]=l[o=255&o+e[i%n]+(t=l[i])],l[o]=t;(r.g=function(e){for(var t,n=0,i=r.i,o=r.j,l=r.S;e--;)t=l[i=255&i+1],n=256*n+l[255&(l[i]=l[o=255&o+t])+(l[o]=t)];return r.i=i,r.j=o,n})(256)}function p(e,t){return t.i=e.i,t.j=e.j,t.S=e.S.slice(),t}function g(e,t){for(var n,r=e+"",i=0;i<r.length;)t[255&i]=255&(n^=19*t[255&i])+r.charCodeAt(i++);return h(t)}function h(e){return String.fromCharCode.apply(0,e)}if(o.seedrandom=d,g(o.random(),i),e.exports){e.exports=d;try{l=n(31)}catch(e){}}else void 0===(r=function(){return d}.call(t,n,t,e))||(e.exports=r)}([],Math)},function(e,t){}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,