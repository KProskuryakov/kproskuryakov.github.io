!function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(r,i,function(t){return e[t]}.bind(null,i));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=7)}([function(e,t){e.exports=function(){throw new Error("define cannot be used indirect")}},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t){(function(t){e.exports=t}).call(this,{})},function(e,t,n){"use strict";var r;Object.defineProperty(t,"__esModule",{value:!0}),t.getOppositeDirection=void 0,function(e){e[e.NORTH=0]="NORTH",e[e.EAST=1]="EAST",e[e.SOUTH=2]="SOUTH",e[e.WEST=3]="WEST",e[e.NONE=4]="NONE",e[e.SPLIT_EAST_WEST=5]="SPLIT_EAST_WEST",e[e.SPLIT_NORTH_SOUTH=6]="SPLIT_NORTH_SOUTH"}(r||(r={})),t.default=r;const i=[r.SOUTH,r.WEST,r.NORTH,r.EAST];t.getOppositeDirection=function(e){const t=i[e];return void 0===t?r.NONE:t}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.tileWithinAreaExclusive=t.tileWithinAreaInclusive=t.tileCompare=t.tileNotNegative=t.copyTile=t.subTiles=t.addTiles=t.nextTile=t.directionToTile=void 0;const r=n(3);function i(e){switch(e){case r.default.NORTH:return{x:0,y:-1};case r.default.EAST:return{x:1,y:0};case r.default.SOUTH:return{x:0,y:1};case r.default.WEST:return{x:-1,y:0};default:return{x:0,y:0}}}function o(...e){return e.reduce((e,t,n)=>({x:e.x+t.x,y:e.y+t.y}),{x:0,y:0})}function l(e,t,n){return n(e.x,t.x)&&n(e.y,t.y)}t.directionToTile=i,t.nextTile=function(e,t){return o(e,i(t))},t.addTiles=o,t.subTiles=function(e,t){return{x:e.x-t.x,y:e.y-t.y}},t.copyTile=function(e){return{x:e.x,y:e.y}},t.tileNotNegative=function(e){return l(e,{x:-1,y:-1},(e,t)=>e>t)},t.tileCompare=l,t.tileWithinAreaInclusive=function(e,t,n){return l(e,t,(e,t)=>e>=t)&&l(e,n,(e,t)=>e<=t)},t.tileWithinAreaExclusive=function(e,t,n){return l(e,t,(e,t)=>e>t)&&l(e,n,(e,t)=>e<t)}},function(e,t,n){"use strict";var r;Object.defineProperty(t,"__esModule",{value:!0}),t.colorToName=t.colorToRGBString=t.addColors=void 0,function(e){e[e.BLACK=0]="BLACK",e[e.BLUE=1]="BLUE",e[e.GREEN=2]="GREEN",e[e.CYAN=3]="CYAN",e[e.RED=4]="RED",e[e.MAGENTA=5]="MAGENTA",e[e.YELLOW=6]="YELLOW",e[e.WHITE=7]="WHITE"}(r||(r={})),t.default=r,t.addColors=function(e,t){return e|t},t.colorToRGBString=function(e){return`rgb(${4==(4&e)?255:0},${2==(2&e)?255:0},${1==(1&e)?255:0})`},t.colorToName=function(e){return r[e]}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.tileToPixels=t.tileFromPixels=t.TILE_HALF=t.TILE_FULL=void 0,t.TILE_FULL=50,t.TILE_HALF=t.TILE_FULL/2,t.tileFromPixels=function(e,n){return{x:Math.floor(e/t.TILE_FULL),y:Math.floor(n/t.TILE_FULL)}},t.tileToPixels=function(e){return{px:e.x*t.TILE_FULL,py:e.y*t.TILE_FULL}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.printPaths=t.edgeLevelData=t.availablePieces=t.pieceComponents=t.lasergridComponent=t.toolbar=void 0;const r=n(8),i=n(16),o=n(12),l=n(10),s=n(17),a=n(19),c=n(20),u=n(21),d=n(23),f=n(24),p=n(14);let g;t.toolbar=new c.default("/assets/lasergame/toolbar.png",{x:0,y:7},8,1,T),t.lasergridComponent=new s.default("/assets/lasergame/lasergrid.png",{x:0,y:0},7,7,T),t.pieceComponents=[],t.availablePieces=[];let h=i.default.Custom;function T(){d.ctx.clearRect(0,0,d.canvas.width,d.canvas.height),d.ctx.fillStyle="#9c9a9b",d.ctx.fillRect(0,0,d.canvas.width,d.canvas.height),t.lasergridComponent.draw(d.ctx),t.toolbar.draw(d.ctx)}function x(e){const n=function(e,t){const n=d.canvas.getBoundingClientRect();return{x:e-n.left*(d.canvas.width/n.width),y:t-n.top*(d.canvas.height/n.height)}}(e.clientX,e.clientY);t.lasergridComponent.processMouseClick(n.x,n.y,e.button),t.toolbar.processMouseClick(n.x,n.y,e.button),v(),g&&function(){for(const e of t.edgeLevelData)if(!e.solved)return!1;return!0}()&&(h===i.default.Seed?d.victoryP.textContent="You beat the seed level!":h===i.default.Daily&&(d.victoryP.textContent="Wow! You beat the daily level!"),d.victoryP.hidden=!1),T()}function v(){g?(function(){if(g){t.edgeLevelData=[];for(const e of g){const n=e.start;let r=!1;o.equalPaths(e,t.lasergridComponent.lasergrid.paths[e.start-1])&&(r=!0),t.edgeLevelData.push({edge:n,solved:r})}}}(),function(){d.pathsPre.innerHTML="";const e=t.lasergridComponent.lasergrid.paths;for(let n=0;n<g.length;n++){const r=g[n],i=e[r.start-1];let l=u.pathToString(r);l=o.equalPaths(i,r)?`<span style='color: green'>${l}</span>`:`<span style='color: red'>${l}</span>`,t.lasergridComponent.selectedEdge===r.start&&(l=`><b>${l}</b>`),d.pathsPre.innerHTML+=l,n<g.length-1&&(d.pathsPre.innerHTML+="\n")}}()):function(){d.pathsPre.innerHTML="";const e=t.lasergridComponent.lasergrid.paths;for(let n=0;n<20;n++){const r=e[n];let i=u.pathToString(r);t.lasergridComponent.selectedEdge===n+1&&(i=`><b>${i}</b>`),d.pathsPre.innerHTML+=i,n<19&&(d.pathsPre.innerHTML+="\n")}}()}function y(e,n){t.lasergridComponent.clear();const r=f.generateLevel(e,n);g=[],r.paths.forEach(e=>g.push(e)),t.availablePieces=r.availablePieces,v(),t.lasergridComponent.calculateDrawPathWrapper(),T()}function L(){let e=d.seedInput.value,t=parseInt(d.edgesInput.value);""===e&&(e=Date.now().toString()),(isNaN(t)||t<1||t>20)&&(t=void 0),h=i.default.Seed,d.victoryP.textContent="Currently playing seed: "+e,y(e,t)}function E(){const e=(new Date).toDateString(),t=10*p(e)()+5;h=i.default.Daily,d.victoryP.textContent="Currently playing daily level: "+e,y(e,t)}t.printPaths=v,window.addEventListener("load",()=>{!function(){d.canvas.addEventListener("click",x),d.canvas.addEventListener("contextmenu",e=>{e.preventDefault(),x(e)}),d.seedLevelButton.addEventListener("click",L),d.dailyLevelButton.addEventListener("click",E),t.pieceComponents[l.default.FORWARD_SLASH]=new a.default("/assets/lasergame/pieces/mirror_forwardslash.png",T),t.pieceComponents[l.default.BACK_SLASH]=new a.default("/assets/lasergame/pieces/mirror_backslash.png",T),t.pieceComponents[l.default.BLACK_HOLE]=new a.default("/assets/lasergame/pieces/mirror_blackhole.png",T),t.pieceComponents[l.default.HORI_SPLIT]=new a.default("/assets/lasergame/pieces/mirror_sidesplit.png",T),t.pieceComponents[l.default.VERT_SPLIT]=new a.default("/assets/lasergame/pieces/mirror_upsplit.png",T),t.pieceComponents[l.default.BLUE]=new a.default("/assets/lasergame/pieces/swatch_blue.png",T),t.pieceComponents[l.default.RED]=new a.default("/assets/lasergame/pieces/swatch_red.png",T),t.pieceComponents[l.default.GREEN]=new a.default("/assets/lasergame/pieces/swatch_green.png",T);for(let e=0;e<8;e++){const n={pieceID:e,tile:{x:-1,y:-1},index:e};t.availablePieces[e]=n}r.calculateAllEndings(t.lasergridComponent.lasergrid),v(),t.lasergridComponent.calculateDrawPathWrapper()}()})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.calculateAllEndings=t.setPieceInGrid=t.removePieceFromGrid=t.isValidSpace=t.getPieceFromGrid=t.edgeNumberToLaser=t.tileToEdgeNumber=t.makeDefaultGrid=void 0;const r=n(5),i=n(3),o=n(9),l=n(10),s=n(4);function a(e){const t=e.x,n=e.y;return-1===n&&t>-1&&t<5?1+t:5===t&&n>-1&&n<5?6+n:5===n&&t>-1&&t<5?15-t:-1===t&&n>-1&&n<5?20-n:0}function c(e){if(e<6)return{tile:{x:e-1,y:-1},dir:i.default.SOUTH,color:r.default.BLACK};if(e<11)return{tile:{x:5,y:e-6},dir:i.default.WEST,color:r.default.BLACK};if(e<16)return{tile:{x:15-e,y:5},dir:i.default.NORTH,color:r.default.BLACK};if(e<21)return{tile:{x:-1,y:20-e},dir:i.default.EAST,color:r.default.BLACK};throw new Error("Incorrect Edge")}function u(e,t){if(e.grid[t.y])return e.grid[t.y][t.x]}function d(e,t){return s.tileWithinAreaExclusive(t,{x:-1,y:-1},{x:e.width,y:e.length})}function f(e,t){return e.grid[t.tile.y][t.tile.x]=void 0,t.tile={x:-1,y:-1},p(e),t}function p(e){const t=[];for(let n=0;n<20;n++)t[n]={start:n+1,endings:g(e,n+1)};e.paths=t}function g(e,t){const n=[];return function e(t,r){for(let c=0;c<100;c++){if(r.tile=s.nextTile(r.tile,r.dir),!d(t,r.tile)){const e=a(r.tile);return void n.push({end:e,color:r.color})}const c=u(t,r.tile);if(c)switch(l.applyPieceToLaser(r,c.pieceID),r.dir){case i.default.SPLIT_NORTH_SOUTH:r.dir=i.default.NORTH,e(t,{tile:r.tile,dir:i.default.SOUTH,color:r.color});break;case i.default.SPLIT_EAST_WEST:r.dir=i.default.EAST,e(t,{tile:r.tile,dir:i.default.WEST,color:r.color});break;case i.default.NONE:return void n.push({end:o.End.Blocked,color:r.color})}}n.push({end:o.End.Loop,color:r.color})}(e,c(t)),n.sort((e,t)=>e.end<t.end?-1:1),n}t.makeDefaultGrid=function(){const e=[];for(let t=0;t<5;t++)e[t]=[];const t={paths:[],grid:e,length:5,width:5};return p(t),t},t.tileToEdgeNumber=a,t.edgeNumberToLaser=c,t.getPieceFromGrid=u,t.isValidSpace=d,t.removePieceFromGrid=f,t.setPieceInGrid=function(e,t,n){d(e,t.tile)&&(e.grid[t.tile.y][t.tile.x]=void 0);const r=u(e,n);let i=void 0;return r&&(i=f(e,r)),t.tile=n,e.grid[n.y][n.x]=t,p(e),i},t.calculateAllEndings=p},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.endingsEqual=t.End=void 0,function(e){e[e.Blocked=-2]="Blocked",e[e.Loop=-1]="Loop"}(t.End||(t.End={})),t.endingsEqual=function(e,t){return e.end===t.end&&e.color===t.color}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.applyPieceToLaser=void 0;const r=n(5),i=r,o=n(3);var l;!function(e){e[e.FORWARD_SLASH=0]="FORWARD_SLASH",e[e.BACK_SLASH=1]="BACK_SLASH",e[e.BLACK_HOLE=2]="BLACK_HOLE",e[e.HORI_SPLIT=3]="HORI_SPLIT",e[e.VERT_SPLIT=4]="VERT_SPLIT",e[e.RED=5]="RED",e[e.BLUE=6]="BLUE",e[e.GREEN=7]="GREEN"}(l||(l={})),t.default=l;const s=[{dirs:[o.default.EAST,o.default.NORTH,o.default.WEST,o.default.SOUTH]},{dirs:[o.default.WEST,o.default.SOUTH,o.default.EAST,o.default.NORTH]},{dirs:[o.default.NONE,o.default.NONE,o.default.NONE,o.default.NONE]},{dirs:[o.default.EAST,o.default.NONE,o.default.EAST,o.default.SPLIT_NORTH_SOUTH]},{dirs:[o.default.NONE,o.default.NORTH,o.default.SPLIT_EAST_WEST,o.default.NORTH]},{color:r.default.RED},{color:r.default.BLUE},{color:r.default.GREEN}];t.applyPieceToLaser=function(e,t){const n=s[t];return n.dirs&&(e.dir=n.dirs[e.dir]),n.color&&(e.color=i.addColors(e.color,n.color)),e}},,function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.equalPaths=void 0;const r=n(9);t.equalPaths=function(e,t){if(e.endings.length!==t.endings.length)return!1;for(let n=0;n<e.endings.length;n++)if(!r.endingsEqual(e.endings[n],t.endings[n]))return!1;return!0}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(4),i=n(6);t.default=class{constructor(e,t,n,r,i,o=0,l=0){this.img=new Image,this.img.onload=()=>{i()},this.img.src=e,this.tile=t,this.widthInTiles=n,this.heightInTiles=r,this.offsetX=o,this.offsetY=l}draw(e){const t=i.tileToPixels(this.tile);e.drawImage(this.img,t.px+this.offsetX,t.py+this.offsetY)}processMouseClick(e,t,n){const o=r.subTiles(i.tileFromPixels(e,t),this.tile);return r.tileWithinAreaExclusive(o,{x:-1,y:-1},{x:this.widthInTiles,y:this.heightInTiles})?o:null}}},function(e,t,n){var r=n(25),i=n(26),o=n(27),l=n(28),s=n(29),a=n(30),c=n(31);c.alea=r,c.xor128=i,c.xorwow=o,c.xorshift7=l,c.xor4096=s,c.tychei=a,e.exports=c},,function(e,t,n){"use strict";var r;Object.defineProperty(t,"__esModule",{value:!0}),function(e){e[e.Daily=0]="Daily",e[e.Seed=1]="Seed",e[e.Custom=2]="Custom"}(r||(r={})),t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(5),i=n(3),o=n(8),l=n(18),s=n(10),a=n(4),c=n(7),u=n(6),d=n(13);class f extends d.default{constructor(e,t,n,r,i,l=0,s=0){super(e,t,n,r,i,l,s),this.lasergrid=o.makeDefaultGrid(),this.selectedEdge=1,this.drawPath=[]}draw(e){super.draw(e);for(const t of c.availablePieces)a.tileWithinAreaInclusive(t.tile,{x:0,y:0},{x:4,y:4})&&c.pieceComponents[t.pieceID].drawAt(a.addTiles(this.tile,t.tile,{x:1,y:1}),e);for(const t of this.drawPath){e.beginPath(),e.strokeStyle=r.colorToRGBString(t.color);const n=u.tileToPixels(a.addTiles(t.tile,{x:1,y:1}));n.px+=u.TILE_HALF,n.py+=u.TILE_HALF,e.moveTo(n.px,n.py);const i=a.directionToTile(t.dir);e.lineTo(n.px+i.x*u.TILE_HALF,n.py+i.y*u.TILE_HALF),e.stroke()}let t=u.tileToPixels(a.addTiles(o.edgeNumberToLaser(this.selectedEdge).tile,{x:1,y:1}));if(e.strokeStyle="#FFFFFF",e.beginPath(),this.selectedEdge<6?(e.moveTo(t.px+u.TILE_HALF-5,t.py+u.TILE_FULL-5),e.lineTo(t.px+u.TILE_HALF,t.py+u.TILE_FULL),e.lineTo(t.px+u.TILE_HALF+5,t.py+u.TILE_FULL-5)):this.selectedEdge<11?(e.moveTo(t.px+5,t.py+u.TILE_HALF-5),e.lineTo(t.px,t.py+u.TILE_HALF),e.lineTo(t.px+5,t.py+u.TILE_HALF+5)):this.selectedEdge<16?(e.moveTo(t.px+u.TILE_HALF-5,t.py+5),e.lineTo(t.px+u.TILE_HALF,t.py),e.lineTo(t.px+u.TILE_HALF+5,t.py+5)):this.selectedEdge<21&&(e.moveTo(t.px+u.TILE_FULL-5,t.py+u.TILE_HALF-5),e.lineTo(t.px+u.TILE_FULL,t.py+u.TILE_HALF),e.lineTo(t.px+u.TILE_FULL-5,t.py+u.TILE_HALF+5)),e.stroke(),c.edgeLevelData){e.globalAlpha=.1;for(const n of c.edgeLevelData)t=u.tileToPixels(a.addTiles(o.edgeNumberToLaser(n.edge).tile,{x:1,y:1})),e.fillStyle=n.solved?"#00FF00":"#FF0000",e.fillRect(t.px,t.py,u.TILE_FULL,u.TILE_FULL);e.globalAlpha=1}for(let n=1;n<=20;n++)t=u.tileToPixels(a.addTiles(o.edgeNumberToLaser(n).tile,{x:1,y:1})),e.fillStyle="#000000",e.font="24px sans-serif",e.textBaseline="middle",e.fillText(n.toString(),t.px+u.TILE_HALF-e.measureText(n.toString()).width/2,t.py+u.TILE_HALF)}clear(){this.lasergrid=o.makeDefaultGrid(),this.selectedEdge=1,this.drawPath=[]}processMouseClick(e,t,n){const r=super.processMouseClick(e,t,n);if(console.log(n),null===r)return null;if(a.tileWithinAreaInclusive(r,{x:1,y:1},{x:5,y:5})){const e=a.subTiles(r,{x:1,y:1}),t=o.getPieceFromGrid(this.lasergrid,e);if(t){const e=o.removePieceFromGrid(this.lasergrid,t);0===n&&(c.toolbar.selectedPiece=e.index)}else o.setPieceInGrid(this.lasergrid,c.availablePieces[c.toolbar.selectedPiece],e);c.printPaths(),this.calculateDrawPathWrapper()}const i=o.tileToEdgeNumber(a.addTiles(r,{x:-1,y:-1}));return 0!==i&&(this.selectedEdge=i),this.calculateDrawPathWrapper(),r}calculateDrawPathWrapper(){this.drawPath=[],this.calculateDrawPath(o.edgeNumberToLaser(this.selectedEdge))}calculateDrawPath(e){for(let t=0;t<100;t++){if(e.tile=a.nextTile(e.tile,e.dir),!a.tileWithinAreaInclusive(e.tile,{x:0,y:0},{x:4,y:4}))return;const t=o.getPieceFromGrid(this.lasergrid,e.tile);if(this.drawPath.push(l.getOppositeLaserSegment(e)),t)switch(s.applyPieceToLaser(e,t.pieceID),e.dir){case i.default.SPLIT_NORTH_SOUTH:e.dir=i.default.NORTH,this.drawPath.push(l.getOppositeLaserSegment(e)),this.calculateDrawPath(l.getOppositeLaserSegment(e));break;case i.default.SPLIT_EAST_WEST:e.dir=i.default.EAST,this.drawPath.push(l.getOppositeLaserSegment(e)),this.calculateDrawPath(l.getOppositeLaserSegment(e));break;case i.default.NONE:return}this.drawPath.push(l.copyLaserSegment(e))}}}t.default=f},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.copyLaserSegment=t.getOppositeLaserSegment=void 0;const r=n(3),i=n(4);t.getOppositeLaserSegment=function(e){return{tile:i.copyTile(e.tile),dir:r.getOppositeDirection(e.dir),color:e.color}},t.copyLaserSegment=function(e){return{tile:i.copyTile(e.tile),dir:e.dir,color:e.color}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(6);t.default=class{constructor(e,t){this.isPlaced=!1,this.img=new Image,this.img.onload=()=>{t()},this.img.src=e}drawAt(e,t){const n=r.tileToPixels(e);t.drawImage(this.img,n.px,n.py)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(4),i=n(7),o=n(6),l=n(13);class s extends l.default{constructor(e,t,n,r,i,o=0,l=0){super(e,t,n,r,i,o,l),this.selectedPiece=0}draw(e){super.draw(e);for(let t=0;t<i.availablePieces.length;t++)i.pieceComponents[i.availablePieces[t].pieceID].drawAt(r.addTiles(this.tile,{x:t,y:0}),e);e.fillStyle="green",e.globalAlpha=.2;let t=o.tileToPixels(r.addTiles(this.tile,{x:this.selectedPiece,y:0}));e.fillRect(t.px,t.py,o.TILE_FULL,o.TILE_FULL),e.fillStyle="red";for(let n=0;n<i.availablePieces.length;n++){const l=i.availablePieces[n];n!==this.selectedPiece&&r.tileNotNegative(l.tile)&&(t=o.tileToPixels(r.addTiles(this.tile,{x:n,y:0})),e.fillRect(t.px,t.py,o.TILE_FULL,o.TILE_FULL))}e.globalAlpha=1}processMouseClick(e,t,n){const r=super.processMouseClick(e,t,n);return null!==r&&(this.selectedPiece=r.x),r}getSelectedPieceComponent(){return i.pieceComponents[this.selectedPiece]}}t.default=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.endingListToString=t.startToString=t.pathToString=void 0;const r=n(22);function i(e){let t=""+e.start;return e.start<10?t+="  -> ":t+=" -> ",t}function o(e){if(e.endings.length>1){let t=`{${r.endingToString(e.endings[0])}, `;for(let n=1;n<e.endings.length-1;n++)t+=r.endingToString(e.endings[n])+", ";return t+=r.endingToString(e.endings[e.endings.length-1])+"}",t}return r.endingToString(e.endings[0])}t.pathToString=function(e){return i(e)+o(e)},t.startToString=i,t.endingListToString=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.endingToString=void 0;const r=n(5),i=n(9);t.endingToString=function(e){const t=r.colorToName(e.color);return e.end===i.End.Blocked?"blocked "+t:e.end===i.End.Loop?"loop "+t:`${e.end} ${t}`}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ctx=t.seedInput=t.edgesInput=t.dailyLevelButton=t.seedLevelButton=t.victoryP=t.canvas=t.pathsPre=t.importPre=void 0,t.importPre=document.getElementById("imported-pre"),t.pathsPre=document.getElementById("paths-pre"),t.canvas=document.getElementById("laser-game-canvas"),t.victoryP=document.getElementById("victory-p"),t.seedLevelButton=document.getElementById("seed-level"),t.dailyLevelButton=document.getElementById("daily-level"),t.edgesInput=document.getElementById("edges"),t.seedInput=document.getElementById("seed"),t.ctx=t.canvas.getContext("2d")},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.generateLevel=void 0;const r=n(12),i=n(14),o=n(8),l=o.makeDefaultGrid();function s(e,t){let n,r,i=e.length;for(;i;)r=Math.floor(t()*i--),n=e[i],e[i]=e[r],e[r]=n}t.generateLevel=function(e=Date.now().toString(),t=5){const n=i(e),a=[],c=[],u=[];for(let e=0;e<8;e++)u[e]={pieceID:Math.floor(8*n()),tile:{x:-1,y:-1},index:e};const d=o.makeDefaultGrid();u.forEach(e=>{for(;;){const t={x:Math.floor(5*n()),y:Math.floor(5*n())};if(!o.getPieceFromGrid(d,t)){o.setPieceInGrid(d,e,t);break}}});const f=d.paths;for(let e=0;e<f.length;e++)r.equalPaths(f[e],l.paths[e])?c.push(f[e]):a.push(f[e]);s(a,n);let p=a.slice(0,t);p.length<t&&(s(c,n),p=p.concat(c.slice(0,t-p.length))),p.sort((e,t)=>e.start<t.start?-1:1);for(const e of u)e.tile={x:-1,y:-1};return{paths:p,availablePieces:u}}},function(e,t,n){(function(e){var r;!function(e,i,o){function l(e){var t,n=this,r=(t=4022871197,function(e){e=e.toString();for(var n=0;n<e.length;n++){var r=.02519603282416938*(t+=e.charCodeAt(n));r-=t=r>>>0,t=(r*=t)>>>0,t+=4294967296*(r-=t)}return 2.3283064365386963e-10*(t>>>0)});n.next=function(){var e=2091639*n.s0+2.3283064365386963e-10*n.c;return n.s0=n.s1,n.s1=n.s2,n.s2=e-(n.c=0|e)},n.c=1,n.s0=r(" "),n.s1=r(" "),n.s2=r(" "),n.s0-=r(e),n.s0<0&&(n.s0+=1),n.s1-=r(e),n.s1<0&&(n.s1+=1),n.s2-=r(e),n.s2<0&&(n.s2+=1),r=null}function s(e,t){return t.c=e.c,t.s0=e.s0,t.s1=e.s1,t.s2=e.s2,t}function a(e,t){var n=new l(e),r=t&&t.state,i=n.next;return i.int32=function(){return 4294967296*n.next()|0},i.double=function(){return i()+11102230246251565e-32*(2097152*i()|0)},i.quick=i,r&&("object"==typeof r&&s(r,n),i.state=function(){return s(n,{})}),i}i&&i.exports?i.exports=a:n(0)&&n(2)?void 0===(r=function(){return a}.call(t,n,t,i))||(i.exports=r):this.alea=a}(0,e,n(0))}).call(this,n(1)(e))},function(e,t,n){(function(e){var r;!function(e,i,o){function l(e){var t=this,n="";t.x=0,t.y=0,t.z=0,t.w=0,t.next=function(){var e=t.x^t.x<<11;return t.x=t.y,t.y=t.z,t.z=t.w,t.w^=t.w>>>19^e^e>>>8},e===(0|e)?t.x=e:n+=e;for(var r=0;r<n.length+64;r++)t.x^=0|n.charCodeAt(r),t.next()}function s(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t}function a(e,t){var n=new l(e),r=t&&t.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},i.int32=n.next,i.quick=i,r&&("object"==typeof r&&s(r,n),i.state=function(){return s(n,{})}),i}i&&i.exports?i.exports=a:n(0)&&n(2)?void 0===(r=function(){return a}.call(t,n,t,i))||(i.exports=r):this.xor128=a}(0,e,n(0))}).call(this,n(1)(e))},function(e,t,n){(function(e){var r;!function(e,i,o){function l(e){var t=this,n="";t.next=function(){var e=t.x^t.x>>>2;return t.x=t.y,t.y=t.z,t.z=t.w,t.w=t.v,(t.d=t.d+362437|0)+(t.v=t.v^t.v<<4^e^e<<1)|0},t.x=0,t.y=0,t.z=0,t.w=0,t.v=0,e===(0|e)?t.x=e:n+=e;for(var r=0;r<n.length+64;r++)t.x^=0|n.charCodeAt(r),r==n.length&&(t.d=t.x<<10^t.x>>>4),t.next()}function s(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t.v=e.v,t.d=e.d,t}function a(e,t){var n=new l(e),r=t&&t.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},i.int32=n.next,i.quick=i,r&&("object"==typeof r&&s(r,n),i.state=function(){return s(n,{})}),i}i&&i.exports?i.exports=a:n(0)&&n(2)?void 0===(r=function(){return a}.call(t,n,t,i))||(i.exports=r):this.xorwow=a}(0,e,n(0))}).call(this,n(1)(e))},function(e,t,n){(function(e){var r;!function(e,i,o){function l(e){var t=this;t.next=function(){var e,n,r=t.x,i=t.i;return e=r[i],n=(e^=e>>>7)^e<<24,n^=(e=r[i+1&7])^e>>>10,n^=(e=r[i+3&7])^e>>>3,n^=(e=r[i+4&7])^e<<7,e=r[i+7&7],n^=(e^=e<<13)^e<<9,r[i]=n,t.i=i+1&7,n},function(e,t){var n,r=[];if(t===(0|t))r[0]=t;else for(t=""+t,n=0;n<t.length;++n)r[7&n]=r[7&n]<<15^t.charCodeAt(n)+r[n+1&7]<<13;for(;r.length<8;)r.push(0);for(n=0;n<8&&0===r[n];++n);for(8==n?r[7]=-1:r[n],e.x=r,e.i=0,n=256;n>0;--n)e.next()}(t,e)}function s(e,t){return t.x=e.x.slice(),t.i=e.i,t}function a(e,t){null==e&&(e=+new Date);var n=new l(e),r=t&&t.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},i.int32=n.next,i.quick=i,r&&(r.x&&s(r,n),i.state=function(){return s(n,{})}),i}i&&i.exports?i.exports=a:n(0)&&n(2)?void 0===(r=function(){return a}.call(t,n,t,i))||(i.exports=r):this.xorshift7=a}(0,e,n(0))}).call(this,n(1)(e))},function(e,t,n){(function(e){var r;!function(e,i,o){function l(e){var t=this;t.next=function(){var e,n,r=t.w,i=t.X,o=t.i;return t.w=r=r+1640531527|0,n=i[o+34&127],e=i[o=o+1&127],n^=n<<13,e^=e<<17,n^=n>>>15,e^=e>>>12,n=i[o]=n^e,t.i=o,n+(r^r>>>16)|0},function(e,t){var n,r,i,o,l,s=[],a=128;for(t===(0|t)?(r=t,t=null):(t+="\0",r=0,a=Math.max(a,t.length)),i=0,o=-32;o<a;++o)t&&(r^=t.charCodeAt((o+32)%t.length)),0===o&&(l=r),r^=r<<10,r^=r>>>15,r^=r<<4,r^=r>>>13,o>=0&&(l=l+1640531527|0,i=0==(n=s[127&o]^=r+l)?i+1:0);for(i>=128&&(s[127&(t&&t.length||0)]=-1),i=127,o=512;o>0;--o)r=s[i+34&127],n=s[i=i+1&127],r^=r<<13,n^=n<<17,r^=r>>>15,n^=n>>>12,s[i]=r^n;e.w=l,e.X=s,e.i=i}(t,e)}function s(e,t){return t.i=e.i,t.w=e.w,t.X=e.X.slice(),t}function a(e,t){null==e&&(e=+new Date);var n=new l(e),r=t&&t.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},i.int32=n.next,i.quick=i,r&&(r.X&&s(r,n),i.state=function(){return s(n,{})}),i}i&&i.exports?i.exports=a:n(0)&&n(2)?void 0===(r=function(){return a}.call(t,n,t,i))||(i.exports=r):this.xor4096=a}(0,e,n(0))}).call(this,n(1)(e))},function(e,t,n){(function(e){var r;!function(e,i,o){function l(e){var t=this,n="";t.next=function(){var e=t.b,n=t.c,r=t.d,i=t.a;return e=e<<25^e>>>7^n,n=n-r|0,r=r<<24^r>>>8^i,i=i-e|0,t.b=e=e<<20^e>>>12^n,t.c=n=n-r|0,t.d=r<<16^n>>>16^i,t.a=i-e|0},t.a=0,t.b=0,t.c=-1640531527,t.d=1367130551,e===Math.floor(e)?(t.a=e/4294967296|0,t.b=0|e):n+=e;for(var r=0;r<n.length+20;r++)t.b^=0|n.charCodeAt(r),t.next()}function s(e,t){return t.a=e.a,t.b=e.b,t.c=e.c,t.d=e.d,t}function a(e,t){var n=new l(e),r=t&&t.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},i.int32=n.next,i.quick=i,r&&("object"==typeof r&&s(r,n),i.state=function(){return s(n,{})}),i}i&&i.exports?i.exports=a:n(0)&&n(2)?void 0===(r=function(){return a}.call(t,n,t,i))||(i.exports=r):this.tychei=a}(0,e,n(0))}).call(this,n(1)(e))},function(e,t,n){var r;!function(i,o){var l,s=(0,eval)("this"),a=o.pow(256,6),c=o.pow(2,52),u=2*c;function d(e,t,n){var r=[],d=g(function e(t,n){var r,i=[],o=typeof t;if(n&&"object"==o)for(r in t)try{i.push(e(t[r],n-1))}catch(e){}return i.length?i:"string"==o?t:t+"\0"}((t=1==t?{entropy:!0}:t||{}).entropy?[e,h(i)]:null==e?function(){try{var e;return l&&(e=l.randomBytes)?e=e(256):(e=new Uint8Array(256),(s.crypto||s.msCrypto).getRandomValues(e)),h(e)}catch(e){var t=s.navigator,n=t&&t.plugins;return[+new Date,s,n,s.screen,h(i)]}}():e,3),r),T=new f(r),x=function(){for(var e=T.g(6),t=a,n=0;e<c;)e=256*(e+n),t*=256,n=T.g(1);for(;e>=u;)e/=2,t/=2,n>>>=1;return(e+n)/t};return x.int32=function(){return 0|T.g(4)},x.quick=function(){return T.g(4)/4294967296},x.double=x,g(h(T.S),i),(t.pass||n||function(e,t,n,r){return r&&(r.S&&p(r,T),e.state=function(){return p(T,{})}),n?(o.random=e,t):e})(x,d,"global"in t?t.global:this==o,t.state)}function f(e){var t,n=e.length,r=this,i=0,o=r.i=r.j=0,l=r.S=[];for(n||(e=[n++]);i<256;)l[i]=i++;for(i=0;i<256;i++)l[i]=l[o=255&o+e[i%n]+(t=l[i])],l[o]=t;(r.g=function(e){for(var t,n=0,i=r.i,o=r.j,l=r.S;e--;)t=l[i=255&i+1],n=256*n+l[255&(l[i]=l[o=255&o+t])+(l[o]=t)];return r.i=i,r.j=o,n})(256)}function p(e,t){return t.i=e.i,t.j=e.j,t.S=e.S.slice(),t}function g(e,t){for(var n,r=e+"",i=0;i<r.length;)t[255&i]=255&(n^=19*t[255&i])+r.charCodeAt(i++);return h(t)}function h(e){return String.fromCharCode.apply(0,e)}if(o.seedrandom=d,g(o.random(),i),e.exports){e.exports=d;try{l=n(32)}catch(e){}}else void 0===(r=function(){return d}.call(t,n,t,e))||(e.exports=r)}([],Math)},function(e,t){}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2FtZC1kZWZpbmUuanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL21vZHVsZS5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vYW1kLW9wdGlvbnMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2xhc2VyZ2FtZS9EaXJlY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2xhc2VyZ2FtZS9UaWxlLnRzIiwid2VicGFjazovLy8uL3NyYy9sYXNlcmdhbWUvQ29sb3IudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2xhc2VyZ2FtZS9mcm9udGVuZC9Gcm9udGVuZFRpbGUudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2xhc2VyZ2FtZS9mcm9udGVuZC9Gcm9udGVuZExhc2VyZ2FtZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbGFzZXJnYW1lL0xhc2VyR3JpZC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbGFzZXJnYW1lL0VuZGluZy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbGFzZXJnYW1lL1BpZWNlSUQudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2xhc2VyZ2FtZS9QYXRoLnRzIiwid2VicGFjazovLy8uL3NyYy9sYXNlcmdhbWUvZnJvbnRlbmQvY29tcG9uZW50cy9DYW52YXNDb21wb25lbnQudHMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NlZWRyYW5kb20vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2xhc2VyZ2FtZS9MZXZlbFR5cGUudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2xhc2VyZ2FtZS9mcm9udGVuZC9jb21wb25lbnRzL0xhc2VyR3JpZENvbXBvbmVudC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbGFzZXJnYW1lL0xhc2VyU2VnbWVudC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbGFzZXJnYW1lL2Zyb250ZW5kL2NvbXBvbmVudHMvUGllY2VDb21wb25lbnQudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2xhc2VyZ2FtZS9mcm9udGVuZC9jb21wb25lbnRzL1Rvb2xiYXJDb21wb25lbnQudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2xhc2VyZ2FtZS9mcm9udGVuZC9Gcm9udGVuZFBhdGgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2xhc2VyZ2FtZS9mcm9udGVuZC9Gcm9udGVuZEVuZGluZy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbGFzZXJnYW1lL2Zyb250ZW5kL0hUTUxFbGVtZW50cy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbGFzZXJnYW1lL0xldmVsR2VuZXJhdG9yLnRzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zZWVkcmFuZG9tL2xpYi9hbGVhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zZWVkcmFuZG9tL2xpYi94b3IxMjguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NlZWRyYW5kb20vbGliL3hvcndvdy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2VlZHJhbmRvbS9saWIveG9yc2hpZnQ3LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zZWVkcmFuZG9tL2xpYi94b3I0MDk2LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zZWVkcmFuZG9tL2xpYi90eWNoZWkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NlZWRyYW5kb20vc2VlZHJhbmRvbS5qcyJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsIkVycm9yIiwid2VicGFja1BvbHlmaWxsIiwiZGVwcmVjYXRlIiwicGF0aHMiLCJjaGlsZHJlbiIsIl9fd2VicGFja19hbWRfb3B0aW9uc19fIiwiRGlyZWN0aW9uIiwib3Bwb3NpdGVEaXJlY3Rpb24iLCJTT1VUSCIsIldFU1QiLCJOT1JUSCIsIkVBU1QiLCJkaXIiLCJvcHBEaXIiLCJ1bmRlZmluZWQiLCJOT05FIiwiZGlyZWN0aW9uVG9UaWxlIiwiZGlyZWN0aW9uIiwieCIsInkiLCJhZGRUaWxlcyIsInRpbGVzIiwicmVkdWNlIiwidiIsIl8iLCJ0aWxlQ29tcGFyZSIsImEiLCJiIiwiY29tcGFyZSIsInRpbGUiLCJtaW4iLCJtYXgiLCJDb2xvciIsImNvbG9yIiwiVElMRV9GVUxMIiwiVElMRV9IQUxGIiwiTWF0aCIsImZsb29yIiwicHgiLCJweSIsImN1cnJlbnRMZXZlbCIsInRvb2xiYXIiLCJkcmF3IiwibGFzZXJncmlkQ29tcG9uZW50IiwicGllY2VDb21wb25lbnRzIiwiYXZhaWxhYmxlUGllY2VzIiwibGV2ZWxUeXBlIiwiQ3VzdG9tIiwiY3R4IiwiY2xlYXJSZWN0IiwiY2FudmFzIiwid2lkdGgiLCJoZWlnaHQiLCJmaWxsU3R5bGUiLCJmaWxsUmVjdCIsIm9uQ2xpY2siLCJldmVudCIsImxvYyIsImJib3giLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJsZWZ0IiwidG9wIiwid2luZG93VG9DYW52YXMiLCJjbGllbnRYIiwiY2xpZW50WSIsInByb2Nlc3NNb3VzZUNsaWNrIiwiYnV0dG9uIiwicHJpbnRQYXRocyIsImRhdGEiLCJlZGdlTGV2ZWxEYXRhIiwic29sdmVkIiwiY2hlY2tWaWN0b3J5IiwiU2VlZCIsInZpY3RvcnlQIiwidGV4dENvbnRlbnQiLCJEYWlseSIsImhpZGRlbiIsInBhdGgiLCJlZGdlIiwic3RhcnQiLCJlcXVhbFBhdGhzIiwibGFzZXJncmlkIiwicHVzaCIsInBvcHVsYXRlRWRnZUxldmVsRGF0YSIsInBhdGhzUHJlIiwiaW5uZXJIVE1MIiwibGVuZ3RoIiwibGV2ZWxQYXRoIiwiY3VyUGF0aCIsImxpbmUiLCJwYXRoVG9TdHJpbmciLCJzZWxlY3RlZEVkZ2UiLCJwcmludExldmVsUGF0aHMiLCJwcmludEFsbFBhdGhzIiwic2V0TmV3TGV2ZWwiLCJzZWVkIiwiZWRnZXMiLCJjbGVhciIsIm5ld0xldmVsIiwiZ2VuZXJhdGVMZXZlbCIsImZvckVhY2giLCJjYWxjdWxhdGVEcmF3UGF0aFdyYXBwZXIiLCJzZWVkTGV2ZWwiLCJzZWVkSW5wdXQiLCJwYXJzZUludCIsImVkZ2VzSW5wdXQiLCJEYXRlIiwibm93IiwidG9TdHJpbmciLCJpc05hTiIsImRhaWx5TGV2ZWwiLCJ0b0RhdGVTdHJpbmciLCJzZWVkcmFuZG9tIiwicm5nIiwid2luZG93IiwiYWRkRXZlbnRMaXN0ZW5lciIsImUiLCJwcmV2ZW50RGVmYXVsdCIsInNlZWRMZXZlbEJ1dHRvbiIsImRhaWx5TGV2ZWxCdXR0b24iLCJGT1JXQVJEX1NMQVNIIiwiQkFDS19TTEFTSCIsIkJMQUNLX0hPTEUiLCJIT1JJX1NQTElUIiwiVkVSVF9TUExJVCIsIkJMVUUiLCJSRUQiLCJHUkVFTiIsInBpZWNlIiwicGllY2VJRCIsImluZGV4IiwiY2FsY3VsYXRlQWxsRW5kaW5ncyIsImluaXQiLCJ0aWxlVG9FZGdlTnVtYmVyIiwiZWRnZU51bWJlclRvTGFzZXIiLCJCTEFDSyIsImdldFBpZWNlRnJvbUdyaWQiLCJsYXNlckdyaWQiLCJncmlkIiwiaXNWYWxpZFNwYWNlIiwidGlsZVdpdGhpbkFyZWFFeGNsdXNpdmUiLCJyZW1vdmVQaWVjZUZyb21HcmlkIiwiZW5kaW5ncyIsImNhbGN1bGF0ZUVuZGluZ0xpc3QiLCJlbmRpbmdMaXN0IiwidHJhY2tPbmVFbmRpbmciLCJsYXNlciIsIm5leHRUaWxlIiwiZW5kRWRnZSIsImVuZCIsImFwcGx5UGllY2VUb0xhc2VyIiwiU1BMSVRfTk9SVEhfU09VVEgiLCJTUExJVF9FQVNUX1dFU1QiLCJFbmQiLCJCbG9ja2VkIiwiTG9vcCIsInNvcnQiLCJuZXdHcmlkIiwiY3VycmVudFBpZWNlIiwicmVtb3ZlZFBpZWNlIiwiUGllY2VJRCIsInBpZWNlUnVsZUxpc3QiLCJkaXJzIiwicGllY2VSdWxlcyIsImNvbG9yTWFuYWdlciIsImFkZENvbG9ycyIsImVuZGluZ3NFcXVhbCIsInNyYyIsIndpZHRoSW5UaWxlcyIsImhlaWdodEluVGlsZXMiLCJvZmZzZXRYIiwib2Zmc2V0WSIsInRoaXMiLCJpbWciLCJJbWFnZSIsIm9ubG9hZCIsInRpbGVUb1BpeGVscyIsImRyYXdJbWFnZSIsIl9idXR0b24iLCJyZWxhdGl2ZVRpbGUiLCJzdWJUaWxlcyIsInRpbGVGcm9tUGl4ZWxzIiwiYWxlYSIsInhvcjEyOCIsInhvcndvdyIsInhvcnNoaWZ0NyIsInhvcjQwOTYiLCJ0eWNoZWkiLCJzciIsIkxldmVsVHlwZSIsIkxhc2VyR3JpZENvbXBvbmVudCIsInN1cGVyIiwibWFrZURlZmF1bHRHcmlkIiwiZHJhd1BhdGgiLCJ0aWxlV2l0aGluQXJlYUluY2x1c2l2ZSIsImRyYXdBdCIsImJlZ2luUGF0aCIsInN0cm9rZVN0eWxlIiwiY29sb3JUb1JHQlN0cmluZyIsIm1vdmVUbyIsInRpbGVtYXAiLCJsaW5lVG8iLCJzdHJva2UiLCJzZWxlY3RlZEVkZ2VQaXhlbHMiLCJnbG9iYWxBbHBoYSIsImVkZ2VEYXRhIiwiZm9udCIsInRleHRCYXNlbGluZSIsImZpbGxUZXh0IiwibWVhc3VyZVRleHQiLCJjb25zb2xlIiwibG9nIiwic2VsZWN0ZWRQaWVjZSIsInNldFBpZWNlSW5HcmlkIiwibmV3RWRnZSIsImNhbGN1bGF0ZURyYXdQYXRoIiwiZ2V0T3Bwb3NpdGVMYXNlclNlZ21lbnQiLCJjb3B5TGFzZXJTZWdtZW50IiwiY29weVRpbGUiLCJnZXRPcHBvc2l0ZURpcmVjdGlvbiIsImlzUGxhY2VkIiwicG9zIiwiVG9vbGJhckNvbXBvbmVudCIsInRpbGVOb3ROZWdhdGl2ZSIsInN0YXJ0VG9TdHJpbmciLCJzdHIiLCJlbmRpbmdMaXN0VG9TdHJpbmciLCJlbmRpbmdUb1N0cmluZyIsImN1ckVuZGluZyIsImVuZGluZyIsImNvbG9yU3RyaW5nIiwiY29sb3JUb05hbWUiLCJpbXBvcnRQcmUiLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwiZ2V0Q29udGV4dCIsImRlZmF1bHRHcmlkIiwic2h1ZmZsZSIsIm51bVBhdGhzIiwiaW50ZXJlc3RpbmdQYXRocyIsImJvcmluZ1BhdGhzIiwicmFuZG9tR3JpZCIsInJhbmRUaWxlIiwiZ3JpZFBhdGhzIiwicmFuZG9tUGF0aHMiLCJzbGljZSIsImNvbmNhdCIsImdsb2JhbCIsImRlZmluZSIsIkFsZWEiLCJtZSIsIm1hc2giLCJoIiwiY2hhckNvZGVBdCIsIm5leHQiLCJzMCIsInMxIiwiczIiLCJjb3B5IiwiZiIsImltcGwiLCJvcHRzIiwieGciLCJzdGF0ZSIsInBybmciLCJpbnQzMiIsImRvdWJsZSIsInF1aWNrIiwiWG9yR2VuIiwic3Ryc2VlZCIsInoiLCJ3IiwiayIsInJlc3VsdCIsIlgiLCJqIiwibGltaXQiLCJwb29sIiwibWF0aCIsIm5vZGVjcnlwdG8iLCJldmFsIiwic3RhcnRkZW5vbSIsInBvdyIsInNpZ25pZmljYW5jZSIsIm92ZXJmbG93Iiwib3B0aW9ucyIsImNhbGxiYWNrIiwic2hvcnRzZWVkIiwibWl4a2V5IiwiZmxhdHRlbiIsIm9iaiIsImRlcHRoIiwicHJvcCIsInR5cCIsImVudHJvcHkiLCJ0b3N0cmluZyIsIm91dCIsInJhbmRvbUJ5dGVzIiwiVWludDhBcnJheSIsImNyeXB0byIsIm1zQ3J5cHRvIiwiZ2V0UmFuZG9tVmFsdWVzIiwiYnJvd3NlciIsIm5hdmlnYXRvciIsInBsdWdpbnMiLCJzY3JlZW4iLCJhdXRvc2VlZCIsImFyYzQiLCJBUkM0IiwiZyIsIlMiLCJwYXNzIiwiaXNfbWF0aF9jYWxsIiwia2V5bGVuIiwiY291bnQiLCJzbWVhciIs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eEJDLEVBQWE3TixFQUFPLEdBQVdvTCxFQUFJLEVBQ2hDQSxFQUFJeUMsRUFBV3RPLFFBQ3BCL0YsRUFsSk80RCxJQWtKSWdPLEdBbEpKaE8sS0FtSkl3USxHQUF5QixHQUFoQnBVLEVBbkpiNEQsSUFtSndCZ08sSUFBV3lDLEVBQVcvRCxXQUFXc0IsS0FFbEUsT0FBT29CLEVBQVNoVCxHQThCbEIsU0FBU2dULEVBQVM3USxHQUNoQixPQUFPbVMsT0FBT0MsYUFBYUMsTUFBTSxFQUFHclMsR0FnQnRDLEdBaElBNFAsRUFBcUIsV0FBSXRLLEVBMEh6QmdMLEVBQU9WLEVBQUswQyxTQUFVM0MsR0FNYXRULEVBQU9ELFFBQVMsQ0FDakRDLEVBQU9ELFFBQVVrSixFQUVqQixJQUNFdUssRUFBYSxFQUFRLElBQ3JCLE1BQU8wQyxlQUUrQixLQUF4QyxhQUFvQixPQUFPak4sR0FBYSw4QkExTjFDLENBK05FLEdBQ0E1RSxPIiwiZmlsZSI6Imxhc2VyZ2FtZS1idW5kbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gNyk7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuXHR0aHJvdyBuZXcgRXJyb3IoXCJkZWZpbmUgY2Fubm90IGJlIHVzZWQgaW5kaXJlY3RcIik7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihtb2R1bGUpIHtcblx0aWYgKCFtb2R1bGUud2VicGFja1BvbHlmaWxsKSB7XG5cdFx0bW9kdWxlLmRlcHJlY2F0ZSA9IGZ1bmN0aW9uKCkge307XG5cdFx0bW9kdWxlLnBhdGhzID0gW107XG5cdFx0Ly8gbW9kdWxlLnBhcmVudCA9IHVuZGVmaW5lZCBieSBkZWZhdWx0XG5cdFx0aWYgKCFtb2R1bGUuY2hpbGRyZW4pIG1vZHVsZS5jaGlsZHJlbiA9IFtdO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwibG9hZGVkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmw7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJpZFwiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5pO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdG1vZHVsZS53ZWJwYWNrUG9seWZpbGwgPSAxO1xuXHR9XG5cdHJldHVybiBtb2R1bGU7XG59O1xuIiwiLyogZ2xvYmFscyBfX3dlYnBhY2tfYW1kX29wdGlvbnNfXyAqL1xubW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfYW1kX29wdGlvbnNfXztcbiIsImVudW0gRGlyZWN0aW9uIHtcclxuICBOT1JUSCxcclxuICBFQVNULFxyXG4gIFNPVVRILFxyXG4gIFdFU1QsXHJcbiAgTk9ORSxcclxuICBTUExJVF9FQVNUX1dFU1QsXHJcbiAgU1BMSVRfTk9SVEhfU09VVEgsXHJcbn1cclxuZXhwb3J0IGRlZmF1bHQgRGlyZWN0aW9uO1xyXG5cclxuY29uc3Qgb3Bwb3NpdGVEaXJlY3Rpb24gPSBbRGlyZWN0aW9uLlNPVVRILCBEaXJlY3Rpb24uV0VTVCwgRGlyZWN0aW9uLk5PUlRILCBEaXJlY3Rpb24uRUFTVF07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0T3Bwb3NpdGVEaXJlY3Rpb24oZGlyOiBEaXJlY3Rpb24pIHtcclxuICBjb25zdCBvcHBEaXIgPSBvcHBvc2l0ZURpcmVjdGlvbltkaXJdO1xyXG4gIHJldHVybiBvcHBEaXIgPT09IHVuZGVmaW5lZCA/IERpcmVjdGlvbi5OT05FIDogb3BwRGlyO1xyXG59XHJcbiIsImltcG9ydCBEaXJlY3Rpb24gZnJvbSBcIi4vRGlyZWN0aW9uXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBpbnRlcmZhY2UgVGlsZSB7XHJcbiAgeDogbnVtYmVyO1xyXG4gIHk6IG51bWJlcjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGRpcmVjdGlvblRvVGlsZShkaXJlY3Rpb246IERpcmVjdGlvbik6IFRpbGUge1xyXG4gIHN3aXRjaCAoZGlyZWN0aW9uKSB7XHJcbiAgICBjYXNlIERpcmVjdGlvbi5OT1JUSDpcclxuICAgICAgcmV0dXJuIHsgeDogMCwgeTogLTEgfTtcclxuICAgIGNhc2UgRGlyZWN0aW9uLkVBU1Q6XHJcbiAgICAgIHJldHVybiB7IHg6IDEsIHk6IDAgfTtcclxuICAgIGNhc2UgRGlyZWN0aW9uLlNPVVRIOlxyXG4gICAgICByZXR1cm4geyB4OiAwLCB5OiAxIH07XHJcbiAgICBjYXNlIERpcmVjdGlvbi5XRVNUOlxyXG4gICAgICByZXR1cm4geyB4OiAtMSwgeTogMCB9O1xyXG4gICAgZGVmYXVsdDpcclxuICAgICAgcmV0dXJuIHsgeDogMCwgeTogMCB9O1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIG5leHRUaWxlKHRpbGU6IFRpbGUsIGRpcjogRGlyZWN0aW9uKSB7XHJcbiAgcmV0dXJuIGFkZFRpbGVzKHRpbGUsIGRpcmVjdGlvblRvVGlsZShkaXIpKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGFkZFRpbGVzKC4uLnRpbGVzOiBUaWxlW10pOiBUaWxlIHtcclxuICByZXR1cm4gdGlsZXMucmVkdWNlKChwLCB2LCBfKSA9PiB7XHJcbiAgICByZXR1cm4geyB4OiBwLnggKyB2LngsIHk6IHAueSArIHYueSB9O1xyXG4gIH0sIHsgeDogMCwgeTogMCB9KTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHN1YlRpbGVzKGE6IFRpbGUsIGI6IFRpbGUpOiBUaWxlIHtcclxuICByZXR1cm4geyB4OiBhLnggLSBiLngsIHk6IGEueSAtIGIueSB9O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY29weVRpbGUodGlsZTogVGlsZSk6IFRpbGUge1xyXG4gIHJldHVybiB7IHg6IHRpbGUueCwgeTogdGlsZS55IH07XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiB0aWxlTm90TmVnYXRpdmUodGlsZTogVGlsZSkge1xyXG4gIHJldHVybiB0aWxlQ29tcGFyZSh0aWxlLCB7IHg6IC0xLCB5OiAtMSB9LCAoYSwgYikgPT4gYSA+IGIpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gdGlsZUNvbXBhcmUoYTogVGlsZSwgYjogVGlsZSwgY29tcGFyZTogKGE6IG51bWJlciwgYjogbnVtYmVyKSA9PiBib29sZWFuKSB7XHJcbiAgcmV0dXJuIGNvbXBhcmUoYS54LCBiLngpICYmIGNvbXBhcmUoYS55LCBiLnkpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gdGlsZVdpdGhpbkFyZWFJbmNsdXNpdmUodGlsZTogVGlsZSwgbWluOiBUaWxlLCBtYXg6IFRpbGUpIHtcclxuICByZXR1cm4gdGlsZUNvbXBhcmUodGlsZSwgbWluLCAoYSwgYikgPT4gYSA+PSBiKSAmJiB0aWxlQ29tcGFyZSh0aWxlLCBtYXgsIChhLCBiKSA9PiBhIDw9IGIpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gdGlsZVdpdGhpbkFyZWFFeGNsdXNpdmUodGlsZTogVGlsZSwgbWluOiBUaWxlLCBtYXg6IFRpbGUpIHtcclxuICByZXR1cm4gdGlsZUNvbXBhcmUodGlsZSwgbWluLCAoYSwgYikgPT4gYSA+IGIpICYmIHRpbGVDb21wYXJlKHRpbGUsIG1heCwgKGEsIGIpID0+IGEgPCBiKTtcclxufVxyXG4iLCJlbnVtIENvbG9yIHtcclxuICBCTEFDSyxcclxuICBCTFVFLFxyXG4gIEdSRUVOLFxyXG4gIENZQU4sXHJcbiAgUkVELFxyXG4gIE1BR0VOVEEsXHJcbiAgWUVMTE9XLFxyXG4gIFdISVRFLFxyXG59XHJcbmV4cG9ydCBkZWZhdWx0IENvbG9yO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGFkZENvbG9ycyhhOiBDb2xvciwgYjogQ29sb3IpIHtcclxuICByZXR1cm4gYSB8IGI7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjb2xvclRvUkdCU3RyaW5nKGNvbG9yOiBDb2xvcikge1xyXG4gIGNvbnN0IHIgPSA0ID09PSAoNCAmIGNvbG9yKSA/IDI1NSA6IDA7XHJcbiAgY29uc3QgZyA9IDIgPT09ICgyICYgY29sb3IpID8gMjU1IDogMDtcclxuICBjb25zdCBiID0gMSA9PT0gKDEgJiBjb2xvcikgPyAyNTUgOiAwO1xyXG4gIHJldHVybiBgcmdiKCR7cn0sJHtnfSwke2J9KWA7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjb2xvclRvTmFtZShjb2xvcjogQ29sb3IpIHtcclxuICByZXR1cm4gQ29sb3JbY29sb3JdO1xyXG59XHJcbiIsImltcG9ydCBUaWxlIGZyb20gXCIuLi9UaWxlXCI7XHJcblxyXG5leHBvcnQgY29uc3QgVElMRV9GVUxMID0gNTA7XHJcbmV4cG9ydCBjb25zdCBUSUxFX0hBTEYgPSBUSUxFX0ZVTEwgLyAyO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHRpbGVGcm9tUGl4ZWxzKHg6IG51bWJlciwgeTogbnVtYmVyKTogVGlsZSB7XHJcbiAgcmV0dXJuIHsgeDogTWF0aC5mbG9vcih4IC8gVElMRV9GVUxMKSwgeTogTWF0aC5mbG9vcih5IC8gVElMRV9GVUxMKSB9O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gdGlsZVRvUGl4ZWxzKHRpbGU6IFRpbGUpIHtcclxuICByZXR1cm4geyBweDogdGlsZS54ICogVElMRV9GVUxMLCBweTogdGlsZS55ICogVElMRV9GVUxMIH07XHJcbn1cclxuIiwiaW1wb3J0IHsgY2FsY3VsYXRlQWxsRW5kaW5ncywgR3JpZFBpZWNlIH0gZnJvbSBcIi4uL0xhc2VyR3JpZFwiO1xyXG5pbXBvcnQgTGV2ZWxUeXBlIGZyb20gXCIuLi9MZXZlbFR5cGVcIjtcclxuaW1wb3J0IFBhdGgsIHsgZXF1YWxQYXRocyB9IGZyb20gXCIuLi9QYXRoXCI7XHJcbmltcG9ydCBQaWVjZUlEIGZyb20gXCIuLi9QaWVjZUlEXCI7XHJcbmltcG9ydCBMYXNlckdyaWRDb21wb25lbnQgZnJvbSBcIi4vY29tcG9uZW50cy9MYXNlckdyaWRDb21wb25lbnRcIjtcclxuaW1wb3J0IFBpZWNlQ29tcG9uZW50IGZyb20gXCIuL2NvbXBvbmVudHMvUGllY2VDb21wb25lbnRcIjtcclxuaW1wb3J0IFRvb2xiYXJDb21wb25lbnQgZnJvbSBcIi4vY29tcG9uZW50cy9Ub29sYmFyQ29tcG9uZW50XCI7XHJcbmltcG9ydCB7IHBhdGhUb1N0cmluZyB9IGZyb20gXCIuL0Zyb250ZW5kUGF0aFwiO1xyXG5pbXBvcnQgeyBjYW52YXMsIGN0eCwgcGF0aHNQcmUsIHZpY3RvcnlQLCBzZWVkTGV2ZWxCdXR0b24sIHNlZWRJbnB1dCwgZWRnZXNJbnB1dCwgZGFpbHlMZXZlbEJ1dHRvbiB9IGZyb20gXCIuL0hUTUxFbGVtZW50c1wiO1xyXG5pbXBvcnQgeyBnZW5lcmF0ZUxldmVsIH0gZnJvbSBcIi4uL0xldmVsR2VuZXJhdG9yXCI7XHJcbmltcG9ydCBzZWVkcmFuZG9tID0gcmVxdWlyZShcInNlZWRyYW5kb21cIik7XHJcblxyXG5leHBvcnQgY29uc3QgdG9vbGJhciA9IG5ldyBUb29sYmFyQ29tcG9uZW50KFwiL2Fzc2V0cy9sYXNlcmdhbWUvdG9vbGJhci5wbmdcIiwgeyB4OiAwLCB5OiA3IH0sIDgsIDEsIGRyYXcpO1xyXG5leHBvcnQgY29uc3QgbGFzZXJncmlkQ29tcG9uZW50ID0gbmV3IExhc2VyR3JpZENvbXBvbmVudChcIi9hc3NldHMvbGFzZXJnYW1lL2xhc2VyZ3JpZC5wbmdcIiwgeyB4OiAwLCB5OiAwIH0sIDcsIDcsIGRyYXcpO1xyXG5cclxuZXhwb3J0IGNvbnN0IHBpZWNlQ29tcG9uZW50czogUGllY2VDb21wb25lbnRbXSA9IFtdO1xyXG5cclxubGV0IGN1cnJlbnRMZXZlbDogUGF0aFtdO1xyXG5leHBvcnQgbGV0IGF2YWlsYWJsZVBpZWNlczogR3JpZFBpZWNlW10gPSBbXTtcclxuZXhwb3J0IGxldCBlZGdlTGV2ZWxEYXRhOiBBcnJheTx7IGVkZ2U6IG51bWJlciwgc29sdmVkOiBib29sZWFuIH0+O1xyXG5sZXQgbGV2ZWxUeXBlOiBMZXZlbFR5cGUgPSBMZXZlbFR5cGUuQ3VzdG9tO1xyXG4vLyBsZXQgZGlmZmljdWx0eSA9IFwibWVkaXVtXCI7XHJcblxyXG4vKipcclxuICogSW5pdHMgdGhlIHRoaW5ncyB0aGF0IGFyZW4ndCBjb25zdGFudHNcclxuICovXHJcbmZ1bmN0aW9uIGluaXQoKSB7XHJcbiAgY2FudmFzLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBvbkNsaWNrKTtcclxuICBjYW52YXMuYWRkRXZlbnRMaXN0ZW5lcihcImNvbnRleHRtZW51XCIsIGUgPT4ge1xyXG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgb25DbGljayhlKTtcclxuICB9KTtcclxuXHJcbiAgc2VlZExldmVsQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBzZWVkTGV2ZWwpO1xyXG4gIGRhaWx5TGV2ZWxCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGRhaWx5TGV2ZWwpO1xyXG5cclxuICBwaWVjZUNvbXBvbmVudHNbUGllY2VJRC5GT1JXQVJEX1NMQVNIXSA9IG5ldyBQaWVjZUNvbXBvbmVudChcIi9hc3NldHMvbGFzZXJnYW1lL3BpZWNlcy9taXJyb3JfZm9yd2FyZHNsYXNoLnBuZ1wiLCBkcmF3KTtcclxuICBwaWVjZUNvbXBvbmVudHNbUGllY2VJRC5CQUNLX1NMQVNIXSA9IG5ldyBQaWVjZUNvbXBvbmVudChcIi9hc3NldHMvbGFzZXJnYW1lL3BpZWNlcy9taXJyb3JfYmFja3NsYXNoLnBuZ1wiLCBkcmF3KTtcclxuICBwaWVjZUNvbXBvbmVudHNbUGllY2VJRC5CTEFDS19IT0xFXSA9IG5ldyBQaWVjZUNvbXBvbmVudChcIi9hc3NldHMvbGFzZXJnYW1lL3BpZWNlcy9taXJyb3JfYmxhY2tob2xlLnBuZ1wiLCBkcmF3KTtcclxuICBwaWVjZUNvbXBvbmVudHNbUGllY2VJRC5IT1JJX1NQTElUXSA9IG5ldyBQaWVjZUNvbXBvbmVudChcIi9hc3NldHMvbGFzZXJnYW1lL3BpZWNlcy9taXJyb3Jfc2lkZXNwbGl0LnBuZ1wiLCBkcmF3KTtcclxuICBwaWVjZUNvbXBvbmVudHNbUGllY2VJRC5WRVJUX1NQTElUXSA9IG5ldyBQaWVjZUNvbXBvbmVudChcIi9hc3NldHMvbGFzZXJnYW1lL3BpZWNlcy9taXJyb3JfdXBzcGxpdC5wbmdcIiwgZHJhdyk7XHJcblxyXG4gIHBpZWNlQ29tcG9uZW50c1tQaWVjZUlELkJMVUVdID0gbmV3IFBpZWNlQ29tcG9uZW50KFwiL2Fzc2V0cy9sYXNlcmdhbWUvcGllY2VzL3N3YXRjaF9ibHVlLnBuZ1wiLCBkcmF3KTtcclxuICBwaWVjZUNvbXBvbmVudHNbUGllY2VJRC5SRURdID0gbmV3IFBpZWNlQ29tcG9uZW50KFwiL2Fzc2V0cy9sYXNlcmdhbWUvcGllY2VzL3N3YXRjaF9yZWQucG5nXCIsIGRyYXcpO1xyXG4gIHBpZWNlQ29tcG9uZW50c1tQaWVjZUlELkdSRUVOXSA9IG5ldyBQaWVjZUNvbXBvbmVudChcIi9hc3NldHMvbGFzZXJnYW1lL3BpZWNlcy9zd2F0Y2hfZ3JlZW4ucG5nXCIsIGRyYXcpO1xyXG5cclxuICBmb3IgKGxldCBpID0gMDsgaSA8IDg7IGkrKykge1xyXG4gICAgY29uc3QgcGllY2U6IEdyaWRQaWVjZSA9IHsgcGllY2VJRDogaSwgdGlsZTogeyB4OiAtMSwgeTogLTEgfSwgaW5kZXg6IGkgfTtcclxuICAgIGF2YWlsYWJsZVBpZWNlc1tpXSA9IHBpZWNlO1xyXG4gIH1cclxuXHJcbiAgY2FsY3VsYXRlQWxsRW5kaW5ncyhsYXNlcmdyaWRDb21wb25lbnQubGFzZXJncmlkKTtcclxuICBwcmludFBhdGhzKCk7XHJcbiAgbGFzZXJncmlkQ29tcG9uZW50LmNhbGN1bGF0ZURyYXdQYXRoV3JhcHBlcigpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBkcmF3KCkge1xyXG4gIGN0eC5jbGVhclJlY3QoMCwgMCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KTtcclxuICBjdHguZmlsbFN0eWxlID0gXCIjOWM5YTliXCI7XHJcbiAgY3R4LmZpbGxSZWN0KDAsIDAsIGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodCk7XHJcblxyXG4gIGxhc2VyZ3JpZENvbXBvbmVudC5kcmF3KGN0eCk7XHJcbiAgdG9vbGJhci5kcmF3KGN0eCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIG9uQ2xpY2soZXZlbnQ6IE1vdXNlRXZlbnQpIHtcclxuICBjb25zdCBsb2MgPSB3aW5kb3dUb0NhbnZhcyhldmVudC5jbGllbnRYLCBldmVudC5jbGllbnRZKTtcclxuICBsYXNlcmdyaWRDb21wb25lbnQucHJvY2Vzc01vdXNlQ2xpY2sobG9jLngsIGxvYy55LCBldmVudC5idXR0b24pO1xyXG4gIHRvb2xiYXIucHJvY2Vzc01vdXNlQ2xpY2sobG9jLngsIGxvYy55LCBldmVudC5idXR0b24pO1xyXG4gIHByaW50UGF0aHMoKTtcclxuICBpZiAoY3VycmVudExldmVsICYmIGNoZWNrVmljdG9yeSgpKSB7XHJcbiAgICBpZiAobGV2ZWxUeXBlID09PSBMZXZlbFR5cGUuU2VlZCkge1xyXG4gICAgICB2aWN0b3J5UC50ZXh0Q29udGVudCA9IFwiWW91IGJlYXQgdGhlIHNlZWQgbGV2ZWwhXCI7XHJcbiAgICB9IGVsc2UgaWYgKGxldmVsVHlwZSA9PT0gTGV2ZWxUeXBlLkRhaWx5KSB7XHJcbiAgICAgIHZpY3RvcnlQLnRleHRDb250ZW50ID0gXCJXb3chIFlvdSBiZWF0IHRoZSBkYWlseSBsZXZlbCFcIjtcclxuICAgIH1cclxuICAgIHZpY3RvcnlQLmhpZGRlbiA9IGZhbHNlO1xyXG4gIH1cclxuICBkcmF3KCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHBvcHVsYXRlRWRnZUxldmVsRGF0YSgpIHtcclxuICBpZiAoY3VycmVudExldmVsKSB7XHJcbiAgICBlZGdlTGV2ZWxEYXRhID0gW107XHJcbiAgICBmb3IgKGNvbnN0IHBhdGggb2YgY3VycmVudExldmVsKSB7XHJcbiAgICAgIGNvbnN0IGVkZ2UgPSBwYXRoLnN0YXJ0O1xyXG4gICAgICBsZXQgc29sdmVkID0gZmFsc2U7XHJcbiAgICAgIGlmIChlcXVhbFBhdGhzKHBhdGgsIGxhc2VyZ3JpZENvbXBvbmVudC5sYXNlcmdyaWQucGF0aHNbcGF0aC5zdGFydCAtIDFdKSkge1xyXG4gICAgICAgIHNvbHZlZCA9IHRydWU7XHJcbiAgICAgIH1cclxuICAgICAgZWRnZUxldmVsRGF0YS5wdXNoKHsgZWRnZSwgc29sdmVkIH0pO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gY2hlY2tWaWN0b3J5KCk6IGJvb2xlYW4ge1xyXG4gIGZvciAoY29uc3QgZGF0YSBvZiBlZGdlTGV2ZWxEYXRhKSB7XHJcbiAgICBpZiAoIWRhdGEuc29sdmVkKSB7XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICB9XHJcbiAgcmV0dXJuIHRydWU7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBwcmludFBhdGhzKCkge1xyXG4gIGlmIChjdXJyZW50TGV2ZWwpIHtcclxuICAgIHBvcHVsYXRlRWRnZUxldmVsRGF0YSgpO1xyXG4gICAgcHJpbnRMZXZlbFBhdGhzKCk7XHJcbiAgfSBlbHNlIHtcclxuICAgIHByaW50QWxsUGF0aHMoKTtcclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHByaW50QWxsUGF0aHMoKSB7XHJcbiAgcGF0aHNQcmUuaW5uZXJIVE1MID0gXCJcIjtcclxuICBjb25zdCBwYXRocyA9IGxhc2VyZ3JpZENvbXBvbmVudC5sYXNlcmdyaWQucGF0aHM7XHJcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCAyMDsgaSsrKSB7XHJcbiAgICBjb25zdCBjdXJQYXRoID0gcGF0aHNbaV07XHJcbiAgICBsZXQgbGluZSA9IHBhdGhUb1N0cmluZyhjdXJQYXRoKTtcclxuICAgIGlmIChsYXNlcmdyaWRDb21wb25lbnQuc2VsZWN0ZWRFZGdlID09PSBpICsgMSkge1xyXG4gICAgICBsaW5lID0gYD48Yj4ke2xpbmV9PC9iPmA7XHJcbiAgICB9XHJcbiAgICBwYXRoc1ByZS5pbm5lckhUTUwgKz0gbGluZTtcclxuICAgIGlmIChpIDwgMTkpIHtcclxuICAgICAgcGF0aHNQcmUuaW5uZXJIVE1MICs9IFwiXFxuXCI7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBwcmludExldmVsUGF0aHMoKSB7XHJcbiAgcGF0aHNQcmUuaW5uZXJIVE1MID0gXCJcIjtcclxuICBjb25zdCBwYXRocyA9IGxhc2VyZ3JpZENvbXBvbmVudC5sYXNlcmdyaWQucGF0aHM7XHJcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBjdXJyZW50TGV2ZWwubGVuZ3RoOyBpKyspIHtcclxuICAgIGNvbnN0IGxldmVsUGF0aCA9IGN1cnJlbnRMZXZlbFtpXTtcclxuICAgIGNvbnN0IGN1clBhdGggPSBwYXRoc1tsZXZlbFBhdGguc3RhcnQgLSAxXTtcclxuICAgIGxldCBsaW5lID0gcGF0aFRvU3RyaW5nKGxldmVsUGF0aCk7XHJcbiAgICBsaW5lID0gZXF1YWxQYXRocyhjdXJQYXRoLCBsZXZlbFBhdGgpID8gYDxzcGFuIHN0eWxlPSdjb2xvcjogZ3JlZW4nPiR7bGluZX08L3NwYW4+YFxyXG4gICAgICA6IGA8c3BhbiBzdHlsZT0nY29sb3I6IHJlZCc+JHtsaW5lfTwvc3Bhbj5gO1xyXG4gICAgaWYgKGxhc2VyZ3JpZENvbXBvbmVudC5zZWxlY3RlZEVkZ2UgPT09IGxldmVsUGF0aC5zdGFydCkge1xyXG4gICAgICBsaW5lID0gYD48Yj4ke2xpbmV9PC9iPmA7XHJcbiAgICB9XHJcbiAgICBwYXRoc1ByZS5pbm5lckhUTUwgKz0gbGluZTtcclxuXHJcbiAgICBpZiAoaSA8IGN1cnJlbnRMZXZlbC5sZW5ndGggLSAxKSB7XHJcbiAgICAgIHBhdGhzUHJlLmlubmVySFRNTCArPSBcIlxcblwiO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIENvbnZlcnRzIHRoZSB4LCB5IHBpeGVsIGNvb3JkaW5hdGVzIGZyb20gd2luZG93IHBvc2l0aW9uIHRvIHJlbGF0aXZlIGNhbnZhcyBwb3NpdGlvblxyXG4gKiBAcGFyYW0ge251bWJlcn0geCBjbGllbnRYXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSB5IGNsaWVudFlcclxuICogQHJldHVybnMge3t4OiBudW1iZXIsIHk6IG51bWJlcn19IGEgcmVsYXRpdmUgbG9jYXRpb24gdG8gdGhlIGNhbnZhc1xyXG4gKi9cclxuZnVuY3Rpb24gd2luZG93VG9DYW52YXMoeDogbnVtYmVyLCB5OiBudW1iZXIpIHtcclxuICBjb25zdCBiYm94ID0gY2FudmFzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG5cclxuICByZXR1cm4ge1xyXG4gICAgeDogeCAtIGJib3gubGVmdCAqIChjYW52YXMud2lkdGggLyBiYm94LndpZHRoKSxcclxuICAgIHk6IHkgLSBiYm94LnRvcCAqIChjYW52YXMuaGVpZ2h0IC8gYmJveC5oZWlnaHQpLFxyXG4gIH07XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNldE5ld0xldmVsKHNlZWQ6IHN0cmluZywgZWRnZXM6IG51bWJlciB8IHVuZGVmaW5lZCkge1xyXG4gIGxhc2VyZ3JpZENvbXBvbmVudC5jbGVhcigpO1xyXG4gIGNvbnN0IG5ld0xldmVsID0gZ2VuZXJhdGVMZXZlbChzZWVkLCBlZGdlcylcclxuICBjdXJyZW50TGV2ZWwgPSBbXTtcclxuICBuZXdMZXZlbC5wYXRocy5mb3JFYWNoKHAgPT4gY3VycmVudExldmVsLnB1c2gocCkpO1xyXG4gIGF2YWlsYWJsZVBpZWNlcyA9IG5ld0xldmVsLmF2YWlsYWJsZVBpZWNlcztcclxuICBwcmludFBhdGhzKCk7XHJcbiAgbGFzZXJncmlkQ29tcG9uZW50LmNhbGN1bGF0ZURyYXdQYXRoV3JhcHBlcigpO1xyXG4gIGRyYXcoKTtcclxufVxyXG5cclxuZnVuY3Rpb24gc2VlZExldmVsKCkge1xyXG4gIGxldCBzZWVkID0gc2VlZElucHV0LnZhbHVlO1xyXG4gIGxldCBlZGdlczogbnVtYmVyIHwgdW5kZWZpbmVkID0gcGFyc2VJbnQoZWRnZXNJbnB1dC52YWx1ZSk7XHJcblxyXG4gIGlmIChzZWVkID09PSBcIlwiKSB7XHJcbiAgICBzZWVkID0gRGF0ZS5ub3coKS50b1N0cmluZygpO1xyXG4gIH1cclxuXHJcbiAgaWYgKGlzTmFOKGVkZ2VzKSB8fCBlZGdlcyA8IDEgfHwgZWRnZXMgPiAyMCkge1xyXG4gICAgZWRnZXMgPSB1bmRlZmluZWQ7XHJcbiAgfVxyXG5cclxuICBsZXZlbFR5cGUgPSBMZXZlbFR5cGUuU2VlZDtcclxuICB2aWN0b3J5UC50ZXh0Q29udGVudCA9IGBDdXJyZW50bHkgcGxheWluZyBzZWVkOiAke3NlZWR9YFxyXG5cclxuICBzZXROZXdMZXZlbChzZWVkLCBlZGdlcyk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGRhaWx5TGV2ZWwoKSB7XHJcbiAgY29uc3Qgc2VlZCA9IG5ldyBEYXRlKCkudG9EYXRlU3RyaW5nKCk7XHJcbiAgY29uc3Qgcm5nID0gc2VlZHJhbmRvbShzZWVkKTtcclxuICBjb25zdCBlZGdlcyA9IHJuZygpICogMTAgKyA1O1xyXG5cclxuICBsZXZlbFR5cGUgPSBMZXZlbFR5cGUuRGFpbHk7XHJcbiAgdmljdG9yeVAudGV4dENvbnRlbnQgPSBgQ3VycmVudGx5IHBsYXlpbmcgZGFpbHkgbGV2ZWw6ICR7c2VlZH1gXHJcbiAgc2V0TmV3TGV2ZWwoc2VlZCwgZWRnZXMpO1xyXG59XHJcblxyXG53aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImxvYWRcIiwgKCkgPT4ge1xyXG4gIGluaXQoKTtcclxufSlcclxuXHJcbiIsImltcG9ydCBDb2xvciBmcm9tIFwiLi9Db2xvclwiO1xyXG5pbXBvcnQgRGlyZWN0aW9uIGZyb20gXCIuL0RpcmVjdGlvblwiO1xyXG5pbXBvcnQgRW5kaW5nLCB7IEVuZCB9IGZyb20gXCIuL0VuZGluZ1wiO1xyXG5pbXBvcnQgTGFzZXJTZWdtZW50IGZyb20gXCIuL0xhc2VyU2VnbWVudFwiO1xyXG5pbXBvcnQgUGF0aCBmcm9tIFwiLi9QYXRoXCI7XHJcbmltcG9ydCBQaWVjZUlELCB7IGFwcGx5UGllY2VUb0xhc2VyIH0gZnJvbSBcIi4vUGllY2VJRFwiO1xyXG5pbXBvcnQgVGlsZSwgeyBuZXh0VGlsZSwgdGlsZVdpdGhpbkFyZWFFeGNsdXNpdmUgfSBmcm9tIFwiLi9UaWxlXCI7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIEdyaWRQaWVjZSB7XHJcbiAgcmVhZG9ubHkgcGllY2VJRDogUGllY2VJRDtcclxuICB0aWxlOiBUaWxlO1xyXG4gIHJlYWRvbmx5IGluZGV4OiBudW1iZXI7XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGludGVyZmFjZSBMYXNlckdyaWQge1xyXG4gIHBhdGhzOiBQYXRoW107XHJcbiAgcmVhZG9ubHkgZ3JpZDogKEdyaWRQaWVjZSB8IHVuZGVmaW5lZClbXVtdO1xyXG4gIHJlYWRvbmx5IGxlbmd0aDogbnVtYmVyO1xyXG4gIHJlYWRvbmx5IHdpZHRoOiBudW1iZXI7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBtYWtlRGVmYXVsdEdyaWQoKTogTGFzZXJHcmlkIHtcclxuICBjb25zdCBncmlkID0gW107XHJcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCA1OyBpKyspIHtcclxuICAgIGdyaWRbaV0gPSBbXTtcclxuICB9XHJcbiAgY29uc3QgbmV3R3JpZCA9IHtcclxuICAgIHBhdGhzOiBbXSBhcyBQYXRoW10sXHJcbiAgICBncmlkOiBncmlkIGFzIEdyaWRQaWVjZVtdW10sXHJcbiAgICBsZW5ndGg6IDUsIHdpZHRoOiA1LFxyXG4gIH07XHJcbiAgY2FsY3VsYXRlQWxsRW5kaW5ncyhuZXdHcmlkKTtcclxuICByZXR1cm4gbmV3R3JpZDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHRpbGVUb0VkZ2VOdW1iZXIodGlsZTogVGlsZSkge1xyXG4gIGNvbnN0IHggPSB0aWxlLng7XHJcbiAgY29uc3QgeSA9IHRpbGUueTtcclxuICBpZiAoeSA9PT0gLTEgJiYgeCA+IC0xICYmIHggPCA1KSB7XHJcbiAgICByZXR1cm4gMSArIHg7XHJcbiAgfSBlbHNlIGlmICh4ID09PSA1ICYmIHkgPiAtMSAmJiB5IDwgNSkge1xyXG4gICAgcmV0dXJuIDYgKyB5O1xyXG4gIH0gZWxzZSBpZiAoeSA9PT0gNSAmJiB4ID4gLTEgJiYgeCA8IDUpIHtcclxuICAgIHJldHVybiAxNSAtIHg7XHJcbiAgfSBlbHNlIGlmICh4ID09PSAtMSAmJiB5ID4gLTEgJiYgeSA8IDUpIHtcclxuICAgIHJldHVybiAyMCAtIHk7XHJcbiAgfVxyXG4gIHJldHVybiAwO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZWRnZU51bWJlclRvTGFzZXIoZWRnZTogbnVtYmVyKTogTGFzZXJTZWdtZW50IHtcclxuICBpZiAoZWRnZSA8IDYpIHtcclxuICAgIHJldHVybiB7IHRpbGU6IHsgeDogZWRnZSAtIDEsIHk6IC0xIH0sIGRpcjogRGlyZWN0aW9uLlNPVVRILCBjb2xvcjogQ29sb3IuQkxBQ0sgfTtcclxuICB9IGVsc2UgaWYgKGVkZ2UgPCAxMSkge1xyXG4gICAgcmV0dXJuIHsgdGlsZTogeyB4OiA1LCB5OiBlZGdlIC0gNiB9LCBkaXI6IERpcmVjdGlvbi5XRVNULCBjb2xvcjogQ29sb3IuQkxBQ0sgfTtcclxuICB9IGVsc2UgaWYgKGVkZ2UgPCAxNikge1xyXG4gICAgcmV0dXJuIHsgdGlsZTogeyB4OiAtZWRnZSArIDE1LCB5OiA1IH0sIGRpcjogRGlyZWN0aW9uLk5PUlRILCBjb2xvcjogQ29sb3IuQkxBQ0sgfTtcclxuICB9IGVsc2UgaWYgKGVkZ2UgPCAyMSkge1xyXG4gICAgcmV0dXJuIHsgdGlsZTogeyB4OiAtMSwgeTogLWVkZ2UgKyAyMCB9LCBkaXI6IERpcmVjdGlvbi5FQVNULCBjb2xvcjogQ29sb3IuQkxBQ0sgfTtcclxuICB9XHJcbiAgdGhyb3cgbmV3IEVycm9yKFwiSW5jb3JyZWN0IEVkZ2VcIilcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldFBpZWNlRnJvbUdyaWQobGFzZXJHcmlkOiBMYXNlckdyaWQsIHRpbGU6IFRpbGUpIHtcclxuICBpZiAobGFzZXJHcmlkLmdyaWRbdGlsZS55XSkge1xyXG4gICAgcmV0dXJuIGxhc2VyR3JpZC5ncmlkW3RpbGUueV1bdGlsZS54XTtcclxuICB9XHJcbiAgcmV0dXJuIHVuZGVmaW5lZDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGlzVmFsaWRTcGFjZShsYXNlckdyaWQ6IExhc2VyR3JpZCwgdGlsZTogVGlsZSkge1xyXG4gIHJldHVybiB0aWxlV2l0aGluQXJlYUV4Y2x1c2l2ZSh0aWxlLCB7IHg6IC0xLCB5OiAtMSB9LCB7IHg6IGxhc2VyR3JpZC53aWR0aCwgeTogbGFzZXJHcmlkLmxlbmd0aCB9KTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZVBpZWNlRnJvbUdyaWQobGFzZXJHcmlkOiBMYXNlckdyaWQsIHBpZWNlOiBHcmlkUGllY2UpOiBHcmlkUGllY2Uge1xyXG4gIGxhc2VyR3JpZC5ncmlkW3BpZWNlLnRpbGUueV1bcGllY2UudGlsZS54XSA9IHVuZGVmaW5lZDtcclxuICBwaWVjZS50aWxlID0geyB4OiAtMSwgeTogLTEgfTtcclxuICBjYWxjdWxhdGVBbGxFbmRpbmdzKGxhc2VyR3JpZCk7XHJcbiAgcmV0dXJuIHBpZWNlO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gc2V0UGllY2VJbkdyaWQobGFzZXJHcmlkOiBMYXNlckdyaWQsIHBpZWNlOiBHcmlkUGllY2UsIHRpbGU6IFRpbGUpOiBHcmlkUGllY2UgfCB1bmRlZmluZWQge1xyXG4gIGlmIChpc1ZhbGlkU3BhY2UobGFzZXJHcmlkLCBwaWVjZS50aWxlKSkge1xyXG4gICAgbGFzZXJHcmlkLmdyaWRbcGllY2UudGlsZS55XVtwaWVjZS50aWxlLnhdID0gdW5kZWZpbmVkO1xyXG4gIH1cclxuICBjb25zdCBjdXJyZW50UGllY2UgPSBnZXRQaWVjZUZyb21HcmlkKGxhc2VyR3JpZCwgdGlsZSk7XHJcbiAgbGV0IHJlbW92ZWRQaWVjZSA9IHVuZGVmaW5lZDtcclxuICBpZiAoY3VycmVudFBpZWNlKSB7XHJcbiAgICByZW1vdmVkUGllY2UgPSByZW1vdmVQaWVjZUZyb21HcmlkKGxhc2VyR3JpZCwgY3VycmVudFBpZWNlKTtcclxuICB9XHJcbiAgcGllY2UudGlsZSA9IHRpbGU7XHJcbiAgbGFzZXJHcmlkLmdyaWRbdGlsZS55XVt0aWxlLnhdID0gcGllY2U7XHJcbiAgY2FsY3VsYXRlQWxsRW5kaW5ncyhsYXNlckdyaWQpO1xyXG4gIHJldHVybiByZW1vdmVkUGllY2U7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjYWxjdWxhdGVBbGxFbmRpbmdzKGxhc2VyR3JpZDogTGFzZXJHcmlkKSB7XHJcbiAgY29uc3QgZW5kaW5nczogUGF0aFtdID0gW107XHJcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCAyMDsgaSsrKSB7XHJcbiAgICBlbmRpbmdzW2ldID0geyBzdGFydDogaSArIDEsIGVuZGluZ3M6IGNhbGN1bGF0ZUVuZGluZ0xpc3QobGFzZXJHcmlkLCBpICsgMSkgfTtcclxuICB9XHJcbiAgbGFzZXJHcmlkLnBhdGhzID0gZW5kaW5ncztcclxufVxyXG5cclxuZnVuY3Rpb24gY2FsY3VsYXRlRW5kaW5nTGlzdChsYXNlckdyaWQ6IExhc2VyR3JpZCwgZWRnZTogbnVtYmVyKSB7XHJcbiAgY29uc3QgZW5kaW5nTGlzdDogRW5kaW5nW10gPSBbXTtcclxuXHJcbiAgZnVuY3Rpb24gdHJhY2tPbmVFbmRpbmcoZ3JpZDogTGFzZXJHcmlkLCBsYXNlcjogTGFzZXJTZWdtZW50KSB7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDEwMDsgaSsrKSB7XHJcbiAgICAgIGxhc2VyLnRpbGUgPSBuZXh0VGlsZShsYXNlci50aWxlLCBsYXNlci5kaXIpO1xyXG4gICAgICBpZiAoIWlzVmFsaWRTcGFjZShncmlkLCBsYXNlci50aWxlKSkge1xyXG4gICAgICAgIGNvbnN0IGVuZEVkZ2UgPSB0aWxlVG9FZGdlTnVtYmVyKGxhc2VyLnRpbGUpO1xyXG4gICAgICAgIGVuZGluZ0xpc3QucHVzaCh7IGVuZDogZW5kRWRnZSwgY29sb3I6IGxhc2VyLmNvbG9yIH0pO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG4gICAgICBjb25zdCBwaWVjZSA9IGdldFBpZWNlRnJvbUdyaWQoZ3JpZCwgbGFzZXIudGlsZSk7XHJcbiAgICAgIGlmIChwaWVjZSkge1xyXG4gICAgICAgIGFwcGx5UGllY2VUb0xhc2VyKGxhc2VyLCBwaWVjZS5waWVjZUlEKTtcclxuICAgICAgICBzd2l0Y2ggKGxhc2VyLmRpcikge1xyXG4gICAgICAgICAgY2FzZSBEaXJlY3Rpb24uU1BMSVRfTk9SVEhfU09VVEg6XHJcbiAgICAgICAgICAgIGxhc2VyLmRpciA9IERpcmVjdGlvbi5OT1JUSDtcclxuICAgICAgICAgICAgdHJhY2tPbmVFbmRpbmcoZ3JpZCwgeyB0aWxlOiBsYXNlci50aWxlLCBkaXI6IERpcmVjdGlvbi5TT1VUSCwgY29sb3I6IGxhc2VyLmNvbG9yIH0pO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgIGNhc2UgRGlyZWN0aW9uLlNQTElUX0VBU1RfV0VTVDpcclxuICAgICAgICAgICAgbGFzZXIuZGlyID0gRGlyZWN0aW9uLkVBU1Q7XHJcbiAgICAgICAgICAgIHRyYWNrT25lRW5kaW5nKGdyaWQsIHsgdGlsZTogbGFzZXIudGlsZSwgZGlyOiBEaXJlY3Rpb24uV0VTVCwgY29sb3I6IGxhc2VyLmNvbG9yIH0pO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgIGNhc2UgRGlyZWN0aW9uLk5PTkU6XHJcbiAgICAgICAgICAgIGVuZGluZ0xpc3QucHVzaCh7IGVuZDogRW5kLkJsb2NrZWQsIGNvbG9yOiBsYXNlci5jb2xvciB9KTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgfSAvLyBpZiBwaWVjZSBpcyBub3QgbnVsbFxyXG4gICAgfSAvLyBmb3JcclxuICAgIGVuZGluZ0xpc3QucHVzaCh7IGVuZDogRW5kLkxvb3AsIGNvbG9yOiBsYXNlci5jb2xvciB9KTtcclxuICB9IC8vIHRyYWNrT25lRW5kaW5nKClcclxuXHJcbiAgdHJhY2tPbmVFbmRpbmcobGFzZXJHcmlkLCBlZGdlTnVtYmVyVG9MYXNlcihlZGdlKSk7XHJcbiAgZW5kaW5nTGlzdC5zb3J0KChhLCBiKSA9PiBhLmVuZCA8IGIuZW5kID8gLTEgOiAxKTtcclxuICByZXR1cm4gZW5kaW5nTGlzdDtcclxufVxyXG4iLCJpbXBvcnQgQ29sb3IgZnJvbSBcIi4vQ29sb3JcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGludGVyZmFjZSBFbmRpbmcge1xyXG4gIHJlYWRvbmx5IGVuZDogRW5kO1xyXG4gIHJlYWRvbmx5IGNvbG9yOiBDb2xvcjtcclxufVxyXG5cclxuZXhwb3J0IGVudW0gRW5kIHtcclxuICBCbG9ja2VkID0gLTIsXHJcbiAgTG9vcCxcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGVuZGluZ3NFcXVhbChhOiBFbmRpbmcsIGI6IEVuZGluZykge1xyXG4gIHJldHVybiBhLmVuZCA9PT0gYi5lbmQgJiYgYS5jb2xvciA9PT0gYi5jb2xvcjtcclxufVxyXG4iLCJpbXBvcnQgQ29sb3IsICogYXMgY29sb3JNYW5hZ2VyIGZyb20gXCIuL0NvbG9yXCI7XHJcbmltcG9ydCBEaXJlY3Rpb24gZnJvbSBcIi4vRGlyZWN0aW9uXCI7XHJcbmltcG9ydCBMYXNlclNlZ21lbnQgZnJvbSBcIi4vTGFzZXJTZWdtZW50XCI7XHJcblxyXG5lbnVtIFBpZWNlSUQge1xyXG4gIEZPUldBUkRfU0xBU0gsXHJcbiAgQkFDS19TTEFTSCxcclxuICBCTEFDS19IT0xFLFxyXG4gIEhPUklfU1BMSVQsXHJcbiAgVkVSVF9TUExJVCxcclxuXHJcbiAgUkVELFxyXG4gIEJMVUUsXHJcbiAgR1JFRU4sXHJcbn1cclxuZXhwb3J0IGRlZmF1bHQgUGllY2VJRDtcclxuXHJcbmludGVyZmFjZSBQaWVjZVJ1bGUge1xyXG4gIGRpcnM/OiBEaXJlY3Rpb25bXTtcclxuICBjb2xvcj86IENvbG9yO1xyXG59XHJcblxyXG5jb25zdCBwaWVjZVJ1bGVMaXN0OiBSZWFkb25seUFycmF5PFBpZWNlUnVsZT4gPSBbXHJcbiAgeyBkaXJzOiBbRGlyZWN0aW9uLkVBU1QsIERpcmVjdGlvbi5OT1JUSCwgRGlyZWN0aW9uLldFU1QsIERpcmVjdGlvbi5TT1VUSF0gfSxcclxuICB7IGRpcnM6IFtEaXJlY3Rpb24uV0VTVCwgRGlyZWN0aW9uLlNPVVRILCBEaXJlY3Rpb24uRUFTVCwgRGlyZWN0aW9uLk5PUlRIXSB9LFxyXG4gIHsgZGlyczogW0RpcmVjdGlvbi5OT05FLCBEaXJlY3Rpb24uTk9ORSwgRGlyZWN0aW9uLk5PTkUsIERpcmVjdGlvbi5OT05FXSB9LFxyXG4gIHsgZGlyczogW0RpcmVjdGlvbi5FQVNULCBEaXJlY3Rpb24uTk9ORSwgRGlyZWN0aW9uLkVBU1QsIERpcmVjdGlvbi5TUExJVF9OT1JUSF9TT1VUSF0gfSxcclxuICB7IGRpcnM6IFtEaXJlY3Rpb24uTk9ORSwgRGlyZWN0aW9uLk5PUlRILCBEaXJlY3Rpb24uU1BMSVRfRUFTVF9XRVNULCBEaXJlY3Rpb24uTk9SVEhdIH0sXHJcblxyXG4gIHsgY29sb3I6IENvbG9yLlJFRCB9LFxyXG4gIHsgY29sb3I6IENvbG9yLkJMVUUgfSxcclxuICB7IGNvbG9yOiBDb2xvci5HUkVFTiB9LFxyXG5dO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGFwcGx5UGllY2VUb0xhc2VyKGxhc2VyOiBMYXNlclNlZ21lbnQsIHBpZWNlSUQ6IFBpZWNlSUQpIHtcclxuICBjb25zdCBwaWVjZVJ1bGVzID0gcGllY2VSdWxlTGlzdFtwaWVjZUlEXTtcclxuICBpZiAocGllY2VSdWxlcy5kaXJzKSB7XHJcbiAgICBsYXNlci5kaXIgPSBwaWVjZVJ1bGVzLmRpcnNbbGFzZXIuZGlyXTtcclxuICB9XHJcbiAgaWYgKHBpZWNlUnVsZXMuY29sb3IpIHtcclxuICAgIGxhc2VyLmNvbG9yID0gY29sb3JNYW5hZ2VyLmFkZENvbG9ycyhsYXNlci5jb2xvciwgcGllY2VSdWxlcy5jb2xvcik7XHJcbiAgfVxyXG4gIHJldHVybiBsYXNlcjtcclxufVxyXG4iLCJpbXBvcnQgRW5kaW5nLCB7IGVuZGluZ3NFcXVhbCB9IGZyb20gXCIuL0VuZGluZ1wiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgaW50ZXJmYWNlIFBhdGgge1xyXG4gIHN0YXJ0OiBudW1iZXI7XHJcbiAgZW5kaW5nczogRW5kaW5nW107XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBlcXVhbFBhdGhzKGE6IFBhdGgsIGI6IFBhdGgpIHtcclxuICBpZiAoYS5lbmRpbmdzLmxlbmd0aCAhPT0gYi5lbmRpbmdzLmxlbmd0aCkgcmV0dXJuIGZhbHNlO1xyXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgYS5lbmRpbmdzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICBpZiAoIWVuZGluZ3NFcXVhbChhLmVuZGluZ3NbaV0sIGIuZW5kaW5nc1tpXSkpIHtcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gIH1cclxuICByZXR1cm4gdHJ1ZTtcclxufVxyXG4iLCJpbXBvcnQgVGlsZSwgeyBzdWJUaWxlcywgdGlsZVdpdGhpbkFyZWFFeGNsdXNpdmUgfSBmcm9tIFwiLi4vLi4vVGlsZVwiO1xyXG5pbXBvcnQgeyB0aWxlRnJvbVBpeGVscywgdGlsZVRvUGl4ZWxzIH0gZnJvbSBcIi4uL0Zyb250ZW5kVGlsZVwiO1xyXG5cclxuLyoqXHJcbiAqIEFuIGFic3RyYWN0IGNsYXNzIHJlcHJlc2VudGluZyBhIHNtYWxsZXIgc2VjdGlvbiBvZiB0aGUgY2FudmFzXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBhYnN0cmFjdCBjbGFzcyBDYW52YXNDb21wb25lbnQge1xyXG4gIHB1YmxpYyB0aWxlOiBUaWxlO1xyXG4gIHB1YmxpYyB3aWR0aEluVGlsZXM6IG51bWJlcjtcclxuICBwdWJsaWMgaGVpZ2h0SW5UaWxlczogbnVtYmVyO1xyXG4gIHB1YmxpYyBvZmZzZXRYOiBudW1iZXI7XHJcbiAgcHVibGljIG9mZnNldFk6IG51bWJlcjtcclxuICBwcml2YXRlIGltZzogSFRNTEltYWdlRWxlbWVudDtcclxuXHJcbiAgY29uc3RydWN0b3Ioc3JjOiBzdHJpbmcsIHRpbGU6IFRpbGUsIHdpZHRoSW5UaWxlczogbnVtYmVyLCBoZWlnaHRJblRpbGVzOiBudW1iZXIsIGRyYXc6ICgpID0+IHZvaWQsXHJcbiAgICBvZmZzZXRYID0gMCwgb2Zmc2V0WSA9IDApIHtcclxuICAgIHRoaXMuaW1nID0gbmV3IEltYWdlKCk7XHJcbiAgICB0aGlzLmltZy5vbmxvYWQgPSAoKSA9PiB7IGRyYXcoKTsgfTtcclxuICAgIHRoaXMuaW1nLnNyYyA9IHNyYztcclxuICAgIHRoaXMudGlsZSA9IHRpbGU7XHJcbiAgICB0aGlzLndpZHRoSW5UaWxlcyA9IHdpZHRoSW5UaWxlcztcclxuICAgIHRoaXMuaGVpZ2h0SW5UaWxlcyA9IGhlaWdodEluVGlsZXM7XHJcbiAgICB0aGlzLm9mZnNldFggPSBvZmZzZXRYO1xyXG4gICAgdGhpcy5vZmZzZXRZID0gb2Zmc2V0WTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIERyYXdzIHRoZSBjb21wb25lbnRzIGltYWdlIGF0IHRoZSBsb2NhdGlvblxyXG4gICAqL1xyXG4gIHB1YmxpYyBkcmF3KGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEKSB7XHJcbiAgICBjb25zdCBsb2MgPSB0aWxlVG9QaXhlbHModGhpcy50aWxlKTtcclxuICAgIGN0eC5kcmF3SW1hZ2UodGhpcy5pbWcsIGxvYy5weCArIHRoaXMub2Zmc2V0WCwgbG9jLnB5ICsgdGhpcy5vZmZzZXRZKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEZpZ3VyZXMgb3V0IHdoZXRoZXIgYSBidXR0b24gcHJlc3MgaGFwcGVuZWQgaW5zaWRlIHRoZSBjb21wb25lbnQgYW5kIHJldHVybnMgaXQuIElmIGl0IGRpZG4ndCwgcmV0dXJucyBudWxsLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBwcm9jZXNzTW91c2VDbGljayh4OiBudW1iZXIsIHk6IG51bWJlciwgX2J1dHRvbjogbnVtYmVyKSB7XHJcbiAgICBjb25zdCByZWxhdGl2ZVRpbGUgPSBzdWJUaWxlcyh0aWxlRnJvbVBpeGVscyh4LCB5KSwgdGhpcy50aWxlKTtcclxuICAgIGlmICh0aWxlV2l0aGluQXJlYUV4Y2x1c2l2ZShyZWxhdGl2ZVRpbGUsIHsgeDogLTEsIHk6IC0xIH0sIHsgeDogdGhpcy53aWR0aEluVGlsZXMsIHk6IHRoaXMuaGVpZ2h0SW5UaWxlcyB9KSkge1xyXG4gICAgICByZXR1cm4gcmVsYXRpdmVUaWxlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG51bGw7XHJcbiAgfVxyXG59XHJcbiIsIi8vIEEgbGlicmFyeSBvZiBzZWVkYWJsZSBSTkdzIGltcGxlbWVudGVkIGluIEphdmFzY3JpcHQuXG4vL1xuLy8gVXNhZ2U6XG4vL1xuLy8gdmFyIHNlZWRyYW5kb20gPSByZXF1aXJlKCdzZWVkcmFuZG9tJyk7XG4vLyB2YXIgcmFuZG9tID0gc2VlZHJhbmRvbSgxKTsgLy8gb3IgYW55IHNlZWQuXG4vLyB2YXIgeCA9IHJhbmRvbSgpOyAgICAgICAvLyAwIDw9IHggPCAxLiAgRXZlcnkgYml0IGlzIHJhbmRvbS5cbi8vIHZhciB4ID0gcmFuZG9tLnF1aWNrKCk7IC8vIDAgPD0geCA8IDEuICAzMiBiaXRzIG9mIHJhbmRvbW5lc3MuXG5cbi8vIGFsZWEsIGEgNTMtYml0IG11bHRpcGx5LXdpdGgtY2FycnkgZ2VuZXJhdG9yIGJ5IEpvaGFubmVzIEJhYWfDuGUuXG4vLyBQZXJpb2Q6IH4yXjExNlxuLy8gUmVwb3J0ZWQgdG8gcGFzcyBhbGwgQmlnQ3J1c2ggdGVzdHMuXG52YXIgYWxlYSA9IHJlcXVpcmUoJy4vbGliL2FsZWEnKTtcblxuLy8geG9yMTI4LCBhIHB1cmUgeG9yLXNoaWZ0IGdlbmVyYXRvciBieSBHZW9yZ2UgTWFyc2FnbGlhLlxuLy8gUGVyaW9kOiAyXjEyOC0xLlxuLy8gUmVwb3J0ZWQgdG8gZmFpbDogTWF0cml4UmFuayBhbmQgTGluZWFyQ29tcC5cbnZhciB4b3IxMjggPSByZXF1aXJlKCcuL2xpYi94b3IxMjgnKTtcblxuLy8geG9yd293LCBHZW9yZ2UgTWFyc2FnbGlhJ3MgMTYwLWJpdCB4b3Itc2hpZnQgY29tYmluZWQgcGx1cyB3ZXlsLlxuLy8gUGVyaW9kOiAyXjE5Mi0yXjMyXG4vLyBSZXBvcnRlZCB0byBmYWlsOiBDb2xsaXNpb25PdmVyLCBTaW1wUG9rZXIsIGFuZCBMaW5lYXJDb21wLlxudmFyIHhvcndvdyA9IHJlcXVpcmUoJy4vbGliL3hvcndvdycpO1xuXG4vLyB4b3JzaGlmdDcsIGJ5IEZyYW7Dp29pcyBQYW5uZXRvbiBhbmQgUGllcnJlIEwnZWN1eWVyLCB0YWtlc1xuLy8gYSBkaWZmZXJlbnQgYXBwcm9hY2g6IGl0IGFkZHMgcm9idXN0bmVzcyBieSBhbGxvd2luZyBtb3JlIHNoaWZ0c1xuLy8gdGhhbiBNYXJzYWdsaWEncyBvcmlnaW5hbCB0aHJlZS4gIEl0IGlzIGEgNy1zaGlmdCBnZW5lcmF0b3Jcbi8vIHdpdGggMjU2IGJpdHMsIHRoYXQgcGFzc2VzIEJpZ0NydXNoIHdpdGggbm8gc3lzdG1hdGljIGZhaWx1cmVzLlxuLy8gUGVyaW9kIDJeMjU2LTEuXG4vLyBObyBzeXN0ZW1hdGljIEJpZ0NydXNoIGZhaWx1cmVzIHJlcG9ydGVkLlxudmFyIHhvcnNoaWZ0NyA9IHJlcXVpcmUoJy4vbGliL3hvcnNoaWZ0NycpO1xuXG4vLyB4b3I0MDk2LCBieSBSaWNoYXJkIEJyZW50LCBpcyBhIDQwOTYtYml0IHhvci1zaGlmdCB3aXRoIGFcbi8vIHZlcnkgbG9uZyBwZXJpb2QgdGhhdCBhbHNvIGFkZHMgYSBXZXlsIGdlbmVyYXRvci4gSXQgYWxzbyBwYXNzZXNcbi8vIEJpZ0NydXNoIHdpdGggbm8gc3lzdGVtYXRpYyBmYWlsdXJlcy4gIEl0cyBsb25nIHBlcmlvZCBtYXlcbi8vIGJlIHVzZWZ1bCBpZiB5b3UgaGF2ZSBtYW55IGdlbmVyYXRvcnMgYW5kIG5lZWQgdG8gYXZvaWRcbi8vIGNvbGxpc2lvbnMuXG4vLyBQZXJpb2Q6IDJeNDEyOC0yXjMyLlxuLy8gTm8gc3lzdGVtYXRpYyBCaWdDcnVzaCBmYWlsdXJlcyByZXBvcnRlZC5cbnZhciB4b3I0MDk2ID0gcmVxdWlyZSgnLi9saWIveG9yNDA5NicpO1xuXG4vLyBUeWNoZS1pLCBieSBTYW11ZWwgTmV2ZXMgYW5kIEZpbGlwZSBBcmF1am8sIGlzIGEgYml0LXNoaWZ0aW5nIHJhbmRvbVxuLy8gbnVtYmVyIGdlbmVyYXRvciBkZXJpdmVkIGZyb20gQ2hhQ2hhLCBhIG1vZGVybiBzdHJlYW0gY2lwaGVyLlxuLy8gaHR0cHM6Ly9lZGVuLmRlaS51Yy5wdC9+c25ldmVzL3B1YnMvMjAxMS1zbmZhMi5wZGZcbi8vIFBlcmlvZDogfjJeMTI3XG4vLyBObyBzeXN0ZW1hdGljIEJpZ0NydXNoIGZhaWx1cmVzIHJlcG9ydGVkLlxudmFyIHR5Y2hlaSA9IHJlcXVpcmUoJy4vbGliL3R5Y2hlaScpO1xuXG4vLyBUaGUgb3JpZ2luYWwgQVJDNC1iYXNlZCBwcm5nIGluY2x1ZGVkIGluIHRoaXMgbGlicmFyeS5cbi8vIFBlcmlvZDogfjJeMTYwMFxudmFyIHNyID0gcmVxdWlyZSgnLi9zZWVkcmFuZG9tJyk7XG5cbnNyLmFsZWEgPSBhbGVhO1xuc3IueG9yMTI4ID0geG9yMTI4O1xuc3IueG9yd293ID0geG9yd293O1xuc3IueG9yc2hpZnQ3ID0geG9yc2hpZnQ3O1xuc3IueG9yNDA5NiA9IHhvcjQwOTY7XG5zci50eWNoZWkgPSB0eWNoZWk7XG5cbm1vZHVsZS5leHBvcnRzID0gc3I7XG4iLCJlbnVtIExldmVsVHlwZSB7XHJcbiAgRGFpbHksXHJcbiAgU2VlZCxcclxuICBDdXN0b20sXHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IExldmVsVHlwZTtcclxuIiwiaW1wb3J0IHsgY29sb3JUb1JHQlN0cmluZyB9IGZyb20gXCIuLi8uLi9Db2xvclwiO1xyXG5pbXBvcnQgRGlyZWN0aW9uIGZyb20gXCIuLi8uLi9EaXJlY3Rpb25cIjtcclxuaW1wb3J0IExhc2VyR3JpZCwgeyBlZGdlTnVtYmVyVG9MYXNlciwgZ2V0UGllY2VGcm9tR3JpZCwgbWFrZURlZmF1bHRHcmlkLCByZW1vdmVQaWVjZUZyb21HcmlkLCBzZXRQaWVjZUluR3JpZCwgdGlsZVRvRWRnZU51bWJlciB9IGZyb20gXCIuLi8uLi9MYXNlckdyaWRcIjtcclxuaW1wb3J0IExhc2VyU2VnbWVudCwgeyBjb3B5TGFzZXJTZWdtZW50LCBnZXRPcHBvc2l0ZUxhc2VyU2VnbWVudCB9IGZyb20gXCIuLi8uLi9MYXNlclNlZ21lbnRcIjtcclxuaW1wb3J0IHsgYXBwbHlQaWVjZVRvTGFzZXIgfSBmcm9tIFwiLi4vLi4vUGllY2VJRFwiO1xyXG5pbXBvcnQgVGlsZSwgeyBhZGRUaWxlcywgZGlyZWN0aW9uVG9UaWxlLCBuZXh0VGlsZSwgc3ViVGlsZXMsIHRpbGVXaXRoaW5BcmVhSW5jbHVzaXZlIH0gZnJvbSBcIi4uLy4uL1RpbGVcIjtcclxuaW1wb3J0IHsgYXZhaWxhYmxlUGllY2VzLCBlZGdlTGV2ZWxEYXRhLCBwaWVjZUNvbXBvbmVudHMsIHByaW50UGF0aHMsIHRvb2xiYXIgfSBmcm9tIFwiLi4vRnJvbnRlbmRMYXNlcmdhbWVcIjtcclxuaW1wb3J0IHsgdGlsZVRvUGl4ZWxzLCBUSUxFX0ZVTEwsIFRJTEVfSEFMRiB9IGZyb20gXCIuLi9Gcm9udGVuZFRpbGVcIjtcclxuaW1wb3J0IENhbnZhc0NvbXBvbmVudCBmcm9tIFwiLi9DYW52YXNDb21wb25lbnRcIjtcclxuXHJcblxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTGFzZXJHcmlkQ29tcG9uZW50IGV4dGVuZHMgQ2FudmFzQ29tcG9uZW50IHtcclxuICBwdWJsaWMgbGFzZXJncmlkOiBMYXNlckdyaWQ7XHJcbiAgcHVibGljIHNlbGVjdGVkRWRnZTogbnVtYmVyO1xyXG4gIHB1YmxpYyBkcmF3UGF0aDogTGFzZXJTZWdtZW50W107XHJcblxyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgc3JjOiBzdHJpbmcsIHRpbGU6IFRpbGUsIHdpZHRoSW5UaWxlczogbnVtYmVyLCBoZWlnaHRJblRpbGVzOiBudW1iZXIsIGRyYXc6ICgpID0+IHZvaWQsXHJcbiAgICBvZmZzZXRYID0gMCwgb2Zmc2V0WSA9IDApIHtcclxuICAgIHN1cGVyKHNyYywgdGlsZSwgd2lkdGhJblRpbGVzLCBoZWlnaHRJblRpbGVzLCBkcmF3LCBvZmZzZXRYLCBvZmZzZXRZKTtcclxuXHJcbiAgICB0aGlzLmxhc2VyZ3JpZCA9IG1ha2VEZWZhdWx0R3JpZCgpO1xyXG5cclxuICAgIHRoaXMuc2VsZWN0ZWRFZGdlID0gMTtcclxuICAgIHRoaXMuZHJhd1BhdGggPSBbXTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBkcmF3KGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEKSB7XHJcbiAgICBzdXBlci5kcmF3KGN0eCk7XHJcblxyXG4gICAgLy8gRHJhdyBwaWVjZXMgb24gZ3JpZFxyXG4gICAgZm9yIChjb25zdCBwaWVjZSBvZiBhdmFpbGFibGVQaWVjZXMpIHtcclxuICAgICAgaWYgKCh0aWxlV2l0aGluQXJlYUluY2x1c2l2ZShwaWVjZS50aWxlLCB7IHg6IDAsIHk6IDAgfSwgeyB4OiA0LCB5OiA0IH0pKSkge1xyXG4gICAgICAgIHBpZWNlQ29tcG9uZW50c1twaWVjZS5waWVjZUlEXS5kcmF3QXQoYWRkVGlsZXModGhpcy50aWxlLCBwaWVjZS50aWxlLCB7IHg6IDEsIHk6IDEgfSksIGN0eCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBEcmF3IGxhc2VyIHBhdGggb24gZ3JpZFxyXG4gICAgZm9yIChjb25zdCBsYXNlciBvZiB0aGlzLmRyYXdQYXRoKSB7XHJcbiAgICAgIGN0eC5iZWdpblBhdGgoKTtcclxuICAgICAgY3R4LnN0cm9rZVN0eWxlID0gY29sb3JUb1JHQlN0cmluZyhsYXNlci5jb2xvcik7XHJcbiAgICAgIGNvbnN0IGxvYyA9IHRpbGVUb1BpeGVscyhhZGRUaWxlcyhsYXNlci50aWxlLCB7IHg6IDEsIHk6IDEgfSkpO1xyXG4gICAgICBsb2MucHggKz0gVElMRV9IQUxGO1xyXG4gICAgICBsb2MucHkgKz0gVElMRV9IQUxGO1xyXG4gICAgICBjdHgubW92ZVRvKGxvYy5weCwgbG9jLnB5KTtcclxuICAgICAgY29uc3QgdGlsZW1hcCA9IGRpcmVjdGlvblRvVGlsZShsYXNlci5kaXIpO1xyXG4gICAgICBjdHgubGluZVRvKGxvYy5weCArIHRpbGVtYXAueCAqIFRJTEVfSEFMRiwgbG9jLnB5ICsgdGlsZW1hcC55ICogVElMRV9IQUxGKTtcclxuICAgICAgY3R4LnN0cm9rZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIERyYXcgc2VsZWN0ZWQgZWRnZSBtYXJrZXIgb24gZ3JpZFxyXG4gICAgbGV0IHNlbGVjdGVkRWRnZVBpeGVscyA9IHRpbGVUb1BpeGVscyhhZGRUaWxlcyhlZGdlTnVtYmVyVG9MYXNlcih0aGlzLnNlbGVjdGVkRWRnZSkudGlsZSwgeyB4OiAxLCB5OiAxIH0pKTtcclxuICAgIGN0eC5zdHJva2VTdHlsZSA9IFwiI0ZGRkZGRlwiO1xyXG4gICAgY3R4LmJlZ2luUGF0aCgpO1xyXG4gICAgaWYgKHRoaXMuc2VsZWN0ZWRFZGdlIDwgNikge1xyXG4gICAgICBjdHgubW92ZVRvKHNlbGVjdGVkRWRnZVBpeGVscy5weCArIFRJTEVfSEFMRiAtIDUsIHNlbGVjdGVkRWRnZVBpeGVscy5weSArIFRJTEVfRlVMTCAtIDUpO1xyXG4gICAgICBjdHgubGluZVRvKHNlbGVjdGVkRWRnZVBpeGVscy5weCArIFRJTEVfSEFMRiwgc2VsZWN0ZWRFZGdlUGl4ZWxzLnB5ICsgVElMRV9GVUxMKTtcclxuICAgICAgY3R4LmxpbmVUbyhzZWxlY3RlZEVkZ2VQaXhlbHMucHggKyBUSUxFX0hBTEYgKyA1LCBzZWxlY3RlZEVkZ2VQaXhlbHMucHkgKyBUSUxFX0ZVTEwgLSA1KTtcclxuICAgIH0gZWxzZSBpZiAodGhpcy5zZWxlY3RlZEVkZ2UgPCAxMSkge1xyXG4gICAgICBjdHgubW92ZVRvKHNlbGVjdGVkRWRnZVBpeGVscy5weCArIDUsIHNlbGVjdGVkRWRnZVBpeGVscy5weSArIFRJTEVfSEFMRiAtIDUpO1xyXG4gICAgICBjdHgubGluZVRvKHNlbGVjdGVkRWRnZVBpeGVscy5weCwgc2VsZWN0ZWRFZGdlUGl4ZWxzLnB5ICsgVElMRV9IQUxGKTtcclxuICAgICAgY3R4LmxpbmVUbyhzZWxlY3RlZEVkZ2VQaXhlbHMucHggKyA1LCBzZWxlY3RlZEVkZ2VQaXhlbHMucHkgKyBUSUxFX0hBTEYgKyA1KTtcclxuICAgIH0gZWxzZSBpZiAodGhpcy5zZWxlY3RlZEVkZ2UgPCAxNikge1xyXG4gICAgICBjdHgubW92ZVRvKHNlbGVjdGVkRWRnZVBpeGVscy5weCArIFRJTEVfSEFMRiAtIDUsIHNlbGVjdGVkRWRnZVBpeGVscy5weSArIDUpO1xyXG4gICAgICBjdHgubGluZVRvKHNlbGVjdGVkRWRnZVBpeGVscy5weCArIFRJTEVfSEFMRiwgc2VsZWN0ZWRFZGdlUGl4ZWxzLnB5KTtcclxuICAgICAgY3R4LmxpbmVUbyhzZWxlY3RlZEVkZ2VQaXhlbHMucHggKyBUSUxFX0hBTEYgKyA1LCBzZWxlY3RlZEVkZ2VQaXhlbHMucHkgKyA1KTtcclxuICAgIH0gZWxzZSBpZiAodGhpcy5zZWxlY3RlZEVkZ2UgPCAyMSkge1xyXG4gICAgICBjdHgubW92ZVRvKHNlbGVjdGVkRWRnZVBpeGVscy5weCArIFRJTEVfRlVMTCAtIDUsIHNlbGVjdGVkRWRnZVBpeGVscy5weSArIFRJTEVfSEFMRiAtIDUpO1xyXG4gICAgICBjdHgubGluZVRvKHNlbGVjdGVkRWRnZVBpeGVscy5weCArIFRJTEVfRlVMTCwgc2VsZWN0ZWRFZGdlUGl4ZWxzLnB5ICsgVElMRV9IQUxGKTtcclxuICAgICAgY3R4LmxpbmVUbyhzZWxlY3RlZEVkZ2VQaXhlbHMucHggKyBUSUxFX0ZVTEwgLSA1LCBzZWxlY3RlZEVkZ2VQaXhlbHMucHkgKyBUSUxFX0hBTEYgKyA1KTtcclxuICAgIH1cclxuICAgIGN0eC5zdHJva2UoKTtcclxuXHJcbiAgICAvLyBEcmF3IGxldmVsIGVkZ2UgaGludHNcclxuICAgIGlmIChlZGdlTGV2ZWxEYXRhKSB7XHJcbiAgICAgIGN0eC5nbG9iYWxBbHBoYSA9IDAuMTtcclxuICAgICAgZm9yIChjb25zdCBlZGdlRGF0YSBvZiBlZGdlTGV2ZWxEYXRhKSB7XHJcbiAgICAgICAgc2VsZWN0ZWRFZGdlUGl4ZWxzID0gdGlsZVRvUGl4ZWxzKGFkZFRpbGVzKGVkZ2VOdW1iZXJUb0xhc2VyKGVkZ2VEYXRhLmVkZ2UpLnRpbGUsIHsgeDogMSwgeTogMSB9KSk7XHJcbiAgICAgICAgY3R4LmZpbGxTdHlsZSA9IGVkZ2VEYXRhLnNvbHZlZCA/IFwiIzAwRkYwMFwiIDogXCIjRkYwMDAwXCI7XHJcbiAgICAgICAgY3R4LmZpbGxSZWN0KHNlbGVjdGVkRWRnZVBpeGVscy5weCwgc2VsZWN0ZWRFZGdlUGl4ZWxzLnB5LCBUSUxFX0ZVTEwsIFRJTEVfRlVMTCk7XHJcbiAgICAgIH1cclxuICAgICAgY3R4Lmdsb2JhbEFscGhhID0gMS4wO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIERyYXcgZWRnZSBudW1iZXJzXHJcbiAgICBmb3IgKGxldCBlID0gMTsgZSA8PSAyMDsgZSsrKSB7XHJcbiAgICAgIHNlbGVjdGVkRWRnZVBpeGVscyA9IHRpbGVUb1BpeGVscyhhZGRUaWxlcyhlZGdlTnVtYmVyVG9MYXNlcihlKS50aWxlLCB7IHg6IDEsIHk6IDEgfSkpO1xyXG4gICAgICBjdHguZmlsbFN0eWxlID0gXCIjMDAwMDAwXCI7XHJcbiAgICAgIGN0eC5mb250ID0gXCIyNHB4IHNhbnMtc2VyaWZcIjtcclxuICAgICAgY3R4LnRleHRCYXNlbGluZSA9IFwibWlkZGxlXCI7XHJcbiAgICAgIGN0eC5maWxsVGV4dChlLnRvU3RyaW5nKCksIHNlbGVjdGVkRWRnZVBpeGVscy5weCArIFRJTEVfSEFMRiAtIGN0eC5tZWFzdXJlVGV4dChlLnRvU3RyaW5nKCkpLndpZHRoIC8gMixcclxuICAgICAgICBzZWxlY3RlZEVkZ2VQaXhlbHMucHkgKyBUSUxFX0hBTEYpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHVibGljIGNsZWFyKCkge1xyXG4gICAgdGhpcy5sYXNlcmdyaWQgPSBtYWtlRGVmYXVsdEdyaWQoKTtcclxuICAgIHRoaXMuc2VsZWN0ZWRFZGdlID0gMTtcclxuICAgIHRoaXMuZHJhd1BhdGggPSBbXTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBwcm9jZXNzTW91c2VDbGljayh4OiBudW1iZXIsIHk6IG51bWJlciwgYnV0dG9uOiBudW1iZXIpIHtcclxuICAgIGNvbnN0IHJlbGF0aXZlVGlsZSA9IHN1cGVyLnByb2Nlc3NNb3VzZUNsaWNrKHgsIHksIGJ1dHRvbik7XHJcbiAgICBjb25zb2xlLmxvZyhidXR0b24pO1xyXG4gICAgaWYgKHJlbGF0aXZlVGlsZSA9PT0gbnVsbCkge1xyXG4gICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICBpZiAodGlsZVdpdGhpbkFyZWFJbmNsdXNpdmUocmVsYXRpdmVUaWxlLCB7IHg6IDEsIHk6IDEgfSwgeyB4OiA1LCB5OiA1IH0pKSB7XHJcbiAgICAgIC8vIHRpbGUgaW4gZ3JpZFxyXG4gICAgICBjb25zdCBsb2MgPSBzdWJUaWxlcyhyZWxhdGl2ZVRpbGUsIHsgeDogMSwgeTogMSB9KTtcclxuICAgICAgY29uc3QgcGllY2UgPSBnZXRQaWVjZUZyb21HcmlkKHRoaXMubGFzZXJncmlkLCBsb2MpO1xyXG4gICAgICBpZiAocGllY2UpIHtcclxuICAgICAgICBjb25zdCByZW1vdmVkUGllY2UgPSByZW1vdmVQaWVjZUZyb21HcmlkKHRoaXMubGFzZXJncmlkLCBwaWVjZSk7XHJcbiAgICAgICAgaWYgKGJ1dHRvbiA9PT0gMCkgeyAvLyBsZWZ0IG1vdXNlIGJ1dHRvblxyXG4gICAgICAgICAgdG9vbGJhci5zZWxlY3RlZFBpZWNlID0gcmVtb3ZlZFBpZWNlLmluZGV4O1xyXG4gICAgICAgIH1cclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBzZXRQaWVjZUluR3JpZCh0aGlzLmxhc2VyZ3JpZCwgYXZhaWxhYmxlUGllY2VzW3Rvb2xiYXIuc2VsZWN0ZWRQaWVjZV0sIGxvYyk7XHJcbiAgICAgIH1cclxuICAgICAgcHJpbnRQYXRocygpO1xyXG5cclxuICAgICAgdGhpcy5jYWxjdWxhdGVEcmF3UGF0aFdyYXBwZXIoKTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBuZXdFZGdlID0gdGlsZVRvRWRnZU51bWJlcihhZGRUaWxlcyhyZWxhdGl2ZVRpbGUsIHsgeDogLTEsIHk6IC0xIH0pKTtcclxuICAgIGlmIChuZXdFZGdlICE9PSAwKSB7XHJcbiAgICAgIHRoaXMuc2VsZWN0ZWRFZGdlID0gbmV3RWRnZTtcclxuICAgIH1cclxuICAgIHRoaXMuY2FsY3VsYXRlRHJhd1BhdGhXcmFwcGVyKCk7XHJcblxyXG4gICAgcmV0dXJuIHJlbGF0aXZlVGlsZTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBjYWxjdWxhdGVEcmF3UGF0aFdyYXBwZXIoKSB7XHJcbiAgICB0aGlzLmRyYXdQYXRoID0gW107XHJcbiAgICB0aGlzLmNhbGN1bGF0ZURyYXdQYXRoKGVkZ2VOdW1iZXJUb0xhc2VyKHRoaXMuc2VsZWN0ZWRFZGdlKSk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGNhbGN1bGF0ZURyYXdQYXRoKGxhc2VyOiBMYXNlclNlZ21lbnQpIHtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMTAwOyBpKyspIHtcclxuICAgICAgbGFzZXIudGlsZSA9IG5leHRUaWxlKGxhc2VyLnRpbGUsIGxhc2VyLmRpcik7XHJcbiAgICAgIGlmICghdGlsZVdpdGhpbkFyZWFJbmNsdXNpdmUobGFzZXIudGlsZSwgeyB4OiAwLCB5OiAwIH0sIHsgeDogNCwgeTogNCB9KSkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG4gICAgICBjb25zdCBwaWVjZSA9IGdldFBpZWNlRnJvbUdyaWQodGhpcy5sYXNlcmdyaWQsIGxhc2VyLnRpbGUpO1xyXG4gICAgICB0aGlzLmRyYXdQYXRoLnB1c2goZ2V0T3Bwb3NpdGVMYXNlclNlZ21lbnQobGFzZXIpKTtcclxuICAgICAgaWYgKHBpZWNlKSB7XHJcbiAgICAgICAgYXBwbHlQaWVjZVRvTGFzZXIobGFzZXIsIHBpZWNlLnBpZWNlSUQpO1xyXG4gICAgICAgIHN3aXRjaCAobGFzZXIuZGlyKSB7XHJcbiAgICAgICAgICBjYXNlIERpcmVjdGlvbi5TUExJVF9OT1JUSF9TT1VUSDpcclxuICAgICAgICAgICAgbGFzZXIuZGlyID0gRGlyZWN0aW9uLk5PUlRIO1xyXG4gICAgICAgICAgICB0aGlzLmRyYXdQYXRoLnB1c2goZ2V0T3Bwb3NpdGVMYXNlclNlZ21lbnQobGFzZXIpKTtcclxuICAgICAgICAgICAgdGhpcy5jYWxjdWxhdGVEcmF3UGF0aChnZXRPcHBvc2l0ZUxhc2VyU2VnbWVudChsYXNlcikpO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgIGNhc2UgRGlyZWN0aW9uLlNQTElUX0VBU1RfV0VTVDpcclxuICAgICAgICAgICAgbGFzZXIuZGlyID0gRGlyZWN0aW9uLkVBU1Q7XHJcbiAgICAgICAgICAgIHRoaXMuZHJhd1BhdGgucHVzaChnZXRPcHBvc2l0ZUxhc2VyU2VnbWVudChsYXNlcikpO1xyXG4gICAgICAgICAgICB0aGlzLmNhbGN1bGF0ZURyYXdQYXRoKGdldE9wcG9zaXRlTGFzZXJTZWdtZW50KGxhc2VyKSk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgY2FzZSBEaXJlY3Rpb24uTk9ORTpcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgfSAvLyBpZiBwaWVjZSBpcyBub3QgbnVsbFxyXG4gICAgICB0aGlzLmRyYXdQYXRoLnB1c2goY29weUxhc2VyU2VnbWVudChsYXNlcikpO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgQ29sb3IgZnJvbSBcIi4vQ29sb3JcIjtcclxuaW1wb3J0IERpcmVjdGlvbiwgeyBnZXRPcHBvc2l0ZURpcmVjdGlvbiB9IGZyb20gXCIuL0RpcmVjdGlvblwiO1xyXG5pbXBvcnQgVGlsZSwgeyBjb3B5VGlsZSB9IGZyb20gXCIuL1RpbGVcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGludGVyZmFjZSBMYXNlclNlZ21lbnQge1xyXG4gIHRpbGU6IFRpbGU7XHJcbiAgZGlyOiBEaXJlY3Rpb247XHJcbiAgY29sb3I6IENvbG9yO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0T3Bwb3NpdGVMYXNlclNlZ21lbnQobGFzZXI6IExhc2VyU2VnbWVudCk6IExhc2VyU2VnbWVudCB7XHJcbiAgcmV0dXJuIHsgdGlsZTogY29weVRpbGUobGFzZXIudGlsZSksIGRpcjogZ2V0T3Bwb3NpdGVEaXJlY3Rpb24obGFzZXIuZGlyKSwgY29sb3I6IGxhc2VyLmNvbG9yIH07XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjb3B5TGFzZXJTZWdtZW50KGxhc2VyOiBMYXNlclNlZ21lbnQpOiBMYXNlclNlZ21lbnQge1xyXG4gIHJldHVybiB7IHRpbGU6IGNvcHlUaWxlKGxhc2VyLnRpbGUpLCBkaXI6IGxhc2VyLmRpciwgY29sb3I6IGxhc2VyLmNvbG9yIH07XHJcbn1cclxuIiwiaW1wb3J0IHsgR3JpZFBpZWNlIH0gZnJvbSBcIi4uLy4uL0xhc2VyR3JpZFwiO1xyXG5pbXBvcnQgUGllY2VJRCBmcm9tIFwiLi4vLi4vUGllY2VJRFwiO1xyXG5pbXBvcnQgVGlsZSBmcm9tIFwiLi4vLi4vVGlsZVwiO1xyXG5pbXBvcnQgeyB0aWxlVG9QaXhlbHMgfSBmcm9tIFwiLi4vRnJvbnRlbmRUaWxlXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQaWVjZUNvbXBvbmVudCB7XHJcbiAgcHVibGljIGlzUGxhY2VkOiBib29sZWFuO1xyXG4gIHByaXZhdGUgaW1nOiBIVE1MSW1hZ2VFbGVtZW50O1xyXG5cclxuICBjb25zdHJ1Y3RvcihzcmM6IHN0cmluZywgZHJhdzogKCkgPT4gdm9pZCkge1xyXG4gICAgdGhpcy5pc1BsYWNlZCA9IGZhbHNlO1xyXG4gICAgdGhpcy5pbWcgPSBuZXcgSW1hZ2UoKTtcclxuICAgIHRoaXMuaW1nLm9ubG9hZCA9ICgpID0+IHsgZHJhdygpOyB9O1xyXG4gICAgdGhpcy5pbWcuc3JjID0gc3JjO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGRyYXdBdCh0aWxlOiBUaWxlLCBjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCkge1xyXG4gICAgY29uc3QgcG9zID0gdGlsZVRvUGl4ZWxzKHRpbGUpO1xyXG4gICAgY3R4LmRyYXdJbWFnZSh0aGlzLmltZywgcG9zLnB4LCBwb3MucHkpO1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgVGlsZSwgeyBhZGRUaWxlcywgdGlsZU5vdE5lZ2F0aXZlIH0gZnJvbSBcIi4uLy4uL1RpbGVcIjtcclxuaW1wb3J0IHsgYXZhaWxhYmxlUGllY2VzLCBwaWVjZUNvbXBvbmVudHMgfSBmcm9tIFwiLi4vRnJvbnRlbmRMYXNlcmdhbWVcIjtcclxuaW1wb3J0IHsgVElMRV9GVUxMLCB0aWxlVG9QaXhlbHMgfSBmcm9tIFwiLi4vRnJvbnRlbmRUaWxlXCI7XHJcbmltcG9ydCBDYW52YXNDb21wb25lbnQgZnJvbSBcIi4vQ2FudmFzQ29tcG9uZW50XCI7XHJcbmltcG9ydCBQaWVjZUNvbXBvbmVudCBmcm9tIFwiLi9QaWVjZUNvbXBvbmVudFwiO1xyXG5cclxuLyoqXHJcbiAqIFRoZSB0b29sYmFyIHRvIHNlbGVjdCB0aGUgcGllY2VzIHRvIHB1dCBpbiB0aGUgZ3JpZFxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVG9vbGJhckNvbXBvbmVudCBleHRlbmRzIENhbnZhc0NvbXBvbmVudCB7XHJcbiAgcHVibGljIHNlbGVjdGVkUGllY2U6IG51bWJlcjtcclxuXHJcbiAgLyoqXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3JjXHJcbiAgICogQHBhcmFtIHtUaWxlfSB0aWxlXHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IHdpZHRoSW5UaWxlc1xyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBoZWlnaHRJblRpbGVzXHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IFtvZmZzZXRYID0gMF0gcGl4ZWwgb2Zmc2V0IGZvciB0aGUgaW1hZ2VcclxuICAgKiBAcGFyYW0ge251bWJlcn0gW29mZnNldFkgPSAwXSBwaXhlbCBvZmZzZXQgZm9yIHRoZSBpbWFnZVxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgc3JjOiBzdHJpbmcsIHRpbGU6IFRpbGUsIHdpZHRoSW5UaWxlczogbnVtYmVyLCBoZWlnaHRJblRpbGVzOiBudW1iZXIsXHJcbiAgICBkcmF3OiAoKSA9PiB2b2lkLCBvZmZzZXRYOiBudW1iZXIgPSAwLCBvZmZzZXRZOiBudW1iZXIgPSAwKSB7XHJcbiAgICBzdXBlcihzcmMsIHRpbGUsIHdpZHRoSW5UaWxlcywgaGVpZ2h0SW5UaWxlcywgZHJhdywgb2Zmc2V0WCwgb2Zmc2V0WSk7XHJcbiAgICB0aGlzLnNlbGVjdGVkUGllY2UgPSAwO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogZHJhd3MgdGhlIGltYWdlLCB0aGUgcGllY2VzIGFuZCB0aGUgaGlnaGxpZ2h0XHJcbiAgICovXHJcbiAgcHVibGljIGRyYXcoY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQpIHtcclxuICAgIHN1cGVyLmRyYXcoY3R4KTtcclxuXHJcbiAgICAvLyBkcmF3IHBpZWNlcyBpbiBlYWNoIGJveFxyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhdmFpbGFibGVQaWVjZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgcGllY2VDb21wb25lbnRzW2F2YWlsYWJsZVBpZWNlc1tpXS5waWVjZUlEXS5kcmF3QXQoYWRkVGlsZXModGhpcy50aWxlLCB7IHg6IGksIHk6IDAgfSksIGN0eCk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gZHJhdyB0aGUgZ3JlZW4gYW5kIHJlZCBoaWdobGlnaHRzXHJcbiAgICBjdHguZmlsbFN0eWxlID0gXCJncmVlblwiO1xyXG4gICAgY3R4Lmdsb2JhbEFscGhhID0gMC4yO1xyXG4gICAgbGV0IGxvYyA9IHRpbGVUb1BpeGVscyhhZGRUaWxlcyh0aGlzLnRpbGUsIHsgeDogdGhpcy5zZWxlY3RlZFBpZWNlLCB5OiAwIH0pKTtcclxuICAgIGN0eC5maWxsUmVjdChsb2MucHgsIGxvYy5weSwgVElMRV9GVUxMLCBUSUxFX0ZVTEwpO1xyXG5cclxuICAgIGN0eC5maWxsU3R5bGUgPSBcInJlZFwiO1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhdmFpbGFibGVQaWVjZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgY29uc3QgcGllY2UgPSBhdmFpbGFibGVQaWVjZXNbaV07XHJcbiAgICAgIGlmIChpICE9PSB0aGlzLnNlbGVjdGVkUGllY2UgJiYgdGlsZU5vdE5lZ2F0aXZlKHBpZWNlLnRpbGUpKSB7XHJcbiAgICAgICAgbG9jID0gdGlsZVRvUGl4ZWxzKGFkZFRpbGVzKHRoaXMudGlsZSwgeyB4OiBpLCB5OiAwIH0pKTtcclxuICAgICAgICBjdHguZmlsbFJlY3QobG9jLnB4LCBsb2MucHksIFRJTEVfRlVMTCwgVElMRV9GVUxMKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgY3R4Lmdsb2JhbEFscGhhID0gMS4wO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogU2VsZWN0cyBhIHBpZWNlIGlmIGNsaWNrZWQgb24uXHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IHggYSBwaXhlbCB4IHZhbHVlXHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IHkgYSBwaXhlbCB5IHZhbHVlXHJcbiAgICovXHJcbiAgcHVibGljIHByb2Nlc3NNb3VzZUNsaWNrKHg6IG51bWJlciwgeTogbnVtYmVyLCBidXR0b246IG51bWJlcikge1xyXG4gICAgY29uc3QgcmVsYXRpdmVUaWxlID0gc3VwZXIucHJvY2Vzc01vdXNlQ2xpY2soeCwgeSwgYnV0dG9uKTtcclxuICAgIGlmIChyZWxhdGl2ZVRpbGUgIT09IG51bGwpIHtcclxuICAgICAgdGhpcy5zZWxlY3RlZFBpZWNlID0gcmVsYXRpdmVUaWxlLng7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVsYXRpdmVUaWxlO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogRmV0Y2hlcyB0aGUgc2VsZWN0ZWQgcGllY2Ugb2JqZWN0LlxyXG4gICAqIEByZXR1cm5zIHtQaWVjZUNvbXBvbmVudH1cclxuICAgKi9cclxuICBwdWJsaWMgZ2V0U2VsZWN0ZWRQaWVjZUNvbXBvbmVudCgpOiBQaWVjZUNvbXBvbmVudCB7XHJcbiAgICByZXR1cm4gcGllY2VDb21wb25lbnRzW3RoaXMuc2VsZWN0ZWRQaWVjZV07XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCBQYXRoIGZyb20gXCIuLi9QYXRoXCI7XHJcbmltcG9ydCB7IGVuZGluZ1RvU3RyaW5nIH0gZnJvbSBcIi4vRnJvbnRlbmRFbmRpbmdcIjtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBwYXRoVG9TdHJpbmcocGF0aDogUGF0aCkge1xyXG4gIHJldHVybiBzdGFydFRvU3RyaW5nKHBhdGgpICsgZW5kaW5nTGlzdFRvU3RyaW5nKHBhdGgpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gc3RhcnRUb1N0cmluZyhwYXRoOiBQYXRoKSB7XHJcbiAgbGV0IHN0ciA9IGAke3BhdGguc3RhcnR9YDtcclxuICBpZiAocGF0aC5zdGFydCA8IDEwKSB7XHJcbiAgICBzdHIgKz0gXCIgIC0+IFwiO1xyXG4gIH0gZWxzZSB7XHJcbiAgICBzdHIgKz0gXCIgLT4gXCI7XHJcbiAgfVxyXG4gIHJldHVybiBzdHI7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBlbmRpbmdMaXN0VG9TdHJpbmcocGF0aDogUGF0aCkge1xyXG4gIGlmIChwYXRoLmVuZGluZ3MubGVuZ3RoID4gMSkge1xyXG4gICAgbGV0IHN0ciA9IGB7JHtlbmRpbmdUb1N0cmluZyhwYXRoLmVuZGluZ3NbMF0pfSwgYDtcclxuICAgIGZvciAobGV0IGN1ckVuZGluZyA9IDE7IGN1ckVuZGluZyA8IHBhdGguZW5kaW5ncy5sZW5ndGggLSAxOyBjdXJFbmRpbmcrKykge1xyXG4gICAgICBzdHIgKz0gYCR7ZW5kaW5nVG9TdHJpbmcocGF0aC5lbmRpbmdzW2N1ckVuZGluZ10pfSwgYDtcclxuICAgIH1cclxuICAgIHN0ciArPSBgJHtlbmRpbmdUb1N0cmluZyhwYXRoLmVuZGluZ3NbcGF0aC5lbmRpbmdzLmxlbmd0aCAtIDFdKX19YDtcclxuICAgIHJldHVybiBzdHI7XHJcbiAgfVxyXG4gIHJldHVybiBlbmRpbmdUb1N0cmluZyhwYXRoLmVuZGluZ3NbMF0pO1xyXG59XHJcbiIsImltcG9ydCB7IGNvbG9yVG9OYW1lIH0gZnJvbSBcIi4uL0NvbG9yXCI7XHJcbmltcG9ydCBFbmRpbmcsIHsgRW5kIH0gZnJvbSBcIi4uL0VuZGluZ1wiO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGVuZGluZ1RvU3RyaW5nKGVuZGluZzogRW5kaW5nKSB7XHJcbiAgY29uc3QgY29sb3JTdHJpbmcgPSBjb2xvclRvTmFtZShlbmRpbmcuY29sb3IpO1xyXG4gIHJldHVybiBlbmRpbmcuZW5kID09PSBFbmQuQmxvY2tlZCA/IGBibG9ja2VkICR7Y29sb3JTdHJpbmd9YCA6XHJcbiAgICBlbmRpbmcuZW5kID09PSBFbmQuTG9vcCA/IGBsb29wICR7Y29sb3JTdHJpbmd9YCA6XHJcbiAgICAgIGAke2VuZGluZy5lbmR9ICR7Y29sb3JTdHJpbmd9YDtcclxufVxyXG4iLCJleHBvcnQgY29uc3QgaW1wb3J0UHJlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJpbXBvcnRlZC1wcmVcIikgYXMgSFRNTFByZUVsZW1lbnQ7XHJcbmV4cG9ydCBjb25zdCBwYXRoc1ByZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicGF0aHMtcHJlXCIpIGFzIEhUTUxQcmVFbGVtZW50O1xyXG5leHBvcnQgY29uc3QgY2FudmFzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJsYXNlci1nYW1lLWNhbnZhc1wiKSBhcyBIVE1MQ2FudmFzRWxlbWVudDtcclxuZXhwb3J0IGNvbnN0IHZpY3RvcnlQID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ2aWN0b3J5LXBcIikgYXMgSFRNTFBhcmFncmFwaEVsZW1lbnQ7XHJcblxyXG5leHBvcnQgY29uc3Qgc2VlZExldmVsQnV0dG9uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzZWVkLWxldmVsXCIpIGFzIEhUTUxJbnB1dEVsZW1lbnQ7XHJcbmV4cG9ydCBjb25zdCBkYWlseUxldmVsQnV0dG9uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJkYWlseS1sZXZlbFwiKSBhcyBIVE1MSW5wdXRFbGVtZW50O1xyXG5leHBvcnQgY29uc3QgZWRnZXNJbnB1dCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZWRnZXNcIikgYXMgSFRNTElucHV0RWxlbWVudDtcclxuZXhwb3J0IGNvbnN0IHNlZWRJbnB1dCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic2VlZFwiKSBhcyBIVE1MSW5wdXRFbGVtZW50O1xyXG5cclxuZXhwb3J0IGNvbnN0IGN0eCA9IGNhbnZhcy5nZXRDb250ZXh0KFwiMmRcIikgYXMgQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEO1xyXG4iLCJpbXBvcnQgUGF0aCwgeyBlcXVhbFBhdGhzIH0gZnJvbSBcIi4vUGF0aFwiO1xyXG5pbXBvcnQgKiBhcyBzZWVkcmFuZG9tIGZyb20gXCJzZWVkcmFuZG9tXCI7XHJcbmltcG9ydCB7IEdyaWRQaWVjZSwgZ2V0UGllY2VGcm9tR3JpZCwgc2V0UGllY2VJbkdyaWQsIG1ha2VEZWZhdWx0R3JpZCB9IGZyb20gXCIuL0xhc2VyR3JpZFwiO1xyXG5pbXBvcnQgVGlsZSBmcm9tIFwiLi9UaWxlXCI7XHJcblxyXG5jb25zdCBkZWZhdWx0R3JpZCA9IG1ha2VEZWZhdWx0R3JpZCgpO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdlbmVyYXRlTGV2ZWwoc2VlZCA9IERhdGUubm93KCkudG9TdHJpbmcoKSwgbnVtUGF0aHMgPSA1KSB7XHJcbiAgY29uc3Qgcm5nID0gc2VlZHJhbmRvbShzZWVkKTtcclxuXHJcbiAgY29uc3QgaW50ZXJlc3RpbmdQYXRoczogUGF0aFtdID0gW107XHJcbiAgY29uc3QgYm9yaW5nUGF0aHM6IFBhdGhbXSA9IFtdO1xyXG5cclxuICBjb25zdCBhdmFpbGFibGVQaWVjZXM6IEdyaWRQaWVjZVtdID0gW107XHJcblxyXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgODsgaSsrKSB7XHJcbiAgICBhdmFpbGFibGVQaWVjZXNbaV0gPSB7IHBpZWNlSUQ6IE1hdGguZmxvb3Iocm5nKCkgKiA4KSwgdGlsZTogeyB4OiAtMSwgeTogLTEgfSwgaW5kZXg6IGkgfTtcclxuICB9XHJcblxyXG4gIGNvbnN0IHJhbmRvbUdyaWQgPSBtYWtlRGVmYXVsdEdyaWQoKTtcclxuXHJcbiAgYXZhaWxhYmxlUGllY2VzLmZvckVhY2goKHBpZWNlOiBHcmlkUGllY2UpID0+IHtcclxuICAgIHdoaWxlICh0cnVlKSB7XHJcbiAgICAgIGNvbnN0IHJhbmRUaWxlOiBUaWxlID0geyB4OiBNYXRoLmZsb29yKHJuZygpICogNSksIHk6IE1hdGguZmxvb3Iocm5nKCkgKiA1KSB9O1xyXG4gICAgICBpZiAoIWdldFBpZWNlRnJvbUdyaWQocmFuZG9tR3JpZCwgcmFuZFRpbGUpKSB7XHJcbiAgICAgICAgc2V0UGllY2VJbkdyaWQocmFuZG9tR3JpZCwgcGllY2UsIHJhbmRUaWxlKTtcclxuICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH0pO1xyXG5cclxuICBjb25zdCBncmlkUGF0aHMgPSByYW5kb21HcmlkLnBhdGhzO1xyXG5cclxuICBmb3IgKGxldCBpID0gMDsgaSA8IGdyaWRQYXRocy5sZW5ndGg7IGkrKykge1xyXG4gICAgaWYgKCFlcXVhbFBhdGhzKGdyaWRQYXRoc1tpXSwgZGVmYXVsdEdyaWQucGF0aHNbaV0pKSB7XHJcbiAgICAgIGludGVyZXN0aW5nUGF0aHMucHVzaChncmlkUGF0aHNbaV0pO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgYm9yaW5nUGF0aHMucHVzaChncmlkUGF0aHNbaV0pO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gc2h1ZmZsZSBjbGVhbnNlZEVuZGluZ3NcclxuICBzaHVmZmxlKGludGVyZXN0aW5nUGF0aHMsIHJuZyk7XHJcblxyXG4gIGxldCByYW5kb21QYXRoczogUGF0aFtdID0gaW50ZXJlc3RpbmdQYXRocy5zbGljZSgwLCBudW1QYXRocyk7XHJcblxyXG4gIGlmIChyYW5kb21QYXRocy5sZW5ndGggPCBudW1QYXRocykge1xyXG4gICAgc2h1ZmZsZShib3JpbmdQYXRocywgcm5nKTtcclxuICAgIHJhbmRvbVBhdGhzID0gcmFuZG9tUGF0aHMuY29uY2F0KGJvcmluZ1BhdGhzLnNsaWNlKDAsIG51bVBhdGhzIC0gcmFuZG9tUGF0aHMubGVuZ3RoKSk7XHJcbiAgfVxyXG5cclxuICByYW5kb21QYXRocy5zb3J0KChhLCBiKSA9PiBhLnN0YXJ0IDwgYi5zdGFydCA/IC0xIDogMSk7XHJcblxyXG4gIGZvciAoY29uc3QgcGllY2Ugb2YgYXZhaWxhYmxlUGllY2VzKSB7XHJcbiAgICBwaWVjZS50aWxlID0geyB4OiAtMSwgeTogLTEgfTtcclxuICB9XHJcblxyXG4gIHJldHVybiB7IHBhdGhzOiByYW5kb21QYXRocywgYXZhaWxhYmxlUGllY2VzIH07XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNodWZmbGUocGF0aHM6IFBhdGhbXSwgcm5nOiBhbnkpIHtcclxuICBsZXQgbSA9IHBhdGhzLmxlbmd0aDtcclxuICBsZXQgdDogUGF0aDsgbGV0IGk6IG51bWJlcjtcclxuICB3aGlsZSAobSkge1xyXG4gICAgaSA9IE1hdGguZmxvb3Iocm5nKCkgKiBtLS0pO1xyXG5cclxuICAgIHQgPSBwYXRoc1ttXTtcclxuICAgIHBhdGhzW21dID0gcGF0aHNbaV07XHJcbiAgICBwYXRoc1tpXSA9IHQ7XHJcbiAgfVxyXG59IiwiLy8gQSBwb3J0IG9mIGFuIGFsZ29yaXRobSBieSBKb2hhbm5lcyBCYWFnw7hlIDxiYWFnb2VAYmFhZ29lLmNvbT4sIDIwMTBcbi8vIGh0dHA6Ly9iYWFnb2UuY29tL2VuL1JhbmRvbU11c2luZ3MvamF2YXNjcmlwdC9cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9ucXVpbmxhbi9iZXR0ZXItcmFuZG9tLW51bWJlcnMtZm9yLWphdmFzY3JpcHQtbWlycm9yXG4vLyBPcmlnaW5hbCB3b3JrIGlzIHVuZGVyIE1JVCBsaWNlbnNlIC1cblxuLy8gQ29weXJpZ2h0IChDKSAyMDEwIGJ5IEpvaGFubmVzIEJhYWfDuGUgPGJhYWdvZUBiYWFnb2Uub3JnPlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbi8vIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbi8vIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbi8vIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbi8vIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuLy8gZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vIFxuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbi8vIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy8gXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4vLyBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbi8vIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuLy8gQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuLy8gTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbi8vIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbi8vIFRIRSBTT0ZUV0FSRS5cblxuXG5cbihmdW5jdGlvbihnbG9iYWwsIG1vZHVsZSwgZGVmaW5lKSB7XG5cbmZ1bmN0aW9uIEFsZWEoc2VlZCkge1xuICB2YXIgbWUgPSB0aGlzLCBtYXNoID0gTWFzaCgpO1xuXG4gIG1lLm5leHQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgdCA9IDIwOTE2MzkgKiBtZS5zMCArIG1lLmMgKiAyLjMyODMwNjQzNjUzODY5NjNlLTEwOyAvLyAyXi0zMlxuICAgIG1lLnMwID0gbWUuczE7XG4gICAgbWUuczEgPSBtZS5zMjtcbiAgICByZXR1cm4gbWUuczIgPSB0IC0gKG1lLmMgPSB0IHwgMCk7XG4gIH07XG5cbiAgLy8gQXBwbHkgdGhlIHNlZWRpbmcgYWxnb3JpdGhtIGZyb20gQmFhZ29lLlxuICBtZS5jID0gMTtcbiAgbWUuczAgPSBtYXNoKCcgJyk7XG4gIG1lLnMxID0gbWFzaCgnICcpO1xuICBtZS5zMiA9IG1hc2goJyAnKTtcbiAgbWUuczAgLT0gbWFzaChzZWVkKTtcbiAgaWYgKG1lLnMwIDwgMCkgeyBtZS5zMCArPSAxOyB9XG4gIG1lLnMxIC09IG1hc2goc2VlZCk7XG4gIGlmIChtZS5zMSA8IDApIHsgbWUuczEgKz0gMTsgfVxuICBtZS5zMiAtPSBtYXNoKHNlZWQpO1xuICBpZiAobWUuczIgPCAwKSB7IG1lLnMyICs9IDE7IH1cbiAgbWFzaCA9IG51bGw7XG59XG5cbmZ1bmN0aW9uIGNvcHkoZiwgdCkge1xuICB0LmMgPSBmLmM7XG4gIHQuczAgPSBmLnMwO1xuICB0LnMxID0gZi5zMTtcbiAgdC5zMiA9IGYuczI7XG4gIHJldHVybiB0O1xufVxuXG5mdW5jdGlvbiBpbXBsKHNlZWQsIG9wdHMpIHtcbiAgdmFyIHhnID0gbmV3IEFsZWEoc2VlZCksXG4gICAgICBzdGF0ZSA9IG9wdHMgJiYgb3B0cy5zdGF0ZSxcbiAgICAgIHBybmcgPSB4Zy5uZXh0O1xuICBwcm5nLmludDMyID0gZnVuY3Rpb24oKSB7IHJldHVybiAoeGcubmV4dCgpICogMHgxMDAwMDAwMDApIHwgMDsgfVxuICBwcm5nLmRvdWJsZSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBwcm5nKCkgKyAocHJuZygpICogMHgyMDAwMDAgfCAwKSAqIDEuMTEwMjIzMDI0NjI1MTU2NWUtMTY7IC8vIDJeLTUzXG4gIH07XG4gIHBybmcucXVpY2sgPSBwcm5nO1xuICBpZiAoc3RhdGUpIHtcbiAgICBpZiAodHlwZW9mKHN0YXRlKSA9PSAnb2JqZWN0JykgY29weShzdGF0ZSwgeGcpO1xuICAgIHBybmcuc3RhdGUgPSBmdW5jdGlvbigpIHsgcmV0dXJuIGNvcHkoeGcsIHt9KTsgfVxuICB9XG4gIHJldHVybiBwcm5nO1xufVxuXG5mdW5jdGlvbiBNYXNoKCkge1xuICB2YXIgbiA9IDB4ZWZjODI0OWQ7XG5cbiAgdmFyIG1hc2ggPSBmdW5jdGlvbihkYXRhKSB7XG4gICAgZGF0YSA9IGRhdGEudG9TdHJpbmcoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyBpKyspIHtcbiAgICAgIG4gKz0gZGF0YS5jaGFyQ29kZUF0KGkpO1xuICAgICAgdmFyIGggPSAwLjAyNTE5NjAzMjgyNDE2OTM4ICogbjtcbiAgICAgIG4gPSBoID4+PiAwO1xuICAgICAgaCAtPSBuO1xuICAgICAgaCAqPSBuO1xuICAgICAgbiA9IGggPj4+IDA7XG4gICAgICBoIC09IG47XG4gICAgICBuICs9IGggKiAweDEwMDAwMDAwMDsgLy8gMl4zMlxuICAgIH1cbiAgICByZXR1cm4gKG4gPj4+IDApICogMi4zMjgzMDY0MzY1Mzg2OTYzZS0xMDsgLy8gMl4tMzJcbiAgfTtcblxuICByZXR1cm4gbWFzaDtcbn1cblxuXG5pZiAobW9kdWxlICYmIG1vZHVsZS5leHBvcnRzKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gaW1wbDtcbn0gZWxzZSBpZiAoZGVmaW5lICYmIGRlZmluZS5hbWQpIHtcbiAgZGVmaW5lKGZ1bmN0aW9uKCkgeyByZXR1cm4gaW1wbDsgfSk7XG59IGVsc2Uge1xuICB0aGlzLmFsZWEgPSBpbXBsO1xufVxuXG59KShcbiAgdGhpcyxcbiAgKHR5cGVvZiBtb2R1bGUpID09ICdvYmplY3QnICYmIG1vZHVsZSwgICAgLy8gcHJlc2VudCBpbiBub2RlLmpzXG4gICh0eXBlb2YgZGVmaW5lKSA9PSAnZnVuY3Rpb24nICYmIGRlZmluZSAgIC8vIHByZXNlbnQgd2l0aCBhbiBBTUQgbG9hZGVyXG4pO1xuXG5cbiIsIi8vIEEgSmF2YXNjcmlwdCBpbXBsZW1lbnRhaW9uIG9mIHRoZSBcInhvcjEyOFwiIHBybmcgYWxnb3JpdGhtIGJ5XG4vLyBHZW9yZ2UgTWFyc2FnbGlhLiAgU2VlIGh0dHA6Ly93d3cuanN0YXRzb2Z0Lm9yZy92MDgvaTE0L3BhcGVyXG5cbihmdW5jdGlvbihnbG9iYWwsIG1vZHVsZSwgZGVmaW5lKSB7XG5cbmZ1bmN0aW9uIFhvckdlbihzZWVkKSB7XG4gIHZhciBtZSA9IHRoaXMsIHN0cnNlZWQgPSAnJztcblxuICBtZS54ID0gMDtcbiAgbWUueSA9IDA7XG4gIG1lLnogPSAwO1xuICBtZS53ID0gMDtcblxuICAvLyBTZXQgdXAgZ2VuZXJhdG9yIGZ1bmN0aW9uLlxuICBtZS5uZXh0ID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHQgPSBtZS54IF4gKG1lLnggPDwgMTEpO1xuICAgIG1lLnggPSBtZS55O1xuICAgIG1lLnkgPSBtZS56O1xuICAgIG1lLnogPSBtZS53O1xuICAgIHJldHVybiBtZS53IF49IChtZS53ID4+PiAxOSkgXiB0IF4gKHQgPj4+IDgpO1xuICB9O1xuXG4gIGlmIChzZWVkID09PSAoc2VlZCB8IDApKSB7XG4gICAgLy8gSW50ZWdlciBzZWVkLlxuICAgIG1lLnggPSBzZWVkO1xuICB9IGVsc2Uge1xuICAgIC8vIFN0cmluZyBzZWVkLlxuICAgIHN0cnNlZWQgKz0gc2VlZDtcbiAgfVxuXG4gIC8vIE1peCBpbiBzdHJpbmcgc2VlZCwgdGhlbiBkaXNjYXJkIGFuIGluaXRpYWwgYmF0Y2ggb2YgNjQgdmFsdWVzLlxuICBmb3IgKHZhciBrID0gMDsgayA8IHN0cnNlZWQubGVuZ3RoICsgNjQ7IGsrKykge1xuICAgIG1lLnggXj0gc3Ryc2VlZC5jaGFyQ29kZUF0KGspIHwgMDtcbiAgICBtZS5uZXh0KCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY29weShmLCB0KSB7XG4gIHQueCA9IGYueDtcbiAgdC55ID0gZi55O1xuICB0LnogPSBmLno7XG4gIHQudyA9IGYudztcbiAgcmV0dXJuIHQ7XG59XG5cbmZ1bmN0aW9uIGltcGwoc2VlZCwgb3B0cykge1xuICB2YXIgeGcgPSBuZXcgWG9yR2VuKHNlZWQpLFxuICAgICAgc3RhdGUgPSBvcHRzICYmIG9wdHMuc3RhdGUsXG4gICAgICBwcm5nID0gZnVuY3Rpb24oKSB7IHJldHVybiAoeGcubmV4dCgpID4+PiAwKSAvIDB4MTAwMDAwMDAwOyB9O1xuICBwcm5nLmRvdWJsZSA9IGZ1bmN0aW9uKCkge1xuICAgIGRvIHtcbiAgICAgIHZhciB0b3AgPSB4Zy5uZXh0KCkgPj4+IDExLFxuICAgICAgICAgIGJvdCA9ICh4Zy5uZXh0KCkgPj4+IDApIC8gMHgxMDAwMDAwMDAsXG4gICAgICAgICAgcmVzdWx0ID0gKHRvcCArIGJvdCkgLyAoMSA8PCAyMSk7XG4gICAgfSB3aGlsZSAocmVzdWx0ID09PSAwKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuICBwcm5nLmludDMyID0geGcubmV4dDtcbiAgcHJuZy5xdWljayA9IHBybmc7XG4gIGlmIChzdGF0ZSkge1xuICAgIGlmICh0eXBlb2Yoc3RhdGUpID09ICdvYmplY3QnKSBjb3B5KHN0YXRlLCB4Zyk7XG4gICAgcHJuZy5zdGF0ZSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gY29weSh4Zywge30pOyB9XG4gIH1cbiAgcmV0dXJuIHBybmc7XG59XG5cbmlmIChtb2R1bGUgJiYgbW9kdWxlLmV4cG9ydHMpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBpbXBsO1xufSBlbHNlIGlmIChkZWZpbmUgJiYgZGVmaW5lLmFtZCkge1xuICBkZWZpbmUoZnVuY3Rpb24oKSB7IHJldHVybiBpbXBsOyB9KTtcbn0gZWxzZSB7XG4gIHRoaXMueG9yMTI4ID0gaW1wbDtcbn1cblxufSkoXG4gIHRoaXMsXG4gICh0eXBlb2YgbW9kdWxlKSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUsICAgIC8vIHByZXNlbnQgaW4gbm9kZS5qc1xuICAodHlwZW9mIGRlZmluZSkgPT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUgICAvLyBwcmVzZW50IHdpdGggYW4gQU1EIGxvYWRlclxuKTtcblxuXG4iLCIvLyBBIEphdmFzY3JpcHQgaW1wbGVtZW50YWlvbiBvZiB0aGUgXCJ4b3J3b3dcIiBwcm5nIGFsZ29yaXRobSBieVxuLy8gR2VvcmdlIE1hcnNhZ2xpYS4gIFNlZSBodHRwOi8vd3d3LmpzdGF0c29mdC5vcmcvdjA4L2kxNC9wYXBlclxuXG4oZnVuY3Rpb24oZ2xvYmFsLCBtb2R1bGUsIGRlZmluZSkge1xuXG5mdW5jdGlvbiBYb3JHZW4oc2VlZCkge1xuICB2YXIgbWUgPSB0aGlzLCBzdHJzZWVkID0gJyc7XG5cbiAgLy8gU2V0IHVwIGdlbmVyYXRvciBmdW5jdGlvbi5cbiAgbWUubmV4dCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciB0ID0gKG1lLnggXiAobWUueCA+Pj4gMikpO1xuICAgIG1lLnggPSBtZS55OyBtZS55ID0gbWUuejsgbWUueiA9IG1lLnc7IG1lLncgPSBtZS52O1xuICAgIHJldHVybiAobWUuZCA9IChtZS5kICsgMzYyNDM3IHwgMCkpICtcbiAgICAgICAobWUudiA9IChtZS52IF4gKG1lLnYgPDwgNCkpIF4gKHQgXiAodCA8PCAxKSkpIHwgMDtcbiAgfTtcblxuICBtZS54ID0gMDtcbiAgbWUueSA9IDA7XG4gIG1lLnogPSAwO1xuICBtZS53ID0gMDtcbiAgbWUudiA9IDA7XG5cbiAgaWYgKHNlZWQgPT09IChzZWVkIHwgMCkpIHtcbiAgICAvLyBJbnRlZ2VyIHNlZWQuXG4gICAgbWUueCA9IHNlZWQ7XG4gIH0gZWxzZSB7XG4gICAgLy8gU3RyaW5nIHNlZWQuXG4gICAgc3Ryc2VlZCArPSBzZWVkO1xuICB9XG5cbiAgLy8gTWl4IGluIHN0cmluZyBzZWVkLCB0aGVuIGRpc2NhcmQgYW4gaW5pdGlhbCBiYXRjaCBvZiA2NCB2YWx1ZXMuXG4gIGZvciAodmFyIGsgPSAwOyBrIDwgc3Ryc2VlZC5sZW5ndGggKyA2NDsgaysrKSB7XG4gICAgbWUueCBePSBzdHJzZWVkLmNoYXJDb2RlQXQoaykgfCAwO1xuICAgIGlmIChrID09IHN0cnNlZWQubGVuZ3RoKSB7XG4gICAgICBtZS5kID0gbWUueCA8PCAxMCBeIG1lLnggPj4+IDQ7XG4gICAgfVxuICAgIG1lLm5leHQoKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjb3B5KGYsIHQpIHtcbiAgdC54ID0gZi54O1xuICB0LnkgPSBmLnk7XG4gIHQueiA9IGYuejtcbiAgdC53ID0gZi53O1xuICB0LnYgPSBmLnY7XG4gIHQuZCA9IGYuZDtcbiAgcmV0dXJuIHQ7XG59XG5cbmZ1bmN0aW9uIGltcGwoc2VlZCwgb3B0cykge1xuICB2YXIgeGcgPSBuZXcgWG9yR2VuKHNlZWQpLFxuICAgICAgc3RhdGUgPSBvcHRzICYmIG9wdHMuc3RhdGUsXG4gICAgICBwcm5nID0gZnVuY3Rpb24oKSB7IHJldHVybiAoeGcubmV4dCgpID4+PiAwKSAvIDB4MTAwMDAwMDAwOyB9O1xuICBwcm5nLmRvdWJsZSA9IGZ1bmN0aW9uKCkge1xuICAgIGRvIHtcbiAgICAgIHZhciB0b3AgPSB4Zy5uZXh0KCkgPj4+IDExLFxuICAgICAgICAgIGJvdCA9ICh4Zy5uZXh0KCkgPj4+IDApIC8gMHgxMDAwMDAwMDAsXG4gICAgICAgICAgcmVzdWx0ID0gKHRvcCArIGJvdCkgLyAoMSA8PCAyMSk7XG4gICAgfSB3aGlsZSAocmVzdWx0ID09PSAwKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuICBwcm5nLmludDMyID0geGcubmV4dDtcbiAgcHJuZy5xdWljayA9IHBybmc7XG4gIGlmIChzdGF0ZSkge1xuICAgIGlmICh0eXBlb2Yoc3RhdGUpID09ICdvYmplY3QnKSBjb3B5KHN0YXRlLCB4Zyk7XG4gICAgcHJuZy5zdGF0ZSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gY29weSh4Zywge30pOyB9XG4gIH1cbiAgcmV0dXJuIHBybmc7XG59XG5cbmlmIChtb2R1bGUgJiYgbW9kdWxlLmV4cG9ydHMpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBpbXBsO1xufSBlbHNlIGlmIChkZWZpbmUgJiYgZGVmaW5lLmFtZCkge1xuICBkZWZpbmUoZnVuY3Rpb24oKSB7IHJldHVybiBpbXBsOyB9KTtcbn0gZWxzZSB7XG4gIHRoaXMueG9yd293ID0gaW1wbDtcbn1cblxufSkoXG4gIHRoaXMsXG4gICh0eXBlb2YgbW9kdWxlKSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUsICAgIC8vIHByZXNlbnQgaW4gbm9kZS5qc1xuICAodHlwZW9mIGRlZmluZSkgPT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUgICAvLyBwcmVzZW50IHdpdGggYW4gQU1EIGxvYWRlclxuKTtcblxuXG4iLCIvLyBBIEphdmFzY3JpcHQgaW1wbGVtZW50YWlvbiBvZiB0aGUgXCJ4b3JzaGlmdDdcIiBhbGdvcml0aG0gYnlcbi8vIEZyYW7Dp29pcyBQYW5uZXRvbiBhbmQgUGllcnJlIEwnZWN1eWVyOlxuLy8gXCJPbiB0aGUgWG9yZ3NoaWZ0IFJhbmRvbSBOdW1iZXIgR2VuZXJhdG9yc1wiXG4vLyBodHRwOi8vc2FsdWMuZW5nci51Y29ubi5lZHUvcmVmcy9jcnlwdG8vcm5nL3Bhbm5ldG9uMDVvbnRoZXhvcnNoaWZ0LnBkZlxuXG4oZnVuY3Rpb24oZ2xvYmFsLCBtb2R1bGUsIGRlZmluZSkge1xuXG5mdW5jdGlvbiBYb3JHZW4oc2VlZCkge1xuICB2YXIgbWUgPSB0aGlzO1xuXG4gIC8vIFNldCB1cCBnZW5lcmF0b3IgZnVuY3Rpb24uXG4gIG1lLm5leHQgPSBmdW5jdGlvbigpIHtcbiAgICAvLyBVcGRhdGUgeG9yIGdlbmVyYXRvci5cbiAgICB2YXIgWCA9IG1lLngsIGkgPSBtZS5pLCB0LCB2LCB3O1xuICAgIHQgPSBYW2ldOyB0IF49ICh0ID4+PiA3KTsgdiA9IHQgXiAodCA8PCAyNCk7XG4gICAgdCA9IFhbKGkgKyAxKSAmIDddOyB2IF49IHQgXiAodCA+Pj4gMTApO1xuICAgIHQgPSBYWyhpICsgMykgJiA3XTsgdiBePSB0IF4gKHQgPj4+IDMpO1xuICAgIHQgPSBYWyhpICsgNCkgJiA3XTsgdiBePSB0IF4gKHQgPDwgNyk7XG4gICAgdCA9IFhbKGkgKyA3KSAmIDddOyB0ID0gdCBeICh0IDw8IDEzKTsgdiBePSB0IF4gKHQgPDwgOSk7XG4gICAgWFtpXSA9IHY7XG4gICAgbWUuaSA9IChpICsgMSkgJiA3O1xuICAgIHJldHVybiB2O1xuICB9O1xuXG4gIGZ1bmN0aW9uIGluaXQobWUsIHNlZWQpIHtcbiAgICB2YXIgaiwgdywgWCA9IFtdO1xuXG4gICAgaWYgKHNlZWQgPT09IChzZWVkIHwgMCkpIHtcbiAgICAgIC8vIFNlZWQgc3RhdGUgYXJyYXkgdXNpbmcgYSAzMi1iaXQgaW50ZWdlci5cbiAgICAgIHcgPSBYWzBdID0gc2VlZDtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gU2VlZCBzdGF0ZSB1c2luZyBhIHN0cmluZy5cbiAgICAgIHNlZWQgPSAnJyArIHNlZWQ7XG4gICAgICBmb3IgKGogPSAwOyBqIDwgc2VlZC5sZW5ndGg7ICsraikge1xuICAgICAgICBYW2ogJiA3XSA9IChYW2ogJiA3XSA8PCAxNSkgXlxuICAgICAgICAgICAgKHNlZWQuY2hhckNvZGVBdChqKSArIFhbKGogKyAxKSAmIDddIDw8IDEzKTtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gRW5mb3JjZSBhbiBhcnJheSBsZW5ndGggb2YgOCwgbm90IGFsbCB6ZXJvZXMuXG4gICAgd2hpbGUgKFgubGVuZ3RoIDwgOCkgWC5wdXNoKDApO1xuICAgIGZvciAoaiA9IDA7IGogPCA4ICYmIFhbal0gPT09IDA7ICsraik7XG4gICAgaWYgKGogPT0gOCkgdyA9IFhbN10gPSAtMTsgZWxzZSB3ID0gWFtqXTtcblxuICAgIG1lLnggPSBYO1xuICAgIG1lLmkgPSAwO1xuXG4gICAgLy8gRGlzY2FyZCBhbiBpbml0aWFsIDI1NiB2YWx1ZXMuXG4gICAgZm9yIChqID0gMjU2OyBqID4gMDsgLS1qKSB7XG4gICAgICBtZS5uZXh0KCk7XG4gICAgfVxuICB9XG5cbiAgaW5pdChtZSwgc2VlZCk7XG59XG5cbmZ1bmN0aW9uIGNvcHkoZiwgdCkge1xuICB0LnggPSBmLnguc2xpY2UoKTtcbiAgdC5pID0gZi5pO1xuICByZXR1cm4gdDtcbn1cblxuZnVuY3Rpb24gaW1wbChzZWVkLCBvcHRzKSB7XG4gIGlmIChzZWVkID09IG51bGwpIHNlZWQgPSArKG5ldyBEYXRlKTtcbiAgdmFyIHhnID0gbmV3IFhvckdlbihzZWVkKSxcbiAgICAgIHN0YXRlID0gb3B0cyAmJiBvcHRzLnN0YXRlLFxuICAgICAgcHJuZyA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gKHhnLm5leHQoKSA+Pj4gMCkgLyAweDEwMDAwMDAwMDsgfTtcbiAgcHJuZy5kb3VibGUgPSBmdW5jdGlvbigpIHtcbiAgICBkbyB7XG4gICAgICB2YXIgdG9wID0geGcubmV4dCgpID4+PiAxMSxcbiAgICAgICAgICBib3QgPSAoeGcubmV4dCgpID4+PiAwKSAvIDB4MTAwMDAwMDAwLFxuICAgICAgICAgIHJlc3VsdCA9ICh0b3AgKyBib3QpIC8gKDEgPDwgMjEpO1xuICAgIH0gd2hpbGUgKHJlc3VsdCA9PT0gMCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcbiAgcHJuZy5pbnQzMiA9IHhnLm5leHQ7XG4gIHBybmcucXVpY2sgPSBwcm5nO1xuICBpZiAoc3RhdGUpIHtcbiAgICBpZiAoc3RhdGUueCkgY29weShzdGF0ZSwgeGcpO1xuICAgIHBybmcuc3RhdGUgPSBmdW5jdGlvbigpIHsgcmV0dXJuIGNvcHkoeGcsIHt9KTsgfVxuICB9XG4gIHJldHVybiBwcm5nO1xufVxuXG5pZiAobW9kdWxlICYmIG1vZHVsZS5leHBvcnRzKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gaW1wbDtcbn0gZWxzZSBpZiAoZGVmaW5lICYmIGRlZmluZS5hbWQpIHtcbiAgZGVmaW5lKGZ1bmN0aW9uKCkgeyByZXR1cm4gaW1wbDsgfSk7XG59IGVsc2Uge1xuICB0aGlzLnhvcnNoaWZ0NyA9IGltcGw7XG59XG5cbn0pKFxuICB0aGlzLFxuICAodHlwZW9mIG1vZHVsZSkgPT0gJ29iamVjdCcgJiYgbW9kdWxlLCAgICAvLyBwcmVzZW50IGluIG5vZGUuanNcbiAgKHR5cGVvZiBkZWZpbmUpID09ICdmdW5jdGlvbicgJiYgZGVmaW5lICAgLy8gcHJlc2VudCB3aXRoIGFuIEFNRCBsb2FkZXJcbik7XG5cbiIsIi8vIEEgSmF2YXNjcmlwdCBpbXBsZW1lbnRhaW9uIG9mIFJpY2hhcmQgQnJlbnQncyBYb3JnZW5zIHhvcjQwOTYgYWxnb3JpdGhtLlxuLy9cbi8vIFRoaXMgZmFzdCBub24tY3J5cHRvZ3JhcGhpYyByYW5kb20gbnVtYmVyIGdlbmVyYXRvciBpcyBkZXNpZ25lZCBmb3Jcbi8vIHVzZSBpbiBNb250ZS1DYXJsbyBhbGdvcml0aG1zLiBJdCBjb21iaW5lcyBhIGxvbmctcGVyaW9kIHhvcnNoaWZ0XG4vLyBnZW5lcmF0b3Igd2l0aCBhIFdleWwgZ2VuZXJhdG9yLCBhbmQgaXQgcGFzc2VzIGFsbCBjb21tb24gYmF0dGVyaWVzXG4vLyBvZiBzdGFzdGljaWFsIHRlc3RzIGZvciByYW5kb21uZXNzIHdoaWxlIGNvbnN1bWluZyBvbmx5IGEgZmV3IG5hbm9zZWNvbmRzXG4vLyBmb3IgZWFjaCBwcm5nIGdlbmVyYXRlZC4gIEZvciBiYWNrZ3JvdW5kIG9uIHRoZSBnZW5lcmF0b3IsIHNlZSBCcmVudCdzXG4vLyBwYXBlcjogXCJTb21lIGxvbmctcGVyaW9kIHJhbmRvbSBudW1iZXIgZ2VuZXJhdG9ycyB1c2luZyBzaGlmdHMgYW5kIHhvcnMuXCJcbi8vIGh0dHA6Ly9hcnhpdi5vcmcvcGRmLzEwMDQuMzExNXYxLnBkZlxuLy9cbi8vIFVzYWdlOlxuLy9cbi8vIHZhciB4b3I0MDk2ID0gcmVxdWlyZSgneG9yNDA5NicpO1xuLy8gcmFuZG9tID0geG9yNDA5NigxKTsgICAgICAgICAgICAgICAgICAgICAgICAvLyBTZWVkIHdpdGggaW50MzIgb3Igc3RyaW5nLlxuLy8gYXNzZXJ0LmVxdWFsKHJhbmRvbSgpLCAwLjE1MjA0MzY0NTA1Mzg1NDcpOyAvLyAoMCwgMSkgcmFuZ2UsIDUzIGJpdHMuXG4vLyBhc3NlcnQuZXF1YWwocmFuZG9tLmludDMyKCksIDE4MDY1MzQ4OTcpOyAgIC8vIHNpZ25lZCBpbnQzMiwgMzIgYml0cy5cbi8vXG4vLyBGb3Igbm9uemVybyBudW1lcmljIGtleXMsIHRoaXMgaW1wZWxlbWVudGF0aW9uIHByb3ZpZGVzIGEgc2VxdWVuY2Vcbi8vIGlkZW50aWNhbCB0byB0aGF0IGJ5IEJyZW50J3MgeG9yZ2VucyAzIGltcGxlbWVudGFpb24gaW4gQy4gIFRoaXNcbi8vIGltcGxlbWVudGF0aW9uIGFsc28gcHJvdmlkZXMgZm9yIGluaXRhbGl6aW5nIHRoZSBnZW5lcmF0b3Igd2l0aFxuLy8gc3RyaW5nIHNlZWRzLCBvciBmb3Igc2F2aW5nIGFuZCByZXN0b3JpbmcgdGhlIHN0YXRlIG9mIHRoZSBnZW5lcmF0b3IuXG4vL1xuLy8gT24gQ2hyb21lLCB0aGlzIHBybmcgYmVuY2htYXJrcyBhYm91dCAyLjEgdGltZXMgc2xvd2VyIHRoYW5cbi8vIEphdmFzY3JpcHQncyBidWlsdC1pbiBNYXRoLnJhbmRvbSgpLlxuXG4oZnVuY3Rpb24oZ2xvYmFsLCBtb2R1bGUsIGRlZmluZSkge1xuXG5mdW5jdGlvbiBYb3JHZW4oc2VlZCkge1xuICB2YXIgbWUgPSB0aGlzO1xuXG4gIC8vIFNldCB1cCBnZW5lcmF0b3IgZnVuY3Rpb24uXG4gIG1lLm5leHQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgdyA9IG1lLncsXG4gICAgICAgIFggPSBtZS5YLCBpID0gbWUuaSwgdCwgdjtcbiAgICAvLyBVcGRhdGUgV2V5bCBnZW5lcmF0b3IuXG4gICAgbWUudyA9IHcgPSAodyArIDB4NjFjODg2NDcpIHwgMDtcbiAgICAvLyBVcGRhdGUgeG9yIGdlbmVyYXRvci5cbiAgICB2ID0gWFsoaSArIDM0KSAmIDEyN107XG4gICAgdCA9IFhbaSA9ICgoaSArIDEpICYgMTI3KV07XG4gICAgdiBePSB2IDw8IDEzO1xuICAgIHQgXj0gdCA8PCAxNztcbiAgICB2IF49IHYgPj4+IDE1O1xuICAgIHQgXj0gdCA+Pj4gMTI7XG4gICAgLy8gVXBkYXRlIFhvciBnZW5lcmF0b3IgYXJyYXkgc3RhdGUuXG4gICAgdiA9IFhbaV0gPSB2IF4gdDtcbiAgICBtZS5pID0gaTtcbiAgICAvLyBSZXN1bHQgaXMgdGhlIGNvbWJpbmF0aW9uLlxuICAgIHJldHVybiAodiArICh3IF4gKHcgPj4+IDE2KSkpIHwgMDtcbiAgfTtcblxuICBmdW5jdGlvbiBpbml0KG1lLCBzZWVkKSB7XG4gICAgdmFyIHQsIHYsIGksIGosIHcsIFggPSBbXSwgbGltaXQgPSAxMjg7XG4gICAgaWYgKHNlZWQgPT09IChzZWVkIHwgMCkpIHtcbiAgICAgIC8vIE51bWVyaWMgc2VlZHMgaW5pdGlhbGl6ZSB2LCB3aGljaCBpcyB1c2VkIHRvIGdlbmVyYXRlcyBYLlxuICAgICAgdiA9IHNlZWQ7XG4gICAgICBzZWVkID0gbnVsbDtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gU3RyaW5nIHNlZWRzIGFyZSBtaXhlZCBpbnRvIHYgYW5kIFggb25lIGNoYXJhY3RlciBhdCBhIHRpbWUuXG4gICAgICBzZWVkID0gc2VlZCArICdcXDAnO1xuICAgICAgdiA9IDA7XG4gICAgICBsaW1pdCA9IE1hdGgubWF4KGxpbWl0LCBzZWVkLmxlbmd0aCk7XG4gICAgfVxuICAgIC8vIEluaXRpYWxpemUgY2lyY3VsYXIgYXJyYXkgYW5kIHdleWwgdmFsdWUuXG4gICAgZm9yIChpID0gMCwgaiA9IC0zMjsgaiA8IGxpbWl0OyArK2opIHtcbiAgICAgIC8vIFB1dCB0aGUgdW5pY29kZSBjaGFyYWN0ZXJzIGludG8gdGhlIGFycmF5LCBhbmQgc2h1ZmZsZSB0aGVtLlxuICAgICAgaWYgKHNlZWQpIHYgXj0gc2VlZC5jaGFyQ29kZUF0KChqICsgMzIpICUgc2VlZC5sZW5ndGgpO1xuICAgICAgLy8gQWZ0ZXIgMzIgc2h1ZmZsZXMsIHRha2UgdiBhcyB0aGUgc3RhcnRpbmcgdyB2YWx1ZS5cbiAgICAgIGlmIChqID09PSAwKSB3ID0gdjtcbiAgICAgIHYgXj0gdiA8PCAxMDtcbiAgICAgIHYgXj0gdiA+Pj4gMTU7XG4gICAgICB2IF49IHYgPDwgNDtcbiAgICAgIHYgXj0gdiA+Pj4gMTM7XG4gICAgICBpZiAoaiA+PSAwKSB7XG4gICAgICAgIHcgPSAodyArIDB4NjFjODg2NDcpIHwgMDsgICAgIC8vIFdleWwuXG4gICAgICAgIHQgPSAoWFtqICYgMTI3XSBePSAodiArIHcpKTsgIC8vIENvbWJpbmUgeG9yIGFuZCB3ZXlsIHRvIGluaXQgYXJyYXkuXG4gICAgICAgIGkgPSAoMCA9PSB0KSA/IGkgKyAxIDogMDsgICAgIC8vIENvdW50IHplcm9lcy5cbiAgICAgIH1cbiAgICB9XG4gICAgLy8gV2UgaGF2ZSBkZXRlY3RlZCBhbGwgemVyb2VzOyBtYWtlIHRoZSBrZXkgbm9uemVyby5cbiAgICBpZiAoaSA+PSAxMjgpIHtcbiAgICAgIFhbKHNlZWQgJiYgc2VlZC5sZW5ndGggfHwgMCkgJiAxMjddID0gLTE7XG4gICAgfVxuICAgIC8vIFJ1biB0aGUgZ2VuZXJhdG9yIDUxMiB0aW1lcyB0byBmdXJ0aGVyIG1peCB0aGUgc3RhdGUgYmVmb3JlIHVzaW5nIGl0LlxuICAgIC8vIEZhY3RvcmluZyB0aGlzIGFzIGEgZnVuY3Rpb24gc2xvd3MgdGhlIG1haW4gZ2VuZXJhdG9yLCBzbyBpdCBpcyBqdXN0XG4gICAgLy8gdW5yb2xsZWQgaGVyZS4gIFRoZSB3ZXlsIGdlbmVyYXRvciBpcyBub3QgYWR2YW5jZWQgd2hpbGUgd2FybWluZyB1cC5cbiAgICBpID0gMTI3O1xuICAgIGZvciAoaiA9IDQgKiAxMjg7IGogPiAwOyAtLWopIHtcbiAgICAgIHYgPSBYWyhpICsgMzQpICYgMTI3XTtcbiAgICAgIHQgPSBYW2kgPSAoKGkgKyAxKSAmIDEyNyldO1xuICAgICAgdiBePSB2IDw8IDEzO1xuICAgICAgdCBePSB0IDw8IDE3O1xuICAgICAgdiBePSB2ID4+PiAxNTtcbiAgICAgIHQgXj0gdCA+Pj4gMTI7XG4gICAgICBYW2ldID0gdiBeIHQ7XG4gICAgfVxuICAgIC8vIFN0b3Jpbmcgc3RhdGUgYXMgb2JqZWN0IG1lbWJlcnMgaXMgZmFzdGVyIHRoYW4gdXNpbmcgY2xvc3VyZSB2YXJpYWJsZXMuXG4gICAgbWUudyA9IHc7XG4gICAgbWUuWCA9IFg7XG4gICAgbWUuaSA9IGk7XG4gIH1cblxuICBpbml0KG1lLCBzZWVkKTtcbn1cblxuZnVuY3Rpb24gY29weShmLCB0KSB7XG4gIHQuaSA9IGYuaTtcbiAgdC53ID0gZi53O1xuICB0LlggPSBmLlguc2xpY2UoKTtcbiAgcmV0dXJuIHQ7XG59O1xuXG5mdW5jdGlvbiBpbXBsKHNlZWQsIG9wdHMpIHtcbiAgaWYgKHNlZWQgPT0gbnVsbCkgc2VlZCA9ICsobmV3IERhdGUpO1xuICB2YXIgeGcgPSBuZXcgWG9yR2VuKHNlZWQpLFxuICAgICAgc3RhdGUgPSBvcHRzICYmIG9wdHMuc3RhdGUsXG4gICAgICBwcm5nID0gZnVuY3Rpb24oKSB7IHJldHVybiAoeGcubmV4dCgpID4+PiAwKSAvIDB4MTAwMDAwMDAwOyB9O1xuICBwcm5nLmRvdWJsZSA9IGZ1bmN0aW9uKCkge1xuICAgIGRvIHtcbiAgICAgIHZhciB0b3AgPSB4Zy5uZXh0KCkgPj4+IDExLFxuICAgICAgICAgIGJvdCA9ICh4Zy5uZXh0KCkgPj4+IDApIC8gMHgxMDAwMDAwMDAsXG4gICAgICAgICAgcmVzdWx0ID0gKHRvcCArIGJvdCkgLyAoMSA8PCAyMSk7XG4gICAgfSB3aGlsZSAocmVzdWx0ID09PSAwKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuICBwcm5nLmludDMyID0geGcubmV4dDtcbiAgcHJuZy5xdWljayA9IHBybmc7XG4gIGlmIChzdGF0ZSkge1xuICAgIGlmIChzdGF0ZS5YKSBjb3B5KHN0YXRlLCB4Zyk7XG4gICAgcHJuZy5zdGF0ZSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gY29weSh4Zywge30pOyB9XG4gIH1cbiAgcmV0dXJuIHBybmc7XG59XG5cbmlmIChtb2R1bGUgJiYgbW9kdWxlLmV4cG9ydHMpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBpbXBsO1xufSBlbHNlIGlmIChkZWZpbmUgJiYgZGVmaW5lLmFtZCkge1xuICBkZWZpbmUoZnVuY3Rpb24oKSB7IHJldHVybiBpbXBsOyB9KTtcbn0gZWxzZSB7XG4gIHRoaXMueG9yNDA5NiA9IGltcGw7XG59XG5cbn0pKFxuICB0aGlzLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB3aW5kb3cgb2JqZWN0IG9yIGdsb2JhbFxuICAodHlwZW9mIG1vZHVsZSkgPT0gJ29iamVjdCcgJiYgbW9kdWxlLCAgICAvLyBwcmVzZW50IGluIG5vZGUuanNcbiAgKHR5cGVvZiBkZWZpbmUpID09ICdmdW5jdGlvbicgJiYgZGVmaW5lICAgLy8gcHJlc2VudCB3aXRoIGFuIEFNRCBsb2FkZXJcbik7XG4iLCIvLyBBIEphdmFzY3JpcHQgaW1wbGVtZW50YWlvbiBvZiB0aGUgXCJUeWNoZS1pXCIgcHJuZyBhbGdvcml0aG0gYnlcbi8vIFNhbXVlbCBOZXZlcyBhbmQgRmlsaXBlIEFyYXVqby5cbi8vIFNlZSBodHRwczovL2VkZW4uZGVpLnVjLnB0L35zbmV2ZXMvcHVicy8yMDExLXNuZmEyLnBkZlxuXG4oZnVuY3Rpb24oZ2xvYmFsLCBtb2R1bGUsIGRlZmluZSkge1xuXG5mdW5jdGlvbiBYb3JHZW4oc2VlZCkge1xuICB2YXIgbWUgPSB0aGlzLCBzdHJzZWVkID0gJyc7XG5cbiAgLy8gU2V0IHVwIGdlbmVyYXRvciBmdW5jdGlvbi5cbiAgbWUubmV4dCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBiID0gbWUuYiwgYyA9IG1lLmMsIGQgPSBtZS5kLCBhID0gbWUuYTtcbiAgICBiID0gKGIgPDwgMjUpIF4gKGIgPj4+IDcpIF4gYztcbiAgICBjID0gKGMgLSBkKSB8IDA7XG4gICAgZCA9IChkIDw8IDI0KSBeIChkID4+PiA4KSBeIGE7XG4gICAgYSA9IChhIC0gYikgfCAwO1xuICAgIG1lLmIgPSBiID0gKGIgPDwgMjApIF4gKGIgPj4+IDEyKSBeIGM7XG4gICAgbWUuYyA9IGMgPSAoYyAtIGQpIHwgMDtcbiAgICBtZS5kID0gKGQgPDwgMTYpIF4gKGMgPj4+IDE2KSBeIGE7XG4gICAgcmV0dXJuIG1lLmEgPSAoYSAtIGIpIHwgMDtcbiAgfTtcblxuICAvKiBUaGUgZm9sbG93aW5nIGlzIG5vbi1pbnZlcnRlZCB0eWNoZSwgd2hpY2ggaGFzIGJldHRlciBpbnRlcm5hbFxuICAgKiBiaXQgZGlmZnVzaW9uLCBidXQgd2hpY2ggaXMgYWJvdXQgMjUlIHNsb3dlciB0aGFuIHR5Y2hlLWkgaW4gSlMuXG4gIG1lLm5leHQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgYSA9IG1lLmEsIGIgPSBtZS5iLCBjID0gbWUuYywgZCA9IG1lLmQ7XG4gICAgYSA9IChtZS5hICsgbWUuYiB8IDApID4+PiAwO1xuICAgIGQgPSBtZS5kIF4gYTsgZCA9IGQgPDwgMTYgXiBkID4+PiAxNjtcbiAgICBjID0gbWUuYyArIGQgfCAwO1xuICAgIGIgPSBtZS5iIF4gYzsgYiA9IGIgPDwgMTIgXiBkID4+PiAyMDtcbiAgICBtZS5hID0gYSA9IGEgKyBiIHwgMDtcbiAgICBkID0gZCBeIGE7IG1lLmQgPSBkID0gZCA8PCA4IF4gZCA+Pj4gMjQ7XG4gICAgbWUuYyA9IGMgPSBjICsgZCB8IDA7XG4gICAgYiA9IGIgXiBjO1xuICAgIHJldHVybiBtZS5iID0gKGIgPDwgNyBeIGIgPj4+IDI1KTtcbiAgfVxuICAqL1xuXG4gIG1lLmEgPSAwO1xuICBtZS5iID0gMDtcbiAgbWUuYyA9IDI2NTQ0MzU3NjkgfCAwO1xuICBtZS5kID0gMTM2NzEzMDU1MTtcblxuICBpZiAoc2VlZCA9PT0gTWF0aC5mbG9vcihzZWVkKSkge1xuICAgIC8vIEludGVnZXIgc2VlZC5cbiAgICBtZS5hID0gKHNlZWQgLyAweDEwMDAwMDAwMCkgfCAwO1xuICAgIG1lLmIgPSBzZWVkIHwgMDtcbiAgfSBlbHNlIHtcbiAgICAvLyBTdHJpbmcgc2VlZC5cbiAgICBzdHJzZWVkICs9IHNlZWQ7XG4gIH1cblxuICAvLyBNaXggaW4gc3RyaW5nIHNlZWQsIHRoZW4gZGlzY2FyZCBhbiBpbml0aWFsIGJhdGNoIG9mIDY0IHZhbHVlcy5cbiAgZm9yICh2YXIgayA9IDA7IGsgPCBzdHJzZWVkLmxlbmd0aCArIDIwOyBrKyspIHtcbiAgICBtZS5iIF49IHN0cnNlZWQuY2hhckNvZGVBdChrKSB8IDA7XG4gICAgbWUubmV4dCgpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNvcHkoZiwgdCkge1xuICB0LmEgPSBmLmE7XG4gIHQuYiA9IGYuYjtcbiAgdC5jID0gZi5jO1xuICB0LmQgPSBmLmQ7XG4gIHJldHVybiB0O1xufTtcblxuZnVuY3Rpb24gaW1wbChzZWVkLCBvcHRzKSB7XG4gIHZhciB4ZyA9IG5ldyBYb3JHZW4oc2VlZCksXG4gICAgICBzdGF0ZSA9IG9wdHMgJiYgb3B0cy5zdGF0ZSxcbiAgICAgIHBybmcgPSBmdW5jdGlvbigpIHsgcmV0dXJuICh4Zy5uZXh0KCkgPj4+IDApIC8gMHgxMDAwMDAwMDA7IH07XG4gIHBybmcuZG91YmxlID0gZnVuY3Rpb24oKSB7XG4gICAgZG8ge1xuICAgICAgdmFyIHRvcCA9IHhnLm5leHQoKSA+Pj4gMTEsXG4gICAgICAgICAgYm90ID0gKHhnLm5leHQoKSA+Pj4gMCkgLyAweDEwMDAwMDAwMCxcbiAgICAgICAgICByZXN1bHQgPSAodG9wICsgYm90KSAvICgxIDw8IDIxKTtcbiAgICB9IHdoaWxlIChyZXN1bHQgPT09IDApO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG4gIHBybmcuaW50MzIgPSB4Zy5uZXh0O1xuICBwcm5nLnF1aWNrID0gcHJuZztcbiAgaWYgKHN0YXRlKSB7XG4gICAgaWYgKHR5cGVvZihzdGF0ZSkgPT0gJ29iamVjdCcpIGNvcHkoc3RhdGUsIHhnKTtcbiAgICBwcm5nLnN0YXRlID0gZnVuY3Rpb24oKSB7IHJldHVybiBjb3B5KHhnLCB7fSk7IH1cbiAgfVxuICByZXR1cm4gcHJuZztcbn1cblxuaWYgKG1vZHVsZSAmJiBtb2R1bGUuZXhwb3J0cykge1xuICBtb2R1bGUuZXhwb3J0cyA9IGltcGw7XG59IGVsc2UgaWYgKGRlZmluZSAmJiBkZWZpbmUuYW1kKSB7XG4gIGRlZmluZShmdW5jdGlvbigpIHsgcmV0dXJuIGltcGw7IH0pO1xufSBlbHNlIHtcbiAgdGhpcy50eWNoZWkgPSBpbXBsO1xufVxuXG59KShcbiAgdGhpcyxcbiAgKHR5cGVvZiBtb2R1bGUpID09ICdvYmplY3QnICYmIG1vZHVsZSwgICAgLy8gcHJlc2VudCBpbiBub2RlLmpzXG4gICh0eXBlb2YgZGVmaW5lKSA9PSAnZnVuY3Rpb24nICYmIGRlZmluZSAgIC8vIHByZXNlbnQgd2l0aCBhbiBBTUQgbG9hZGVyXG4pO1xuXG5cbiIsIi8qXG5Db3B5cmlnaHQgMjAxNCBEYXZpZCBCYXUuXG5cblBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZ1xuYSBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG5cIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbndpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbmRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0b1xucGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvXG50aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG5cblRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlXG5pbmNsdWRlZCBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cblxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCxcbkVYUFJFU1MgT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULlxuSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTllcbkNMQUlNLCBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsXG5UT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRVxuU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbiovXG5cbihmdW5jdGlvbiAocG9vbCwgbWF0aCkge1xuLy9cbi8vIFRoZSBmb2xsb3dpbmcgY29uc3RhbnRzIGFyZSByZWxhdGVkIHRvIElFRUUgNzU0IGxpbWl0cy5cbi8vXG5cbi8vIERldGVjdCB0aGUgZ2xvYmFsIG9iamVjdCwgZXZlbiBpZiBvcGVyYXRpbmcgaW4gc3RyaWN0IG1vZGUuXG4vLyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8xNDM4NzA1Ny8yNjUyOThcbnZhciBnbG9iYWwgPSAoMCwgZXZhbCkoJ3RoaXMnKSxcbiAgICB3aWR0aCA9IDI1NiwgICAgICAgIC8vIGVhY2ggUkM0IG91dHB1dCBpcyAwIDw9IHggPCAyNTZcbiAgICBjaHVua3MgPSA2LCAgICAgICAgIC8vIGF0IGxlYXN0IHNpeCBSQzQgb3V0cHV0cyBmb3IgZWFjaCBkb3VibGVcbiAgICBkaWdpdHMgPSA1MiwgICAgICAgIC8vIHRoZXJlIGFyZSA1MiBzaWduaWZpY2FudCBkaWdpdHMgaW4gYSBkb3VibGVcbiAgICBybmduYW1lID0gJ3JhbmRvbScsIC8vIHJuZ25hbWU6IG5hbWUgZm9yIE1hdGgucmFuZG9tIGFuZCBNYXRoLnNlZWRyYW5kb21cbiAgICBzdGFydGRlbm9tID0gbWF0aC5wb3cod2lkdGgsIGNodW5rcyksXG4gICAgc2lnbmlmaWNhbmNlID0gbWF0aC5wb3coMiwgZGlnaXRzKSxcbiAgICBvdmVyZmxvdyA9IHNpZ25pZmljYW5jZSAqIDIsXG4gICAgbWFzayA9IHdpZHRoIC0gMSxcbiAgICBub2RlY3J5cHRvOyAgICAgICAgIC8vIG5vZGUuanMgY3J5cHRvIG1vZHVsZSwgaW5pdGlhbGl6ZWQgYXQgdGhlIGJvdHRvbS5cblxuLy9cbi8vIHNlZWRyYW5kb20oKVxuLy8gVGhpcyBpcyB0aGUgc2VlZHJhbmRvbSBmdW5jdGlvbiBkZXNjcmliZWQgYWJvdmUuXG4vL1xuZnVuY3Rpb24gc2VlZHJhbmRvbShzZWVkLCBvcHRpb25zLCBjYWxsYmFjaykge1xuICB2YXIga2V5ID0gW107XG4gIG9wdGlvbnMgPSAob3B0aW9ucyA9PSB0cnVlKSA/IHsgZW50cm9weTogdHJ1ZSB9IDogKG9wdGlvbnMgfHwge30pO1xuXG4gIC8vIEZsYXR0ZW4gdGhlIHNlZWQgc3RyaW5nIG9yIGJ1aWxkIG9uZSBmcm9tIGxvY2FsIGVudHJvcHkgaWYgbmVlZGVkLlxuICB2YXIgc2hvcnRzZWVkID0gbWl4a2V5KGZsYXR0ZW4oXG4gICAgb3B0aW9ucy5lbnRyb3B5ID8gW3NlZWQsIHRvc3RyaW5nKHBvb2wpXSA6XG4gICAgKHNlZWQgPT0gbnVsbCkgPyBhdXRvc2VlZCgpIDogc2VlZCwgMyksIGtleSk7XG5cbiAgLy8gVXNlIHRoZSBzZWVkIHRvIGluaXRpYWxpemUgYW4gQVJDNCBnZW5lcmF0b3IuXG4gIHZhciBhcmM0ID0gbmV3IEFSQzQoa2V5KTtcblxuICAvLyBUaGlzIGZ1bmN0aW9uIHJldHVybnMgYSByYW5kb20gZG91YmxlIGluIFswLCAxKSB0aGF0IGNvbnRhaW5zXG4gIC8vIHJhbmRvbW5lc3MgaW4gZXZlcnkgYml0IG9mIHRoZSBtYW50aXNzYSBvZiB0aGUgSUVFRSA3NTQgdmFsdWUuXG4gIHZhciBwcm5nID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIG4gPSBhcmM0LmcoY2h1bmtzKSwgICAgICAgICAgICAgLy8gU3RhcnQgd2l0aCBhIG51bWVyYXRvciBuIDwgMiBeIDQ4XG4gICAgICAgIGQgPSBzdGFydGRlbm9tLCAgICAgICAgICAgICAgICAgLy8gICBhbmQgZGVub21pbmF0b3IgZCA9IDIgXiA0OC5cbiAgICAgICAgeCA9IDA7ICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgIGFuZCBubyAnZXh0cmEgbGFzdCBieXRlJy5cbiAgICB3aGlsZSAobiA8IHNpZ25pZmljYW5jZSkgeyAgICAgICAgICAvLyBGaWxsIHVwIGFsbCBzaWduaWZpY2FudCBkaWdpdHMgYnlcbiAgICAgIG4gPSAobiArIHgpICogd2lkdGg7ICAgICAgICAgICAgICAvLyAgIHNoaWZ0aW5nIG51bWVyYXRvciBhbmRcbiAgICAgIGQgKj0gd2lkdGg7ICAgICAgICAgICAgICAgICAgICAgICAvLyAgIGRlbm9taW5hdG9yIGFuZCBnZW5lcmF0aW5nIGFcbiAgICAgIHggPSBhcmM0LmcoMSk7ICAgICAgICAgICAgICAgICAgICAvLyAgIG5ldyBsZWFzdC1zaWduaWZpY2FudC1ieXRlLlxuICAgIH1cbiAgICB3aGlsZSAobiA+PSBvdmVyZmxvdykgeyAgICAgICAgICAgICAvLyBUbyBhdm9pZCByb3VuZGluZyB1cCwgYmVmb3JlIGFkZGluZ1xuICAgICAgbiAvPSAyOyAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgbGFzdCBieXRlLCBzaGlmdCBldmVyeXRoaW5nXG4gICAgICBkIC89IDI7ICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICByaWdodCB1c2luZyBpbnRlZ2VyIG1hdGggdW50aWxcbiAgICAgIHggPj4+PSAxOyAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgIHdlIGhhdmUgZXhhY3RseSB0aGUgZGVzaXJlZCBiaXRzLlxuICAgIH1cbiAgICByZXR1cm4gKG4gKyB4KSAvIGQ7ICAgICAgICAgICAgICAgICAvLyBGb3JtIHRoZSBudW1iZXIgd2l0aGluIFswLCAxKS5cbiAgfTtcblxuICBwcm5nLmludDMyID0gZnVuY3Rpb24oKSB7IHJldHVybiBhcmM0LmcoNCkgfCAwOyB9XG4gIHBybmcucXVpY2sgPSBmdW5jdGlvbigpIHsgcmV0dXJuIGFyYzQuZyg0KSAvIDB4MTAwMDAwMDAwOyB9XG4gIHBybmcuZG91YmxlID0gcHJuZztcblxuICAvLyBNaXggdGhlIHJhbmRvbW5lc3MgaW50byBhY2N1bXVsYXRlZCBlbnRyb3B5LlxuICBtaXhrZXkodG9zdHJpbmcoYXJjNC5TKSwgcG9vbCk7XG5cbiAgLy8gQ2FsbGluZyBjb252ZW50aW9uOiB3aGF0IHRvIHJldHVybiBhcyBhIGZ1bmN0aW9uIG9mIHBybmcsIHNlZWQsIGlzX21hdGguXG4gIHJldHVybiAob3B0aW9ucy5wYXNzIHx8IGNhbGxiYWNrIHx8XG4gICAgICBmdW5jdGlvbihwcm5nLCBzZWVkLCBpc19tYXRoX2NhbGwsIHN0YXRlKSB7XG4gICAgICAgIGlmIChzdGF0ZSkge1xuICAgICAgICAgIC8vIExvYWQgdGhlIGFyYzQgc3RhdGUgZnJvbSB0aGUgZ2l2ZW4gc3RhdGUgaWYgaXQgaGFzIGFuIFMgYXJyYXkuXG4gICAgICAgICAgaWYgKHN0YXRlLlMpIHsgY29weShzdGF0ZSwgYXJjNCk7IH1cbiAgICAgICAgICAvLyBPbmx5IHByb3ZpZGUgdGhlIC5zdGF0ZSBtZXRob2QgaWYgcmVxdWVzdGVkIHZpYSBvcHRpb25zLnN0YXRlLlxuICAgICAgICAgIHBybmcuc3RhdGUgPSBmdW5jdGlvbigpIHsgcmV0dXJuIGNvcHkoYXJjNCwge30pOyB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBJZiBjYWxsZWQgYXMgYSBtZXRob2Qgb2YgTWF0aCAoTWF0aC5zZWVkcmFuZG9tKCkpLCBtdXRhdGVcbiAgICAgICAgLy8gTWF0aC5yYW5kb20gYmVjYXVzZSB0aGF0IGlzIGhvdyBzZWVkcmFuZG9tLmpzIGhhcyB3b3JrZWQgc2luY2UgdjEuMC5cbiAgICAgICAgaWYgKGlzX21hdGhfY2FsbCkgeyBtYXRoW3JuZ25hbWVdID0gcHJuZzsgcmV0dXJuIHNlZWQ7IH1cblxuICAgICAgICAvLyBPdGhlcndpc2UsIGl0IGlzIGEgbmV3ZXIgY2FsbGluZyBjb252ZW50aW9uLCBzbyByZXR1cm4gdGhlXG4gICAgICAgIC8vIHBybmcgZGlyZWN0bHkuXG4gICAgICAgIGVsc2UgcmV0dXJuIHBybmc7XG4gICAgICB9KShcbiAgcHJuZyxcbiAgc2hvcnRzZWVkLFxuICAnZ2xvYmFsJyBpbiBvcHRpb25zID8gb3B0aW9ucy5nbG9iYWwgOiAodGhpcyA9PSBtYXRoKSxcbiAgb3B0aW9ucy5zdGF0ZSk7XG59XG5tYXRoWydzZWVkJyArIHJuZ25hbWVdID0gc2VlZHJhbmRvbTtcblxuLy9cbi8vIEFSQzRcbi8vXG4vLyBBbiBBUkM0IGltcGxlbWVudGF0aW9uLiAgVGhlIGNvbnN0cnVjdG9yIHRha2VzIGEga2V5IGluIHRoZSBmb3JtIG9mXG4vLyBhbiBhcnJheSBvZiBhdCBtb3N0ICh3aWR0aCkgaW50ZWdlcnMgdGhhdCBzaG91bGQgYmUgMCA8PSB4IDwgKHdpZHRoKS5cbi8vXG4vLyBUaGUgZyhjb3VudCkgbWV0aG9kIHJldHVybnMgYSBwc2V1ZG9yYW5kb20gaW50ZWdlciB0aGF0IGNvbmNhdGVuYXRlc1xuLy8gdGhlIG5leHQgKGNvdW50KSBvdXRwdXRzIGZyb20gQVJDNC4gIEl0cyByZXR1cm4gdmFsdWUgaXMgYSBudW1iZXIgeFxuLy8gdGhhdCBpcyBpbiB0aGUgcmFuZ2UgMCA8PSB4IDwgKHdpZHRoIF4gY291bnQpLlxuLy9cbmZ1bmN0aW9uIEFSQzQoa2V5KSB7XG4gIHZhciB0LCBrZXlsZW4gPSBrZXkubGVuZ3RoLFxuICAgICAgbWUgPSB0aGlzLCBpID0gMCwgaiA9IG1lLmkgPSBtZS5qID0gMCwgcyA9IG1lLlMgPSBbXTtcblxuICAvLyBUaGUgZW1wdHkga2V5IFtdIGlzIHRyZWF0ZWQgYXMgWzBdLlxuICBpZiAoIWtleWxlbikgeyBrZXkgPSBba2V5bGVuKytdOyB9XG5cbiAgLy8gU2V0IHVwIFMgdXNpbmcgdGhlIHN0YW5kYXJkIGtleSBzY2hlZHVsaW5nIGFsZ29yaXRobS5cbiAgd2hpbGUgKGkgPCB3aWR0aCkge1xuICAgIHNbaV0gPSBpKys7XG4gIH1cbiAgZm9yIChpID0gMDsgaSA8IHdpZHRoOyBpKyspIHtcbiAgICBzW2ldID0gc1tqID0gbWFzayAmIChqICsga2V5W2kgJSBrZXlsZW5dICsgKHQgPSBzW2ldKSldO1xuICAgIHNbal0gPSB0O1xuICB9XG5cbiAgLy8gVGhlIFwiZ1wiIG1ldGhvZCByZXR1cm5zIHRoZSBuZXh0IChjb3VudCkgb3V0cHV0cyBhcyBvbmUgbnVtYmVyLlxuICAobWUuZyA9IGZ1bmN0aW9uKGNvdW50KSB7XG4gICAgLy8gVXNpbmcgaW5zdGFuY2UgbWVtYmVycyBpbnN0ZWFkIG9mIGNsb3N1cmUgc3RhdGUgbmVhcmx5IGRvdWJsZXMgc3BlZWQuXG4gICAgdmFyIHQsIHIgPSAwLFxuICAgICAgICBpID0gbWUuaSwgaiA9IG1lLmosIHMgPSBtZS5TO1xuICAgIHdoaWxlIChjb3VudC0tKSB7XG4gICAgICB0ID0gc1tpID0gbWFzayAmIChpICsgMSldO1xuICAgICAgciA9IHIgKiB3aWR0aCArIHNbbWFzayAmICgoc1tpXSA9IHNbaiA9IG1hc2sgJiAoaiArIHQpXSkgKyAoc1tqXSA9IHQpKV07XG4gICAgfVxuICAgIG1lLmkgPSBpOyBtZS5qID0gajtcbiAgICByZXR1cm4gcjtcbiAgICAvLyBGb3Igcm9idXN0IHVucHJlZGljdGFiaWxpdHksIHRoZSBmdW5jdGlvbiBjYWxsIGJlbG93IGF1dG9tYXRpY2FsbHlcbiAgICAvLyBkaXNjYXJkcyBhbiBpbml0aWFsIGJhdGNoIG9mIHZhbHVlcy4gIFRoaXMgaXMgY2FsbGVkIFJDNC1kcm9wWzI1Nl0uXG4gICAgLy8gU2VlIGh0dHA6Ly9nb29nbGUuY29tL3NlYXJjaD9xPXJzYStmbHVocmVyK3Jlc3BvbnNlJmJ0bklcbiAgfSkod2lkdGgpO1xufVxuXG4vL1xuLy8gY29weSgpXG4vLyBDb3BpZXMgaW50ZXJuYWwgc3RhdGUgb2YgQVJDNCB0byBvciBmcm9tIGEgcGxhaW4gb2JqZWN0LlxuLy9cbmZ1bmN0aW9uIGNvcHkoZiwgdCkge1xuICB0LmkgPSBmLmk7XG4gIHQuaiA9IGYuajtcbiAgdC5TID0gZi5TLnNsaWNlKCk7XG4gIHJldHVybiB0O1xufTtcblxuLy9cbi8vIGZsYXR0ZW4oKVxuLy8gQ29udmVydHMgYW4gb2JqZWN0IHRyZWUgdG8gbmVzdGVkIGFycmF5cyBvZiBzdHJpbmdzLlxuLy9cbmZ1bmN0aW9uIGZsYXR0ZW4ob2JqLCBkZXB0aCkge1xuICB2YXIgcmVzdWx0ID0gW10sIHR5cCA9ICh0eXBlb2Ygb2JqKSwgcHJvcDtcbiAgaWYgKGRlcHRoICYmIHR5cCA9PSAnb2JqZWN0Jykge1xuICAgIGZvciAocHJvcCBpbiBvYmopIHtcbiAgICAgIHRyeSB7IHJlc3VsdC5wdXNoKGZsYXR0ZW4ob2JqW3Byb3BdLCBkZXB0aCAtIDEpKTsgfSBjYXRjaCAoZSkge31cbiAgICB9XG4gIH1cbiAgcmV0dXJuIChyZXN1bHQubGVuZ3RoID8gcmVzdWx0IDogdHlwID09ICdzdHJpbmcnID8gb2JqIDogb2JqICsgJ1xcMCcpO1xufVxuXG4vL1xuLy8gbWl4a2V5KClcbi8vIE1peGVzIGEgc3RyaW5nIHNlZWQgaW50byBhIGtleSB0aGF0IGlzIGFuIGFycmF5IG9mIGludGVnZXJzLCBhbmRcbi8vIHJldHVybnMgYSBzaG9ydGVuZWQgc3RyaW5nIHNlZWQgdGhhdCBpcyBlcXVpdmFsZW50IHRvIHRoZSByZXN1bHQga2V5LlxuLy9cbmZ1bmN0aW9uIG1peGtleShzZWVkLCBrZXkpIHtcbiAgdmFyIHN0cmluZ3NlZWQgPSBzZWVkICsgJycsIHNtZWFyLCBqID0gMDtcbiAgd2hpbGUgKGogPCBzdHJpbmdzZWVkLmxlbmd0aCkge1xuICAgIGtleVttYXNrICYgal0gPVxuICAgICAgbWFzayAmICgoc21lYXIgXj0ga2V5W21hc2sgJiBqXSAqIDE5KSArIHN0cmluZ3NlZWQuY2hhckNvZGVBdChqKyspKTtcbiAgfVxuICByZXR1cm4gdG9zdHJpbmcoa2V5KTtcbn1cblxuLy9cbi8vIGF1dG9zZWVkKClcbi8vIFJldHVybnMgYW4gb2JqZWN0IGZvciBhdXRvc2VlZGluZywgdXNpbmcgd2luZG93LmNyeXB0byBhbmQgTm9kZSBjcnlwdG9cbi8vIG1vZHVsZSBpZiBhdmFpbGFibGUuXG4vL1xuZnVuY3Rpb24gYXV0b3NlZWQoKSB7XG4gIHRyeSB7XG4gICAgdmFyIG91dDtcbiAgICBpZiAobm9kZWNyeXB0byAmJiAob3V0ID0gbm9kZWNyeXB0by5yYW5kb21CeXRlcykpIHtcbiAgICAgIC8vIFRoZSB1c2Ugb2YgJ291dCcgdG8gcmVtZW1iZXIgcmFuZG9tQnl0ZXMgbWFrZXMgdGlnaHQgbWluaWZpZWQgY29kZS5cbiAgICAgIG91dCA9IG91dCh3aWR0aCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG91dCA9IG5ldyBVaW50OEFycmF5KHdpZHRoKTtcbiAgICAgIChnbG9iYWwuY3J5cHRvIHx8IGdsb2JhbC5tc0NyeXB0bykuZ2V0UmFuZG9tVmFsdWVzKG91dCk7XG4gICAgfVxuICAgIHJldHVybiB0b3N0cmluZyhvdXQpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgdmFyIGJyb3dzZXIgPSBnbG9iYWwubmF2aWdhdG9yLFxuICAgICAgICBwbHVnaW5zID0gYnJvd3NlciAmJiBicm93c2VyLnBsdWdpbnM7XG4gICAgcmV0dXJuIFsrbmV3IERhdGUsIGdsb2JhbCwgcGx1Z2lucywgZ2xvYmFsLnNjcmVlbiwgdG9zdHJpbmcocG9vbCldO1xuICB9XG59XG5cbi8vXG4vLyB0b3N0cmluZygpXG4vLyBDb252ZXJ0cyBhbiBhcnJheSBvZiBjaGFyY29kZXMgdG8gYSBzdHJpbmdcbi8vXG5mdW5jdGlvbiB0b3N0cmluZyhhKSB7XG4gIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KDAsIGEpO1xufVxuXG4vL1xuLy8gV2hlbiBzZWVkcmFuZG9tLmpzIGlzIGxvYWRlZCwgd2UgaW1tZWRpYXRlbHkgbWl4IGEgZmV3IGJpdHNcbi8vIGZyb20gdGhlIGJ1aWx0LWluIFJORyBpbnRvIHRoZSBlbnRyb3B5IHBvb2wuICBCZWNhdXNlIHdlIGRvXG4vLyBub3Qgd2FudCB0byBpbnRlcmZlcmUgd2l0aCBkZXRlcm1pbmlzdGljIFBSTkcgc3RhdGUgbGF0ZXIsXG4vLyBzZWVkcmFuZG9tIHdpbGwgbm90IGNhbGwgbWF0aC5yYW5kb20gb24gaXRzIG93biBhZ2FpbiBhZnRlclxuLy8gaW5pdGlhbGl6YXRpb24uXG4vL1xubWl4a2V5KG1hdGgucmFuZG9tKCksIHBvb2wpO1xuXG4vL1xuLy8gTm9kZWpzIGFuZCBBTUQgc3VwcG9ydDogZXhwb3J0IHRoZSBpbXBsZW1lbnRhdGlvbiBhcyBhIG1vZHVsZSB1c2luZ1xuLy8gZWl0aGVyIGNvbnZlbnRpb24uXG4vL1xuaWYgKCh0eXBlb2YgbW9kdWxlKSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUuZXhwb3J0cykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHNlZWRyYW5kb207XG4gIC8vIFdoZW4gaW4gbm9kZS5qcywgdHJ5IHVzaW5nIGNyeXB0byBwYWNrYWdlIGZvciBhdXRvc2VlZGluZy5cbiAgdHJ5IHtcbiAgICBub2RlY3J5cHRvID0gcmVxdWlyZSgnY3J5cHRvJyk7XG4gIH0gY2F0Y2ggKGV4KSB7fVxufSBlbHNlIGlmICgodHlwZW9mIGRlZmluZSkgPT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XG4gIGRlZmluZShmdW5jdGlvbigpIHsgcmV0dXJuIHNlZWRyYW5kb207IH0pO1xufVxuXG4vLyBFbmQgYW5vbnltb3VzIHNjb3BlLCBhbmQgcGFzcyBpbml0aWFsIHZhbHVlcy5cbn0pKFxuICBbXSwgICAgIC8vIHBvb2w6IGVudHJvcHkgcG9vbCBzdGFydHMgZW1wdHlcbiAgTWF0aCAgICAvLyBtYXRoOiBwYWNrYWdlIGNvbnRhaW5pbmcgcmFuZG9tLCBwb3csIGFuZCBzZWVkcmFuZG9tXG4pO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==