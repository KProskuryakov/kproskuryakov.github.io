!function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(r,i,function(t){return e[t]}.bind(null,i));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=7)}([function(e,t){e.exports=function(){throw new Error("define cannot be used indirect")}},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t){(function(t){e.exports=t}).call(this,{})},function(e,t,n){"use strict";var r;Object.defineProperty(t,"__esModule",{value:!0}),function(e){e[e.NORTH=0]="NORTH",e[e.EAST=1]="EAST",e[e.SOUTH=2]="SOUTH",e[e.WEST=3]="WEST",e[e.NONE=4]="NONE",e[e.SPLIT_EAST_WEST=5]="SPLIT_EAST_WEST",e[e.SPLIT_NORTH_SOUTH=6]="SPLIT_NORTH_SOUTH"}(r||(r={})),t.default=r;const i=[r.SOUTH,r.WEST,r.NORTH,r.EAST];t.getOppositeDirection=function(e){const t=i[e];return void 0===t?r.NONE:t}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(3);function i(e){switch(e){case r.default.NORTH:return{x:0,y:-1};case r.default.EAST:return{x:1,y:0};case r.default.SOUTH:return{x:0,y:1};case r.default.WEST:return{x:-1,y:0};default:return{x:0,y:0}}}function o(...e){return e.reduce((e,t,n)=>({x:e.x+t.x,y:e.y+t.y}),{x:0,y:0})}function l(e,t,n){return n(e.x,t.x)&&n(e.y,t.y)}t.directionToTile=i,t.nextTile=function(e,t){return o(e,i(t))},t.addTiles=o,t.subTiles=function(e,t){return{x:e.x-t.x,y:e.y-t.y}},t.copyTile=function(e){return{x:e.x,y:e.y}},t.tileNotNegative=function(e){return l(e,{x:-1,y:-1},(e,t)=>e>t)},t.tileCompare=l,t.tileWithinAreaInclusive=function(e,t,n){return l(e,t,(e,t)=>e>=t)&&l(e,n,(e,t)=>e<=t)},t.tileWithinAreaExclusive=function(e,t,n){return l(e,t,(e,t)=>e>t)&&l(e,n,(e,t)=>e<t)}},function(e,t,n){"use strict";var r;Object.defineProperty(t,"__esModule",{value:!0}),function(e){e[e.BLACK=0]="BLACK",e[e.BLUE=1]="BLUE",e[e.GREEN=2]="GREEN",e[e.CYAN=3]="CYAN",e[e.RED=4]="RED",e[e.MAGENTA=5]="MAGENTA",e[e.YELLOW=6]="YELLOW",e[e.WHITE=7]="WHITE"}(r||(r={})),t.default=r,t.addColors=function(e,t){return e|t},t.colorToRGBString=function(e){return`rgb(${4==(4&e)?255:0},${2==(2&e)?255:0},${1==(1&e)?255:0})`},t.colorToName=function(e){return r[e]}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.TILE_FULL=50,t.TILE_HALF=t.TILE_FULL/2,t.tileFromPixels=function(e,n){return{x:Math.floor(e/t.TILE_FULL),y:Math.floor(n/t.TILE_FULL)}},t.tileToPixels=function(e){return{px:e.x*t.TILE_FULL,py:e.y*t.TILE_FULL}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(8),i=n(15),o=n(12),l=n(10),s=n(16),a=n(18),c=n(19),u=n(20),d=n(22),f=n(23),p=n(14);let h;t.toolbar=new c.default("assets/lasergame/toolbar.png",{x:0,y:7},8,1,x),t.lasergridComponent=new s.default("assets/lasergame/lasergrid.png",{x:0,y:0},7,7,x),t.pieceComponents=[],t.availablePieces=[];let g=i.default.Custom;function x(){d.ctx.clearRect(0,0,d.canvas.width,d.canvas.height),d.ctx.fillStyle="#9c9a9b",d.ctx.fillRect(0,0,d.canvas.width,d.canvas.height),t.lasergridComponent.draw(d.ctx),t.toolbar.draw(d.ctx)}function T(e){const n=function(e,t){const n=d.canvas.getBoundingClientRect();return{x:e-n.left*(d.canvas.width/n.width),y:t-n.top*(d.canvas.height/n.height)}}(e.clientX,e.clientY);t.lasergridComponent.processMouseClick(n.x,n.y,e.button),t.toolbar.processMouseClick(n.x,n.y,e.button),y(),h&&function(){for(const e of t.edgeLevelData)if(!e.solved)return!1;return!0}()&&(g===i.default.Seed?d.victoryP.textContent="You beat the seed level!":g===i.default.Daily&&(d.victoryP.textContent="Wow! You beat the daily level!"),d.victoryP.hidden=!1),x()}function y(){h?(function(){if(h){t.edgeLevelData=[];for(const e of h){const n=e.start;let r=!1;o.equalPaths(e,t.lasergridComponent.lasergrid.paths[e.start-1])&&(r=!0),t.edgeLevelData.push({edge:n,solved:r})}}}(),function(){d.pathsPre.innerHTML="";const e=t.lasergridComponent.lasergrid.paths;for(let n=0;n<h.length;n++){const r=h[n],i=e[r.start-1];let l=u.pathToString(r);l=o.equalPaths(i,r)?`<span style='color: green'>${l}</span>`:`<span style='color: red'>${l}</span>`,t.lasergridComponent.selectedEdge===r.start&&(l=`><b>${l}</b>`),d.pathsPre.innerHTML+=l,n<h.length-1&&(d.pathsPre.innerHTML+="\n")}}()):function(){d.pathsPre.innerHTML="";const e=t.lasergridComponent.lasergrid.paths;for(let n=0;n<20;n++){const r=e[n];let i=u.pathToString(r);t.lasergridComponent.selectedEdge===n+1&&(i=`><b>${i}</b>`),d.pathsPre.innerHTML+=i,n<19&&(d.pathsPre.innerHTML+="\n")}}()}function L(e,n){t.lasergridComponent.clear();const r=f.generateLevel(e,n);h=[],r.paths.forEach(e=>h.push(e)),t.availablePieces=r.availablePieces,y(),t.lasergridComponent.calculateDrawPathWrapper(),x()}function v(){let e=d.seedInput.value,t=parseInt(d.edgesInput.value);""===e&&(e=Date.now().toString()),(isNaN(t)||t<1||t>20)&&(t=void 0),g=i.default.Seed,d.victoryP.textContent=`Currently playing seed: ${e}`,L(e,t)}function E(){const e=(new Date).toDateString(),t=10*p(e)()+5;g=i.default.Daily,d.victoryP.textContent=`Currently playing daily level: ${e}`,L(e,t)}t.printPaths=y,window.addEventListener("load",()=>{!function(){d.canvas.addEventListener("click",T),d.canvas.addEventListener("contextmenu",e=>{e.preventDefault(),T(e)}),d.seedLevelButton.addEventListener("click",v),d.dailyLevelButton.addEventListener("click",E),t.pieceComponents[l.default.FORWARD_SLASH]=new a.default("assets/lasergame/pieces/mirror_forwardslash.png",x),t.pieceComponents[l.default.BACK_SLASH]=new a.default("assets/lasergame/pieces/mirror_backslash.png",x),t.pieceComponents[l.default.BLACK_HOLE]=new a.default("assets/lasergame/pieces/mirror_blackhole.png",x),t.pieceComponents[l.default.HORI_SPLIT]=new a.default("assets/lasergame/pieces/mirror_sidesplit.png",x),t.pieceComponents[l.default.VERT_SPLIT]=new a.default("assets/lasergame/pieces/mirror_upsplit.png",x),t.pieceComponents[l.default.BLUE]=new a.default("assets/lasergame/pieces/swatch_blue.png",x),t.pieceComponents[l.default.RED]=new a.default("assets/lasergame/pieces/swatch_red.png",x),t.pieceComponents[l.default.GREEN]=new a.default("assets/lasergame/pieces/swatch_green.png",x);for(let e=0;e<8;e++){const n={pieceID:e,tile:{x:-1,y:-1},index:e};t.availablePieces[e]=n}r.calculateAllEndings(t.lasergridComponent.lasergrid),y(),t.lasergridComponent.calculateDrawPathWrapper()}()})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(5),i=n(3),o=n(9),l=n(10),s=n(4);function a(e){const t=e.x,n=e.y;return-1===n&&t>-1&&t<5?1+t:5===t&&n>-1&&n<5?6+n:5===n&&t>-1&&t<5?15-t:-1===t&&n>-1&&n<5?20-n:0}function c(e){if(e<6)return{tile:{x:e-1,y:-1},dir:i.default.SOUTH,color:r.default.BLACK};if(e<11)return{tile:{x:5,y:e-6},dir:i.default.WEST,color:r.default.BLACK};if(e<16)return{tile:{x:15-e,y:5},dir:i.default.NORTH,color:r.default.BLACK};if(e<21)return{tile:{x:-1,y:20-e},dir:i.default.EAST,color:r.default.BLACK};throw new Error("Incorrect Edge")}function u(e,t){if(e.grid[t.y])return e.grid[t.y][t.x]}function d(e,t){return s.tileWithinAreaExclusive(t,{x:-1,y:-1},{x:e.width,y:e.length})}function f(e,t){return e.grid[t.tile.y][t.tile.x]=void 0,t.tile={x:-1,y:-1},p(e),t}function p(e){const t=[];for(let n=0;n<20;n++)t[n]={start:n+1,endings:h(e,n+1)};e.paths=t}function h(e,t){const n=[];return function e(t,r){for(let c=0;c<100;c++){if(r.tile=s.nextTile(r.tile,r.dir),!d(t,r.tile)){const e=a(r.tile);return void n.push({end:e,color:r.color})}const c=u(t,r.tile);if(c)switch(l.applyPieceToLaser(r,c.pieceID),r.dir){case i.default.SPLIT_NORTH_SOUTH:r.dir=i.default.NORTH,e(t,{tile:r.tile,dir:i.default.SOUTH,color:r.color});break;case i.default.SPLIT_EAST_WEST:r.dir=i.default.EAST,e(t,{tile:r.tile,dir:i.default.WEST,color:r.color});break;case i.default.NONE:return void n.push({end:o.End.Blocked,color:r.color})}}n.push({end:o.End.Loop,color:r.color})}(e,c(t)),n.sort((e,t)=>e.end<t.end?-1:1),n}t.makeDefaultGrid=function(){const e=[];for(let t=0;t<5;t++)e[t]=[];const t={paths:[],grid:e,length:5,width:5};return p(t),t},t.tileToEdgeNumber=a,t.edgeNumberToLaser=c,t.getPieceFromGrid=u,t.isValidSpace=d,t.removePieceFromGrid=f,t.setPieceInGrid=function(e,t,n){d(e,t.tile)&&(e.grid[t.tile.y][t.tile.x]=void 0);const r=u(e,n);let i=void 0;return r&&(i=f(e,r)),t.tile=n,e.grid[n.y][n.x]=t,p(e),i},t.calculateAllEndings=p},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){e[e.Blocked=-2]="Blocked",e[e.Loop=-1]="Loop"}(t.End||(t.End={})),t.endingsEqual=function(e,t){return e.end===t.end&&e.color===t.color}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(5),i=r,o=n(3);var l;!function(e){e[e.FORWARD_SLASH=0]="FORWARD_SLASH",e[e.BACK_SLASH=1]="BACK_SLASH",e[e.BLACK_HOLE=2]="BLACK_HOLE",e[e.HORI_SPLIT=3]="HORI_SPLIT",e[e.VERT_SPLIT=4]="VERT_SPLIT",e[e.RED=5]="RED",e[e.BLUE=6]="BLUE",e[e.GREEN=7]="GREEN"}(l||(l={})),t.default=l;const s=[{dirs:[o.default.EAST,o.default.NORTH,o.default.WEST,o.default.SOUTH]},{dirs:[o.default.WEST,o.default.SOUTH,o.default.EAST,o.default.NORTH]},{dirs:[o.default.NONE,o.default.NONE,o.default.NONE,o.default.NONE]},{dirs:[o.default.EAST,o.default.NONE,o.default.EAST,o.default.SPLIT_NORTH_SOUTH]},{dirs:[o.default.NONE,o.default.NORTH,o.default.SPLIT_EAST_WEST,o.default.NORTH]},{color:r.default.RED},{color:r.default.BLUE},{color:r.default.GREEN}];t.applyPieceToLaser=function(e,t){const n=s[t];return n.dirs&&(e.dir=n.dirs[e.dir]),n.color&&(e.color=i.addColors(e.color,n.color)),e}},,function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(9);t.equalPaths=function(e,t){if(e.endings.length!==t.endings.length)return!1;for(let n=0;n<e.endings.length;n++)if(!r.endingsEqual(e.endings[n],t.endings[n]))return!1;return!0}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(4),i=n(6);t.default=class{constructor(e,t,n,r,i,o=0,l=0){this.img=new Image,this.img.onload=()=>{i()},this.img.src=e,this.tile=t,this.widthInTiles=n,this.heightInTiles=r,this.offsetX=o,this.offsetY=l}draw(e){const t=i.tileToPixels(this.tile);e.drawImage(this.img,t.px+this.offsetX,t.py+this.offsetY)}processMouseClick(e,t,n){const o=r.subTiles(i.tileFromPixels(e,t),this.tile);return r.tileWithinAreaExclusive(o,{x:-1,y:-1},{x:this.widthInTiles,y:this.heightInTiles})?o:null}}},function(e,t,n){var r=n(24),i=n(25),o=n(26),l=n(27),s=n(28),a=n(29),c=n(30);c.alea=r,c.xor128=i,c.xorwow=o,c.xorshift7=l,c.xor4096=s,c.tychei=a,e.exports=c},function(e,t,n){"use strict";var r;Object.defineProperty(t,"__esModule",{value:!0}),function(e){e[e.Daily=0]="Daily",e[e.Seed=1]="Seed",e[e.Custom=2]="Custom"}(r||(r={})),t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(5),i=n(3),o=n(8),l=n(17),s=n(10),a=n(4),c=n(7),u=n(6),d=n(13);class f extends d.default{constructor(e,t,n,r,i,l=0,s=0){super(e,t,n,r,i,l,s),this.lasergrid=o.makeDefaultGrid(),this.selectedEdge=1,this.drawPath=[]}draw(e){super.draw(e);for(const t of c.availablePieces)a.tileWithinAreaInclusive(t.tile,{x:0,y:0},{x:4,y:4})&&c.pieceComponents[t.pieceID].drawAt(a.addTiles(this.tile,t.tile,{x:1,y:1}),e);for(const t of this.drawPath){e.beginPath(),e.strokeStyle=r.colorToRGBString(t.color);const n=u.tileToPixels(a.addTiles(t.tile,{x:1,y:1}));n.px+=u.TILE_HALF,n.py+=u.TILE_HALF,e.moveTo(n.px,n.py);const i=a.directionToTile(t.dir);e.lineTo(n.px+i.x*u.TILE_HALF,n.py+i.y*u.TILE_HALF),e.stroke()}let t=u.tileToPixels(a.addTiles(o.edgeNumberToLaser(this.selectedEdge).tile,{x:1,y:1}));if(e.strokeStyle="#FFFFFF",e.beginPath(),this.selectedEdge<6?(e.moveTo(t.px+u.TILE_HALF-5,t.py+u.TILE_FULL-5),e.lineTo(t.px+u.TILE_HALF,t.py+u.TILE_FULL),e.lineTo(t.px+u.TILE_HALF+5,t.py+u.TILE_FULL-5)):this.selectedEdge<11?(e.moveTo(t.px+5,t.py+u.TILE_HALF-5),e.lineTo(t.px,t.py+u.TILE_HALF),e.lineTo(t.px+5,t.py+u.TILE_HALF+5)):this.selectedEdge<16?(e.moveTo(t.px+u.TILE_HALF-5,t.py+5),e.lineTo(t.px+u.TILE_HALF,t.py),e.lineTo(t.px+u.TILE_HALF+5,t.py+5)):this.selectedEdge<21&&(e.moveTo(t.px+u.TILE_FULL-5,t.py+u.TILE_HALF-5),e.lineTo(t.px+u.TILE_FULL,t.py+u.TILE_HALF),e.lineTo(t.px+u.TILE_FULL-5,t.py+u.TILE_HALF+5)),e.stroke(),c.edgeLevelData){e.globalAlpha=.1;for(const n of c.edgeLevelData)t=u.tileToPixels(a.addTiles(o.edgeNumberToLaser(n.edge).tile,{x:1,y:1})),e.fillStyle=n.solved?"#00FF00":"#FF0000",e.fillRect(t.px,t.py,u.TILE_FULL,u.TILE_FULL);e.globalAlpha=1}for(let n=1;n<=20;n++)t=u.tileToPixels(a.addTiles(o.edgeNumberToLaser(n).tile,{x:1,y:1})),e.fillStyle="#000000",e.font="24px sans-serif",e.textBaseline="middle",e.fillText(n.toString(),t.px+u.TILE_HALF-e.measureText(n.toString()).width/2,t.py+u.TILE_HALF)}clear(){this.lasergrid=o.makeDefaultGrid(),this.selectedEdge=1,this.drawPath=[]}processMouseClick(e,t,n){const r=super.processMouseClick(e,t,n);if(console.log(n),null===r)return null;if(a.tileWithinAreaInclusive(r,{x:1,y:1},{x:5,y:5})){const e=a.subTiles(r,{x:1,y:1}),t=o.getPieceFromGrid(this.lasergrid,e);if(t){const e=o.removePieceFromGrid(this.lasergrid,t);0===n&&(c.toolbar.selectedPiece=e.index)}else o.setPieceInGrid(this.lasergrid,c.availablePieces[c.toolbar.selectedPiece],e);c.printPaths(),this.calculateDrawPathWrapper()}const i=o.tileToEdgeNumber(a.addTiles(r,{x:-1,y:-1}));return 0!==i&&(this.selectedEdge=i),this.calculateDrawPathWrapper(),r}calculateDrawPathWrapper(){this.drawPath=[],this.calculateDrawPath(o.edgeNumberToLaser(this.selectedEdge))}calculateDrawPath(e){for(let t=0;t<100;t++){if(e.tile=a.nextTile(e.tile,e.dir),!a.tileWithinAreaInclusive(e.tile,{x:0,y:0},{x:4,y:4}))return;const t=o.getPieceFromGrid(this.lasergrid,e.tile);if(this.drawPath.push(l.getOppositeLaserSegment(e)),t)switch(s.applyPieceToLaser(e,t.pieceID),e.dir){case i.default.SPLIT_NORTH_SOUTH:e.dir=i.default.NORTH,this.drawPath.push(l.getOppositeLaserSegment(e)),this.calculateDrawPath(l.getOppositeLaserSegment(e));break;case i.default.SPLIT_EAST_WEST:e.dir=i.default.EAST,this.drawPath.push(l.getOppositeLaserSegment(e)),this.calculateDrawPath(l.getOppositeLaserSegment(e));break;case i.default.NONE:return}this.drawPath.push(l.copyLaserSegment(e))}}}t.default=f},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(3),i=n(4);t.getOppositeLaserSegment=function(e){return{tile:i.copyTile(e.tile),dir:r.getOppositeDirection(e.dir),color:e.color}},t.copyLaserSegment=function(e){return{tile:i.copyTile(e.tile),dir:e.dir,color:e.color}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(6);t.default=class{constructor(e,t){this.isPlaced=!1,this.img=new Image,this.img.onload=()=>{t()},this.img.src=e}drawAt(e,t){const n=r.tileToPixels(e);t.drawImage(this.img,n.px,n.py)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(4),i=n(7),o=n(6),l=n(13);class s extends l.default{constructor(e,t,n,r,i,o=0,l=0){super(e,t,n,r,i,o,l),this.selectedPiece=0}draw(e){super.draw(e);for(let t=0;t<i.availablePieces.length;t++)i.pieceComponents[i.availablePieces[t].pieceID].drawAt(r.addTiles(this.tile,{x:t,y:0}),e);e.fillStyle="green",e.globalAlpha=.2;let t=o.tileToPixels(r.addTiles(this.tile,{x:this.selectedPiece,y:0}));e.fillRect(t.px,t.py,o.TILE_FULL,o.TILE_FULL),e.fillStyle="red";for(let n=0;n<i.availablePieces.length;n++){const l=i.availablePieces[n];n!==this.selectedPiece&&r.tileNotNegative(l.tile)&&(t=o.tileToPixels(r.addTiles(this.tile,{x:n,y:0})),e.fillRect(t.px,t.py,o.TILE_FULL,o.TILE_FULL))}e.globalAlpha=1}processMouseClick(e,t,n){const r=super.processMouseClick(e,t,n);return null!==r&&(this.selectedPiece=r.x),r}getSelectedPieceComponent(){return i.pieceComponents[this.selectedPiece]}}t.default=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(21);function i(e){let t=`${e.start}`;return e.start<10?t+="  -> ":t+=" -> ",t}function o(e){if(e.endings.length>1){let t=`{${r.endingToString(e.endings[0])}, `;for(let n=1;n<e.endings.length-1;n++)t+=`${r.endingToString(e.endings[n])}, `;return t+=`${r.endingToString(e.endings[e.endings.length-1])}}`,t}return r.endingToString(e.endings[0])}t.pathToString=function(e){return i(e)+o(e)},t.startToString=i,t.endingListToString=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(5),i=n(9);t.endingToString=function(e){const t=r.colorToName(e.color);return e.end===i.End.Blocked?`blocked ${t}`:e.end===i.End.Loop?`loop ${t}`:`${e.end} ${t}`}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.importPre=document.getElementById("imported-pre"),t.pathsPre=document.getElementById("paths-pre"),t.canvas=document.getElementById("laser-game-canvas"),t.victoryP=document.getElementById("victory-p"),t.seedLevelButton=document.getElementById("seed-level"),t.dailyLevelButton=document.getElementById("daily-level"),t.edgesInput=document.getElementById("edges"),t.seedInput=document.getElementById("seed"),t.ctx=t.canvas.getContext("2d")},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(12),i=n(14),o=n(8),l=o.makeDefaultGrid();function s(e,t){let n,r,i=e.length;for(;i;)r=Math.floor(t()*i--),n=e[i],e[i]=e[r],e[r]=n}t.generateLevel=function(e=Date.now().toString(),t=5){const n=i(e),a=[],c=[],u=[];for(let e=0;e<8;e++)u[e]={pieceID:Math.floor(8*n()),tile:{x:-1,y:-1},index:e};const d=o.makeDefaultGrid();u.forEach(e=>{for(;;){const t={x:Math.floor(5*n()),y:Math.floor(5*n())};if(!o.getPieceFromGrid(d,t)){o.setPieceInGrid(d,e,t);break}}});const f=d.paths;for(let e=0;e<f.length;e++)r.equalPaths(f[e],l.paths[e])?c.push(f[e]):a.push(f[e]);s(a,n);let p=a.slice(0,t);p.length<t&&(s(c,n),p=p.concat(c.slice(0,t-p.length))),p.sort((e,t)=>e.start<t.start?-1:1);for(const e of u)e.tile={x:-1,y:-1};return{paths:p,availablePieces:u}}},function(e,t,n){(function(e){var r;!function(e,i,o){function l(e){var t,n=this,r=(t=4022871197,function(e){e=e.toString();for(var n=0;n<e.length;n++){var r=.02519603282416938*(t+=e.charCodeAt(n));r-=t=r>>>0,t=(r*=t)>>>0,t+=4294967296*(r-=t)}return 2.3283064365386963e-10*(t>>>0)});n.next=function(){var e=2091639*n.s0+2.3283064365386963e-10*n.c;return n.s0=n.s1,n.s1=n.s2,n.s2=e-(n.c=0|e)},n.c=1,n.s0=r(" "),n.s1=r(" "),n.s2=r(" "),n.s0-=r(e),n.s0<0&&(n.s0+=1),n.s1-=r(e),n.s1<0&&(n.s1+=1),n.s2-=r(e),n.s2<0&&(n.s2+=1),r=null}function s(e,t){return t.c=e.c,t.s0=e.s0,t.s1=e.s1,t.s2=e.s2,t}function a(e,t){var n=new l(e),r=t&&t.state,i=n.next;return i.int32=function(){return 4294967296*n.next()|0},i.double=function(){return i()+11102230246251565e-32*(2097152*i()|0)},i.quick=i,r&&("object"==typeof r&&s(r,n),i.state=function(){return s(n,{})}),i}i&&i.exports?i.exports=a:n(0)&&n(2)?void 0===(r=function(){return a}.call(t,n,t,i))||(i.exports=r):this.alea=a}(0,e,n(0))}).call(this,n(1)(e))},function(e,t,n){(function(e){var r;!function(e,i,o){function l(e){var t=this,n="";t.x=0,t.y=0,t.z=0,t.w=0,t.next=function(){var e=t.x^t.x<<11;return t.x=t.y,t.y=t.z,t.z=t.w,t.w^=t.w>>>19^e^e>>>8},e===(0|e)?t.x=e:n+=e;for(var r=0;r<n.length+64;r++)t.x^=0|n.charCodeAt(r),t.next()}function s(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t}function a(e,t){var n=new l(e),r=t&&t.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},i.int32=n.next,i.quick=i,r&&("object"==typeof r&&s(r,n),i.state=function(){return s(n,{})}),i}i&&i.exports?i.exports=a:n(0)&&n(2)?void 0===(r=function(){return a}.call(t,n,t,i))||(i.exports=r):this.xor128=a}(0,e,n(0))}).call(this,n(1)(e))},function(e,t,n){(function(e){var r;!function(e,i,o){function l(e){var t=this,n="";t.next=function(){var e=t.x^t.x>>>2;return t.x=t.y,t.y=t.z,t.z=t.w,t.w=t.v,(t.d=t.d+362437|0)+(t.v=t.v^t.v<<4^e^e<<1)|0},t.x=0,t.y=0,t.z=0,t.w=0,t.v=0,e===(0|e)?t.x=e:n+=e;for(var r=0;r<n.length+64;r++)t.x^=0|n.charCodeAt(r),r==n.length&&(t.d=t.x<<10^t.x>>>4),t.next()}function s(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t.v=e.v,t.d=e.d,t}function a(e,t){var n=new l(e),r=t&&t.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},i.int32=n.next,i.quick=i,r&&("object"==typeof r&&s(r,n),i.state=function(){return s(n,{})}),i}i&&i.exports?i.exports=a:n(0)&&n(2)?void 0===(r=function(){return a}.call(t,n,t,i))||(i.exports=r):this.xorwow=a}(0,e,n(0))}).call(this,n(1)(e))},function(e,t,n){(function(e){var r;!function(e,i,o){function l(e){var t=this;t.next=function(){var e,n,r=t.x,i=t.i;return e=r[i],n=(e^=e>>>7)^e<<24,n^=(e=r[i+1&7])^e>>>10,n^=(e=r[i+3&7])^e>>>3,n^=(e=r[i+4&7])^e<<7,e=r[i+7&7],n^=(e^=e<<13)^e<<9,r[i]=n,t.i=i+1&7,n},function(e,t){var n,r=[];if(t===(0|t))r[0]=t;else for(t=""+t,n=0;n<t.length;++n)r[7&n]=r[7&n]<<15^t.charCodeAt(n)+r[n+1&7]<<13;for(;r.length<8;)r.push(0);for(n=0;n<8&&0===r[n];++n);for(8==n?r[7]=-1:r[n],e.x=r,e.i=0,n=256;n>0;--n)e.next()}(t,e)}function s(e,t){return t.x=e.x.slice(),t.i=e.i,t}function a(e,t){null==e&&(e=+new Date);var n=new l(e),r=t&&t.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},i.int32=n.next,i.quick=i,r&&(r.x&&s(r,n),i.state=function(){return s(n,{})}),i}i&&i.exports?i.exports=a:n(0)&&n(2)?void 0===(r=function(){return a}.call(t,n,t,i))||(i.exports=r):this.xorshift7=a}(0,e,n(0))}).call(this,n(1)(e))},function(e,t,n){(function(e){var r;!function(e,i,o){function l(e){var t=this;t.next=function(){var e,n,r=t.w,i=t.X,o=t.i;return t.w=r=r+1640531527|0,n=i[o+34&127],e=i[o=o+1&127],n^=n<<13,e^=e<<17,n^=n>>>15,e^=e>>>12,n=i[o]=n^e,t.i=o,n+(r^r>>>16)|0},function(e,t){var n,r,i,o,l,s=[],a=128;for(t===(0|t)?(r=t,t=null):(t+="\0",r=0,a=Math.max(a,t.length)),i=0,o=-32;o<a;++o)t&&(r^=t.charCodeAt((o+32)%t.length)),0===o&&(l=r),r^=r<<10,r^=r>>>15,r^=r<<4,r^=r>>>13,o>=0&&(l=l+1640531527|0,i=0==(n=s[127&o]^=r+l)?i+1:0);for(i>=128&&(s[127&(t&&t.length||0)]=-1),i=127,o=512;o>0;--o)r=s[i+34&127],n=s[i=i+1&127],r^=r<<13,n^=n<<17,r^=r>>>15,n^=n>>>12,s[i]=r^n;e.w=l,e.X=s,e.i=i}(t,e)}function s(e,t){return t.i=e.i,t.w=e.w,t.X=e.X.slice(),t}function a(e,t){null==e&&(e=+new Date);var n=new l(e),r=t&&t.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},i.int32=n.next,i.quick=i,r&&(r.X&&s(r,n),i.state=function(){return s(n,{})}),i}i&&i.exports?i.exports=a:n(0)&&n(2)?void 0===(r=function(){return a}.call(t,n,t,i))||(i.exports=r):this.xor4096=a}(0,e,n(0))}).call(this,n(1)(e))},function(e,t,n){(function(e){var r;!function(e,i,o){function l(e){var t=this,n="";t.next=function(){var e=t.b,n=t.c,r=t.d,i=t.a;return e=e<<25^e>>>7^n,n=n-r|0,r=r<<24^r>>>8^i,i=i-e|0,t.b=e=e<<20^e>>>12^n,t.c=n=n-r|0,t.d=r<<16^n>>>16^i,t.a=i-e|0},t.a=0,t.b=0,t.c=-1640531527,t.d=1367130551,e===Math.floor(e)?(t.a=e/4294967296|0,t.b=0|e):n+=e;for(var r=0;r<n.length+20;r++)t.b^=0|n.charCodeAt(r),t.next()}function s(e,t){return t.a=e.a,t.b=e.b,t.c=e.c,t.d=e.d,t}function a(e,t){var n=new l(e),r=t&&t.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},i.int32=n.next,i.quick=i,r&&("object"==typeof r&&s(r,n),i.state=function(){return s(n,{})}),i}i&&i.exports?i.exports=a:n(0)&&n(2)?void 0===(r=function(){return a}.call(t,n,t,i))||(i.exports=r):this.tychei=a}(0,e,n(0))}).call(this,n(1)(e))},function(e,t,n){var r;!function(i,o){var l,s=(0,eval)("this"),a=256,c=6,u="random",d=o.pow(a,c),f=o.pow(2,52),p=2*f,h=a-1;function g(e,t,n){var r=[],h=y(function e(t,n){var r,i=[],o=typeof t;if(n&&"object"==o)for(r in t)try{i.push(e(t[r],n-1))}catch(e){}return i.length?i:"string"==o?t:t+"\0"}((t=1==t?{entropy:!0}:t||{}).entropy?[e,L(i)]:null==e?function(){try{var e;return l&&(e=l.randomBytes)?e=e(a):(e=new Uint8Array(a),(s.crypto||s.msCrypto).getRandomValues(e)),L(e)}catch(e){var t=s.navigator,n=t&&t.plugins;return[+new Date,s,n,s.screen,L(i)]}}():e,3),r),g=new x(r),v=function(){for(var e=g.g(c),t=d,n=0;e<f;)e=(e+n)*a,t*=a,n=g.g(1);for(;e>=p;)e/=2,t/=2,n>>>=1;return(e+n)/t};return v.int32=function(){return 0|g.g(4)},v.quick=function(){return g.g(4)/4294967296},v.double=v,y(L(g.S),i),(t.pass||n||function(e,t,n,r){return r&&(r.S&&T(r,g),e.state=function(){return T(g,{})}),n?(o[u]=e,t):e})(v,h,"global"in t?t.global:this==o,t.state)}function x(e){var t,n=e.length,r=this,i=0,o=r.i=r.j=0,l=r.S=[];for(n||(e=[n++]);i<a;)l[i]=i++;for(i=0;i<a;i++)l[i]=l[o=h&o+e[i%n]+(t=l[i])],l[o]=t;(r.g=function(e){for(var t,n=0,i=r.i,o=r.j,l=r.S;e--;)t=l[i=h&i+1],n=n*a+l[h&(l[i]=l[o=h&o+t])+(l[o]=t)];return r.i=i,r.j=o,n})(a)}function T(e,t){return t.i=e.i,t.j=e.j,t.S=e.S.slice(),t}function y(e,t){for(var n,r=e+"",i=0;i<r.length;)t[h&i]=h&(n^=19*t[h&i])+r.charCodeAt(i++);return L(t)}function L(e){return String.fromCharCode.apply(0,e)}if(o["seed"+u]=g,y(o.random(),i),e.exports){e.exports=g;try{l=n(31)}catch(e){}}else void 0===(r=function(){return g}.call(t,n,t,e))||(e.exports=r)}([],Math)},function(e,t){}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2FtZC1kZWZpbmUuanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL21vZHVsZS5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vYW1kLW9wdGlvbnMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2xhc2VyZ2FtZS9EaXJlY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2xhc2VyZ2FtZS9UaWxlLnRzIiwid2VicGFjazovLy8uL3NyYy9sYXNlcmdhbWUvQ29sb3IudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2xhc2VyZ2FtZS9mcm9udGVuZC9Gcm9udGVuZFRpbGUudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2xhc2VyZ2FtZS9mcm9udGVuZC9Gcm9udGVuZExhc2VyZ2FtZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbGFzZXJnYW1lL0xhc2VyR3JpZC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbGFzZXJnYW1lL0VuZGluZy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbGFzZXJnYW1lL1BpZWNlSUQudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2xhc2VyZ2FtZS9QYXRoLnRzIiwid2VicGFjazovLy8uL3NyYy9sYXNlcmdhbWUvZnJvbnRlbmQvY29tcG9uZW50cy9DYW52YXNDb21wb25lbnQudHMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NlZWRyYW5kb20vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2xhc2VyZ2FtZS9MZXZlbFR5cGUudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2xhc2VyZ2FtZS9mcm9udGVuZC9jb21wb25lbnRzL0xhc2VyR3JpZENvbXBvbmVudC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbGFzZXJnYW1lL0xhc2VyU2VnbWVudC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbGFzZXJnYW1lL2Zyb250ZW5kL2NvbXBvbmVudHMvUGllY2VDb21wb25lbnQudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2xhc2VyZ2FtZS9mcm9udGVuZC9jb21wb25lbnRzL1Rvb2xiYXJDb21wb25lbnQudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2xhc2VyZ2FtZS9mcm9udGVuZC9Gcm9udGVuZFBhdGgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2xhc2VyZ2FtZS9mcm9udGVuZC9Gcm9udGVuZEVuZGluZy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbGFzZXJnYW1lL2Zyb250ZW5kL0hUTUxFbGVtZW50cy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbGFzZXJnYW1lL0xldmVsR2VuZXJhdG9yLnRzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zZWVkcmFuZG9tL2xpYi9hbGVhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zZWVkcmFuZG9tL2xpYi94b3IxMjguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NlZWRyYW5kb20vbGliL3hvcndvdy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2VlZHJhbmRvbS9saWIveG9yc2hpZnQ3LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zZWVkcmFuZG9tL2xpYi94b3I0MDk2LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zZWVkcmFuZG9tL2xpYi90eWNoZWkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NlZWRyYW5kb20vc2VlZHJhbmRvbS5qcyJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsIkVycm9yIiwid2VicGFja1BvbHlmaWxsIiwiZGVwcmVjYXRlIiwicGF0aHMiLCJjaGlsZHJlbiIsIl9fd2VicGFja19hbWRfb3B0aW9uc19fIiwiRGlyZWN0aW9uIiwib3Bwb3NpdGVEaXJlY3Rpb24iLCJTT1VUSCIsIldFU1QiLCJOT1JUSCIsIkVBU1QiLCJkaXIiLCJvcHBEaXIiLCJ1bmRlZmluZWQiLCJOT05FIiwiZGlyZWN0aW9uVG9UaWxlIiwiZGlyZWN0aW9uIiwieCIsInkiLCJhZGRUaWxlcyIsInRpbGVzIiwicmVkdWNlIiwidiIsIl8iLCJ0aWxlQ29tcGFyZSIsImEiLCJiIiwiY29tcGFyZSIsInRpbGUiLCJtaW4iLCJtYXgiLCJDb2xvciIsImNvbG9yIiwiVElMRV9GVUxMIiwiVElMRV9IQUxGIiwiTWF0aCIsImZsb29yIiwicHgiLCJweSIsImN1cnJlbnRMZXZlbCIsInRvb2xiYXIiLCJkcmF3IiwibGFzZXJncmlkQ29tcG9uZW50IiwicGllY2VDb21wb25lbnRzIiwiYXZhaWxhYmxlUGllY2VzIiwibGV2ZWxUeXBlIiwiQ3VzdG9tIiwiY3R4IiwiY2xlYXJSZWN0IiwiY2FudmFzIiwid2lkdGgiLCJoZWlnaHQiLCJmaWxsU3R5bGUiLCJmaWxsUmVjdCIsIm9uQ2xpY2siLCJldmVudCIsImxvYyIsImJib3giLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJsZWZ0IiwidG9wIiwid2luZG93VG9DYW52YXMiLCJjbGllbnRYIiwiY2xpZW50WSIsInByb2Nlc3NNb3VzZUNsaWNrIiwiYnV0dG9uIiwicHJpbnRQYXRocyIsImRhdGEiLCJlZGdlTGV2ZWxEYXRhIiwic29sdmVkIiwiY2hlY2tWaWN0b3J5IiwiU2VlZCIsInZpY3RvcnlQIiwidGV4dENvbnRlbnQiLCJEYWlseSIsImhpZGRlbiIsInBhdGgiLCJlZGdlIiwic3RhcnQiLCJlcXVhbFBhdGhzIiwibGFzZXJncmlkIiwicHVzaCIsInBvcHVsYXRlRWRnZUxldmVsRGF0YSIsInBhdGhzUHJlIiwiaW5uZXJIVE1MIiwibGVuZ3RoIiwibGV2ZWxQYXRoIiwiY3VyUGF0aCIsImxpbmUiLCJwYXRoVG9TdHJpbmciLCJzZWxlY3RlZEVkZ2UiLCJwcmludExldmVsUGF0aHMiLCJwcmludEFsbFBhdGhzIiwic2V0TmV3TGV2ZWwiLCJzZWVkIiwiZWRnZXMiLCJjbGVhciIsIm5ld0xldmVsIiwiZ2VuZXJhdGVMZXZlbCIsImZvckVhY2giLCJjYWxjdWxhdGVEcmF3UGF0aFdyYXBwZXIiLCJzZWVkTGV2ZWwiLCJzZWVkSW5wdXQiLCJwYXJzZUludCIsImVkZ2VzSW5wdXQiLCJEYXRlIiwibm93IiwidG9TdHJpbmciLCJpc05hTiIsImRhaWx5TGV2ZWwiLCJ0b0RhdGVTdHJpbmciLCJzZWVkcmFuZG9tIiwicm5nIiwid2luZG93IiwiYWRkRXZlbnRMaXN0ZW5lciIsImUiLCJwcmV2ZW50RGVmYXVsdCIsInNlZWRMZXZlbEJ1dHRvbiIsImRhaWx5TGV2ZWxCdXR0b24iLCJGT1JXQVJEX1NMQVNIIiwiQkFDS19TTEFTSCIsIkJMQUNLX0hPTEUiLCJIT1JJX1NQTElUIiwiVkVSVF9TUExJVCIsIkJMVUUiLCJSRUQiLCJHUkVFTiIsInBpZWNlIiwicGllY2VJRCIsImluZGV4IiwiY2FsY3VsYXRlQWxsRW5kaW5ncyIsImluaXQiLCJ0aWxlVG9FZGdlTnVtYmVyIiwiZWRnZU51bWJlclRvTGFzZXIiLCJCTEFDSyIsImdldFBpZWNlRnJvbUdyaWQiLCJsYXNlckdyaWQiLCJncmlkIiwiaXNWYWxpZFNwYWNlIiwidGlsZVdpdGhpbkFyZWFFeGNsdXNpdmUiLCJyZW1vdmVQaWVjZUZyb21HcmlkIiwiZW5kaW5ncyIsImNhbGN1bGF0ZUVuZGluZ0xpc3QiLCJlbmRpbmdMaXN0IiwidHJhY2tPbmVFbmRpbmciLCJsYXNlciIsIm5leHRUaWxlIiwiZW5kRWRnZSIsImVuZCIsImFwcGx5UGllY2VUb0xhc2VyIiwiU1BMSVRfTk9SVEhfU09VVEgiLCJTUExJVF9FQVNUX1dFU1QiLCJFbmQiLCJCbG9ja2VkIiwiTG9vcCIsInNvcnQiLCJuZXdHcmlkIiwiY3VycmVudFBpZWNlIiwicmVtb3ZlZFBpZWNlIiwiUGllY2VJRCIsInBpZWNlUnVsZUxpc3QiLCJkaXJzIiwicGllY2VSdWxlcyIsImNvbG9yTWFuYWdlciIsImFkZENvbG9ycyIsImVuZGluZ3NFcXVhbCIsInNyYyIsIndpZHRoSW5UaWxlcyIsImhlaWdodEluVGlsZXMiLCJvZmZzZXRYIiwib2Zmc2V0WSIsInRoaXMiLCJpbWciLCJJbWFnZSIsIm9ubG9hZCIsInRpbGVUb1BpeGVscyIsImRyYXdJbWFnZSIsIl9idXR0b24iLCJyZWxhdGl2ZVRpbGUiLCJzdWJUaWxlcyIsInRpbGVGcm9tUGl4ZWxzIiwiYWxlYSIsInhvcjEyOCIsInhvcndvdyIsInhvcnNoaWZ0NyIsInhvcjQwOTYiLCJ0eWNoZWkiLCJzciIsIkxldmVsVHlwZSIsIkxhc2VyR3JpZENvbXBvbmVudCIsInN1cGVyIiwibWFrZURlZmF1bHRHcmlkIiwiZHJhd1BhdGgiLCJ0aWxlV2l0aGluQXJlYUluY2x1c2l2ZSIsImRyYXdBdCIsImJlZ2luUGF0aCIsInN0cm9rZVN0eWxlIiwiY29sb3JUb1JHQlN0cmluZyIsIm1vdmVUbyIsInRpbGVtYXAiLCJsaW5lVG8iLCJzdHJva2UiLCJzZWxlY3RlZEVkZ2VQaXhlbHMiLCJnbG9iYWxBbHBoYSIsImVkZ2VEYXRhIiwiZm9udCIsInRleHRCYXNlbGluZSIsImZpbGxUZXh0IiwibWVhc3VyZVRleHQiLCJjb25zb2xlIiwibG9nIiwic2VsZWN0ZWRQaWVjZSIsInNldFBpZWNlSW5HcmlkIiwibmV3RWRnZSIsImNhbGN1bGF0ZURyYXdQYXRoIiwiZ2V0T3Bwb3NpdGVMYXNlclNlZ21lbnQiLCJjb3B5TGFzZXJTZWdtZW50IiwiY29weVRpbGUiLCJnZXRPcHBvc2l0ZURpcmVjdGlvbiIsImlzUGxhY2VkIiwicG9zIiwiVG9vbGJhckNvbXBvbmVudCIsInRpbGVOb3ROZWdhdGl2ZSIsInN0YXJ0VG9TdHJpbmciLCJzdHIiLCJlbmRpbmdMaXN0VG9TdHJpbmciLCJlbmRpbmdUb1N0cmluZyIsImN1ckVuZGluZyIsImVuZGluZyIsImNvbG9yU3RyaW5nIiwiY29sb3JUb05hbWUiLCJpbXBvcnRQcmUiLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwiZ2V0Q29udGV4dCIsImRlZmF1bHRHcmlkIiwic2h1ZmZsZSIsIm51bVBhdGhzIiwiaW50ZXJlc3RpbmdQYXRocyIsImJvcmluZ1BhdGhzIiwicmFuZG9tR3JpZCIsInJhbmRUaWxlIiwiZ3JpZFBhdGhzIiwicmFuZG9tUGF0aHMiLCJzbGljZSIsImNvbmNhdCIsImdsb2JhbCIsImRlZmluZSIsIkFsZWEiLCJtZSIsIm1hc2giLCJoIiwiY2hhckNvZGVBdCIsIm5leHQiLCJzMCIsInMxIiwiczIiLCJjb3B5IiwiZiIsImltcGwiLCJvcHRzIiwieGciLCJzdGF0ZSIsInBybmciLCJpbnQzMiIsImRvdWJsZSIsInF1aWNrIiwiWG9yR2VuIiwic3Ryc2VlZCIsInoiLCJ3IiwiayIsInJlc3VsdCIsIlgiLCJqIiwibGltaXQiLCJwb29sIiwibWF0aCIsIm5vZGVjcnlwdG8iLCJldmFsIiwiY2h1bmtzIiwicm5nbmFtZSIsInN0YXJ0ZGVub20iLCJwb3ciLCJzaWduaWZpY2FuY2UiLCJvdmVyZmxvdyIsIm1hc2siLCJvcHRpb25zIiwiY2FsbGJhY2siLCJzaG9ydHNlZWQiLCJtaXhrZXkiLCJmbGF0dGVuIiwib2JqIiwiZGVwdGgiLCJwcm9wIiwidHlwIiwiZW50cm9weSIsInRvc3RyaW5nIiwib3V0IiwicmFuZG9tQnl0ZXMiLCJVaW50OEFycmF5IiwiY3J5cHRvIiwibXNDcnlwdG8iLCJnZXRSYW5kb21WYWx1ZXMiLCJicm93c2VyIiwibmF2aWdhdG9yIiwicGx1Z2lucyIsInNjcmVlbiIsImF1dG9zZWVkIiwiYXJjNCIsIkFSQzQiLCJnIiwiUyIsInBhc3MiLCJpc19tYXRoX2NhbGwiLCJrZXlsZW4iLCJjb3VudCIsInNtZWFyIiwic3RyaW5nc2VlZCIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsImFwcGx5IiwicmFuZG9tIiwiZXgiXSwibWFwcGluZ3MiOiJhQUNFLElBQUlBLEVBQW1CLEdBR3ZCLFNBQVNDLEVBQW9CQyxHQUc1QixHQUFHRixFQUFpQkUsR0FDbkIsT0FBT0YsRUFBaUJFLEdBQVVDLFFBR25DLElBQUlDLEVBQVNKLEVBQWlCRSxHQUFZLENBQ3pDRyxFQUFHSCxFQUNISSxHQUFHLEVBQ0hILFFBQVMsSUFVVixPQU5BSSxFQUFRTCxHQUFVTSxLQUFLSixFQUFPRCxRQUFTQyxFQUFRQSxFQUFPRCxRQUFTRixHQUcvREcsRUFBT0UsR0FBSSxFQUdKRixFQUFPRCxRQUtmRixFQUFvQlEsRUFBSUYsRUFHeEJOLEVBQW9CUyxFQUFJVixFQUd4QkMsRUFBb0JVLEVBQUksU0FBU1IsRUFBU1MsRUFBTUMsR0FDM0NaLEVBQW9CYSxFQUFFWCxFQUFTUyxJQUNsQ0csT0FBT0MsZUFBZWIsRUFBU1MsRUFBTSxDQUFFSyxZQUFZLEVBQU1DLElBQUtMLEtBS2hFWixFQUFvQmtCLEVBQUksU0FBU2hCLEdBQ1gsb0JBQVhpQixRQUEwQkEsT0FBT0MsYUFDMUNOLE9BQU9DLGVBQWViLEVBQVNpQixPQUFPQyxZQUFhLENBQUVDLE1BQU8sV0FFN0RQLE9BQU9DLGVBQWViLEVBQVMsYUFBYyxDQUFFbUIsT0FBTyxLQVF2RHJCLEVBQW9Cc0IsRUFBSSxTQUFTRCxFQUFPRSxHQUV2QyxHQURVLEVBQVBBLElBQVVGLEVBQVFyQixFQUFvQnFCLElBQy9CLEVBQVBFLEVBQVUsT0FBT0YsRUFDcEIsR0FBVyxFQUFQRSxHQUE4QixpQkFBVkYsR0FBc0JBLEdBQVNBLEVBQU1HLFdBQVksT0FBT0gsRUFDaEYsSUFBSUksRUFBS1gsT0FBT1ksT0FBTyxNQUd2QixHQUZBMUIsRUFBb0JrQixFQUFFTyxHQUN0QlgsT0FBT0MsZUFBZVUsRUFBSSxVQUFXLENBQUVULFlBQVksRUFBTUssTUFBT0EsSUFDdEQsRUFB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RCxFQUFFc0QsRUFBRXBFLFFBQ0huUSxFQXNCVCxTQUFTaVQsRUFBT3BNLEVBQU14RyxHQUVwQixJQURBLElBQTRCdVUsRUFBeEJDLEVBQWFoTyxFQUFPLEdBQVdvTCxFQUFJLEVBQ2hDQSxFQUFJNEMsRUFBV3pPLFFBQ3BCL0YsRUFBSXdTLEVBQU9aLEdBQ1RZLEdBQVMrQixHQUF5QixHQUFoQnZVLEVBQUl3UyxFQUFPWixJQUFXNEMsRUFBV2xFLFdBQVdzQixLQUVsRSxPQUFPdUIsRUFBU25ULEdBOEJsQixTQUFTbVQsRUFBU2hSLEdBQ2hCLE9BQU9zUyxPQUFPQyxhQUFhQyxNQUFNLEVBQUd4UyxHQWdCdEMsR0FoSUE0UCxFQUFLLE9BQVNJLEdBQVcxSyxFQTBIekJtTCxFQUFPYixFQUFLNkMsU0FBVTlDLEdBTWF0VCxFQUFPRCxRQUFTLENBQ2pEQyxFQUFPRCxRQUFVa0osRUFFakIsSUFDRXVLLEVBQWEsRUFBUSxJQUNyQixNQUFPNkMsZUFFK0IsS0FBeEMsYUFBb0IsT0FBT3BOLEdBQWEsOEJBMU4xQyxDQStORSxHQUNBNUUsTyIsImZpbGUiOiJsYXNlcmdhbWUtYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDcpO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcblx0dGhyb3cgbmV3IEVycm9yKFwiZGVmaW5lIGNhbm5vdCBiZSB1c2VkIGluZGlyZWN0XCIpO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obW9kdWxlKSB7XG5cdGlmICghbW9kdWxlLndlYnBhY2tQb2x5ZmlsbCkge1xuXHRcdG1vZHVsZS5kZXByZWNhdGUgPSBmdW5jdGlvbigpIHt9O1xuXHRcdG1vZHVsZS5wYXRocyA9IFtdO1xuXHRcdC8vIG1vZHVsZS5wYXJlbnQgPSB1bmRlZmluZWQgYnkgZGVmYXVsdFxuXHRcdGlmICghbW9kdWxlLmNoaWxkcmVuKSBtb2R1bGUuY2hpbGRyZW4gPSBbXTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImxvYWRlZFwiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5sO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwiaWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUuaTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRtb2R1bGUud2VicGFja1BvbHlmaWxsID0gMTtcblx0fVxuXHRyZXR1cm4gbW9kdWxlO1xufTtcbiIsIi8qIGdsb2JhbHMgX193ZWJwYWNrX2FtZF9vcHRpb25zX18gKi9cbm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX2FtZF9vcHRpb25zX187XG4iLCJlbnVtIERpcmVjdGlvbiB7XG4gIE5PUlRILFxuICBFQVNULFxuICBTT1VUSCxcbiAgV0VTVCxcbiAgTk9ORSxcbiAgU1BMSVRfRUFTVF9XRVNULFxuICBTUExJVF9OT1JUSF9TT1VUSCxcbn1cbmV4cG9ydCBkZWZhdWx0IERpcmVjdGlvbjtcblxuY29uc3Qgb3Bwb3NpdGVEaXJlY3Rpb24gPSBbRGlyZWN0aW9uLlNPVVRILCBEaXJlY3Rpb24uV0VTVCwgRGlyZWN0aW9uLk5PUlRILCBEaXJlY3Rpb24uRUFTVF07XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRPcHBvc2l0ZURpcmVjdGlvbihkaXI6IERpcmVjdGlvbikge1xuICBjb25zdCBvcHBEaXIgPSBvcHBvc2l0ZURpcmVjdGlvbltkaXJdO1xuICByZXR1cm4gb3BwRGlyID09PSB1bmRlZmluZWQgPyBEaXJlY3Rpb24uTk9ORSA6IG9wcERpcjtcbn1cbiIsImltcG9ydCBEaXJlY3Rpb24gZnJvbSBcIi4vRGlyZWN0aW9uXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGludGVyZmFjZSBUaWxlIHtcbiAgeDogbnVtYmVyO1xuICB5OiBudW1iZXI7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkaXJlY3Rpb25Ub1RpbGUoZGlyZWN0aW9uOiBEaXJlY3Rpb24pOiBUaWxlIHtcbiAgc3dpdGNoIChkaXJlY3Rpb24pIHtcbiAgICBjYXNlIERpcmVjdGlvbi5OT1JUSDpcbiAgICAgIHJldHVybiB7IHg6IDAsIHk6IC0xIH07XG4gICAgY2FzZSBEaXJlY3Rpb24uRUFTVDpcbiAgICAgIHJldHVybiB7IHg6IDEsIHk6IDAgfTtcbiAgICBjYXNlIERpcmVjdGlvbi5TT1VUSDpcbiAgICAgIHJldHVybiB7IHg6IDAsIHk6IDEgfTtcbiAgICBjYXNlIERpcmVjdGlvbi5XRVNUOlxuICAgICAgcmV0dXJuIHsgeDogLTEsIHk6IDAgfTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHsgeDogMCwgeTogMCB9O1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBuZXh0VGlsZSh0aWxlOiBUaWxlLCBkaXI6IERpcmVjdGlvbikge1xuICByZXR1cm4gYWRkVGlsZXModGlsZSwgZGlyZWN0aW9uVG9UaWxlKGRpcikpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYWRkVGlsZXMoLi4udGlsZXM6IFRpbGVbXSk6IFRpbGUge1xuICByZXR1cm4gdGlsZXMucmVkdWNlKChwLCB2LCBfKSA9PiB7XG4gICAgcmV0dXJuIHt4OiBwLnggKyB2LngsIHk6IHAueSArIHYueX07XG4gIH0sIHt4OiAwLCB5OiAwfSApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc3ViVGlsZXMoYTogVGlsZSwgYjogVGlsZSk6IFRpbGUge1xuICByZXR1cm4geyB4OiBhLnggLSBiLngsIHk6IGEueSAtIGIueSB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY29weVRpbGUodGlsZTogVGlsZSk6IFRpbGUge1xuICByZXR1cm4geyB4OiB0aWxlLngsIHk6IHRpbGUueSB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdGlsZU5vdE5lZ2F0aXZlKHRpbGU6IFRpbGUpIHtcbiAgcmV0dXJuIHRpbGVDb21wYXJlKHRpbGUsIHsgeDogLTEsIHk6IC0xIH0sIChhLCBiKSA9PiBhID4gYik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0aWxlQ29tcGFyZShhOiBUaWxlLCBiOiBUaWxlLCBjb21wYXJlOiAoYTogbnVtYmVyLCBiOiBudW1iZXIpID0+IGJvb2xlYW4pIHtcbiAgcmV0dXJuIGNvbXBhcmUoYS54LCBiLngpICYmIGNvbXBhcmUoYS55ICwgYi55KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRpbGVXaXRoaW5BcmVhSW5jbHVzaXZlKHRpbGU6IFRpbGUsIG1pbjogVGlsZSwgbWF4OiBUaWxlKSB7XG4gIHJldHVybiB0aWxlQ29tcGFyZSh0aWxlLCBtaW4sIChhLCBiKSA9PiBhID49IGIpICYmIHRpbGVDb21wYXJlKHRpbGUsIG1heCwgKGEsIGIpID0+IGEgPD0gYik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0aWxlV2l0aGluQXJlYUV4Y2x1c2l2ZSh0aWxlOiBUaWxlLCBtaW46IFRpbGUsIG1heDogVGlsZSkge1xuICByZXR1cm4gdGlsZUNvbXBhcmUodGlsZSwgbWluLCAoYSwgYikgPT4gYSA+IGIpICYmIHRpbGVDb21wYXJlKHRpbGUsIG1heCwgKGEsIGIpID0+IGEgPCBiKTtcbn1cbiIsImVudW0gQ29sb3Ige1xuICBCTEFDSyxcbiAgQkxVRSxcbiAgR1JFRU4sXG4gIENZQU4sXG4gIFJFRCxcbiAgTUFHRU5UQSxcbiAgWUVMTE9XLFxuICBXSElURSxcbn1cbmV4cG9ydCBkZWZhdWx0IENvbG9yO1xuXG5leHBvcnQgZnVuY3Rpb24gYWRkQ29sb3JzKGE6IENvbG9yLCBiOiBDb2xvcikge1xuICByZXR1cm4gYSB8IGI7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjb2xvclRvUkdCU3RyaW5nKGNvbG9yOiBDb2xvcikge1xuICBjb25zdCByID0gNCA9PT0gKDQgJiBjb2xvcikgPyAyNTUgOiAwO1xuICBjb25zdCBnID0gMiA9PT0gKDIgJiBjb2xvcikgPyAyNTUgOiAwO1xuICBjb25zdCBiID0gMSA9PT0gKDEgJiBjb2xvcikgPyAyNTUgOiAwO1xuICByZXR1cm4gYHJnYigke3J9LCR7Z30sJHtifSlgO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY29sb3JUb05hbWUoY29sb3I6IENvbG9yKSB7XG4gIHJldHVybiBDb2xvcltjb2xvcl07XG59XG4iLCJpbXBvcnQgVGlsZSBmcm9tIFwiLi4vVGlsZVwiO1xuXG5leHBvcnQgY29uc3QgVElMRV9GVUxMID0gNTA7XG5leHBvcnQgY29uc3QgVElMRV9IQUxGID0gVElMRV9GVUxMIC8gMjtcblxuZXhwb3J0IGZ1bmN0aW9uIHRpbGVGcm9tUGl4ZWxzKHg6IG51bWJlciwgeTogbnVtYmVyKTogVGlsZSB7XG4gIHJldHVybiB7eDogTWF0aC5mbG9vcih4IC8gVElMRV9GVUxMKSwgeTogTWF0aC5mbG9vcih5IC8gVElMRV9GVUxMKX07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0aWxlVG9QaXhlbHModGlsZTogVGlsZSkge1xuICByZXR1cm4geyBweDogdGlsZS54ICogVElMRV9GVUxMLCBweTogdGlsZS55ICogVElMRV9GVUxMIH07XG59XG4iLCJpbXBvcnQgeyBjYWxjdWxhdGVBbGxFbmRpbmdzLCBHcmlkUGllY2UgfSBmcm9tIFwiLi4vTGFzZXJHcmlkXCI7XG5pbXBvcnQgTGV2ZWxUeXBlIGZyb20gXCIuLi9MZXZlbFR5cGVcIjtcbmltcG9ydCBQYXRoLCB7IGVxdWFsUGF0aHMgfSBmcm9tIFwiLi4vUGF0aFwiO1xuaW1wb3J0IFBpZWNlSUQgZnJvbSBcIi4uL1BpZWNlSURcIjtcbmltcG9ydCBMYXNlckdyaWRDb21wb25lbnQgZnJvbSBcIi4vY29tcG9uZW50cy9MYXNlckdyaWRDb21wb25lbnRcIjtcbmltcG9ydCBQaWVjZUNvbXBvbmVudCBmcm9tIFwiLi9jb21wb25lbnRzL1BpZWNlQ29tcG9uZW50XCI7XG5pbXBvcnQgVG9vbGJhckNvbXBvbmVudCBmcm9tIFwiLi9jb21wb25lbnRzL1Rvb2xiYXJDb21wb25lbnRcIjtcbmltcG9ydCB7IHBhdGhUb1N0cmluZyB9IGZyb20gXCIuL0Zyb250ZW5kUGF0aFwiO1xuaW1wb3J0IHsgY2FudmFzLCBjdHgsIHBhdGhzUHJlLCB2aWN0b3J5UCwgc2VlZExldmVsQnV0dG9uLCBzZWVkSW5wdXQsIGVkZ2VzSW5wdXQsIGRhaWx5TGV2ZWxCdXR0b24gfSBmcm9tIFwiLi9IVE1MRWxlbWVudHNcIjtcbmltcG9ydCB7IGdlbmVyYXRlTGV2ZWwgfSBmcm9tIFwiLi4vTGV2ZWxHZW5lcmF0b3JcIjtcbmltcG9ydCBzZWVkcmFuZG9tID0gcmVxdWlyZShcInNlZWRyYW5kb21cIik7XG5cbmV4cG9ydCBjb25zdCB0b29sYmFyID0gbmV3IFRvb2xiYXJDb21wb25lbnQoXCJhc3NldHMvbGFzZXJnYW1lL3Rvb2xiYXIucG5nXCIsIHsgeDogMCwgeTogNyB9LCA4LCAxLCBkcmF3KTtcbmV4cG9ydCBjb25zdCBsYXNlcmdyaWRDb21wb25lbnQgPSBuZXcgTGFzZXJHcmlkQ29tcG9uZW50KFwiYXNzZXRzL2xhc2VyZ2FtZS9sYXNlcmdyaWQucG5nXCIsIHsgeDogMCwgeTogMCB9LCA3LCA3LCBkcmF3KTtcblxuZXhwb3J0IGNvbnN0IHBpZWNlQ29tcG9uZW50czogUGllY2VDb21wb25lbnRbXSA9IFtdO1xuXG5sZXQgY3VycmVudExldmVsOiBQYXRoW107XG5leHBvcnQgbGV0IGF2YWlsYWJsZVBpZWNlczogR3JpZFBpZWNlW10gPSBbXTtcbmV4cG9ydCBsZXQgZWRnZUxldmVsRGF0YTogQXJyYXk8eyBlZGdlOiBudW1iZXIsIHNvbHZlZDogYm9vbGVhbiB9PjtcbmxldCBsZXZlbFR5cGU6IExldmVsVHlwZSA9IExldmVsVHlwZS5DdXN0b207XG4vLyBsZXQgZGlmZmljdWx0eSA9IFwibWVkaXVtXCI7XG5cbi8qKlxuICogSW5pdHMgdGhlIHRoaW5ncyB0aGF0IGFyZW4ndCBjb25zdGFudHNcbiAqL1xuZnVuY3Rpb24gaW5pdCgpIHtcbiAgY2FudmFzLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBvbkNsaWNrKTtcbiAgY2FudmFzLmFkZEV2ZW50TGlzdGVuZXIoXCJjb250ZXh0bWVudVwiLCBlID0+IHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgb25DbGljayhlKTtcbiAgfSk7XG5cbiAgc2VlZExldmVsQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBzZWVkTGV2ZWwpO1xuICBkYWlseUxldmVsQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBkYWlseUxldmVsKTtcblxuICBwaWVjZUNvbXBvbmVudHNbUGllY2VJRC5GT1JXQVJEX1NMQVNIXSA9IG5ldyBQaWVjZUNvbXBvbmVudChcImFzc2V0cy9sYXNlcmdhbWUvcGllY2VzL21pcnJvcl9mb3J3YXJkc2xhc2gucG5nXCIsIGRyYXcpO1xuICBwaWVjZUNvbXBvbmVudHNbUGllY2VJRC5CQUNLX1NMQVNIXSA9IG5ldyBQaWVjZUNvbXBvbmVudChcImFzc2V0cy9sYXNlcmdhbWUvcGllY2VzL21pcnJvcl9iYWNrc2xhc2gucG5nXCIsIGRyYXcpO1xuICBwaWVjZUNvbXBvbmVudHNbUGllY2VJRC5CTEFDS19IT0xFXSA9IG5ldyBQaWVjZUNvbXBvbmVudChcImFzc2V0cy9sYXNlcmdhbWUvcGllY2VzL21pcnJvcl9ibGFja2hvbGUucG5nXCIsIGRyYXcpO1xuICBwaWVjZUNvbXBvbmVudHNbUGllY2VJRC5IT1JJX1NQTElUXSA9IG5ldyBQaWVjZUNvbXBvbmVudChcImFzc2V0cy9sYXNlcmdhbWUvcGllY2VzL21pcnJvcl9zaWRlc3BsaXQucG5nXCIsIGRyYXcpO1xuICBwaWVjZUNvbXBvbmVudHNbUGllY2VJRC5WRVJUX1NQTElUXSA9IG5ldyBQaWVjZUNvbXBvbmVudChcImFzc2V0cy9sYXNlcmdhbWUvcGllY2VzL21pcnJvcl91cHNwbGl0LnBuZ1wiLCBkcmF3KTtcblxuICBwaWVjZUNvbXBvbmVudHNbUGllY2VJRC5CTFVFXSA9IG5ldyBQaWVjZUNvbXBvbmVudChcImFzc2V0cy9sYXNlcmdhbWUvcGllY2VzL3N3YXRjaF9ibHVlLnBuZ1wiLCBkcmF3KTtcbiAgcGllY2VDb21wb25lbnRzW1BpZWNlSUQuUkVEXSA9IG5ldyBQaWVjZUNvbXBvbmVudChcImFzc2V0cy9sYXNlcmdhbWUvcGllY2VzL3N3YXRjaF9yZWQucG5nXCIsIGRyYXcpO1xuICBwaWVjZUNvbXBvbmVudHNbUGllY2VJRC5HUkVFTl0gPSBuZXcgUGllY2VDb21wb25lbnQoXCJhc3NldHMvbGFzZXJnYW1lL3BpZWNlcy9zd2F0Y2hfZ3JlZW4ucG5nXCIsIGRyYXcpO1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgODsgaSsrKSB7XG4gICAgY29uc3QgcGllY2U6IEdyaWRQaWVjZSA9IHsgcGllY2VJRDogaSwgdGlsZTogeyB4OiAtMSwgeTogLTEgfSwgaW5kZXg6IGkgfTtcbiAgICBhdmFpbGFibGVQaWVjZXNbaV0gPSBwaWVjZTtcbiAgfVxuXG4gIGNhbGN1bGF0ZUFsbEVuZGluZ3MobGFzZXJncmlkQ29tcG9uZW50Lmxhc2VyZ3JpZCk7XG4gIHByaW50UGF0aHMoKTtcbiAgbGFzZXJncmlkQ29tcG9uZW50LmNhbGN1bGF0ZURyYXdQYXRoV3JhcHBlcigpO1xufVxuXG5mdW5jdGlvbiBkcmF3KCkge1xuICBjdHguY2xlYXJSZWN0KDAsIDAsIGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodCk7XG4gIGN0eC5maWxsU3R5bGUgPSBcIiM5YzlhOWJcIjtcbiAgY3R4LmZpbGxSZWN0KDAsIDAsIGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodCk7XG5cbiAgbGFzZXJncmlkQ29tcG9uZW50LmRyYXcoY3R4KTtcbiAgdG9vbGJhci5kcmF3KGN0eCk7XG59XG5cbmZ1bmN0aW9uIG9uQ2xpY2soZXZlbnQ6IE1vdXNlRXZlbnQpIHtcbiAgY29uc3QgbG9jID0gd2luZG93VG9DYW52YXMoZXZlbnQuY2xpZW50WCwgZXZlbnQuY2xpZW50WSk7XG4gIGxhc2VyZ3JpZENvbXBvbmVudC5wcm9jZXNzTW91c2VDbGljayhsb2MueCwgbG9jLnksIGV2ZW50LmJ1dHRvbik7XG4gIHRvb2xiYXIucHJvY2Vzc01vdXNlQ2xpY2sobG9jLngsIGxvYy55LCBldmVudC5idXR0b24pO1xuICBwcmludFBhdGhzKCk7XG4gIGlmIChjdXJyZW50TGV2ZWwgJiYgY2hlY2tWaWN0b3J5KCkpIHtcbiAgICBpZiAobGV2ZWxUeXBlID09PSBMZXZlbFR5cGUuU2VlZCkge1xuICAgICAgdmljdG9yeVAudGV4dENvbnRlbnQgPSBcIllvdSBiZWF0IHRoZSBzZWVkIGxldmVsIVwiO1xuICAgIH0gZWxzZSBpZiAobGV2ZWxUeXBlID09PSBMZXZlbFR5cGUuRGFpbHkpIHtcbiAgICAgIHZpY3RvcnlQLnRleHRDb250ZW50ID0gXCJXb3chIFlvdSBiZWF0IHRoZSBkYWlseSBsZXZlbCFcIjtcbiAgICB9XG4gICAgdmljdG9yeVAuaGlkZGVuID0gZmFsc2U7XG4gIH1cbiAgZHJhdygpO1xufVxuXG5mdW5jdGlvbiBwb3B1bGF0ZUVkZ2VMZXZlbERhdGEoKSB7XG4gIGlmIChjdXJyZW50TGV2ZWwpIHtcbiAgICBlZGdlTGV2ZWxEYXRhID0gW107XG4gICAgZm9yIChjb25zdCBwYXRoIG9mIGN1cnJlbnRMZXZlbCkge1xuICAgICAgY29uc3QgZWRnZSA9IHBhdGguc3RhcnQ7XG4gICAgICBsZXQgc29sdmVkID0gZmFsc2U7XG4gICAgICBpZiAoZXF1YWxQYXRocyhwYXRoLCBsYXNlcmdyaWRDb21wb25lbnQubGFzZXJncmlkLnBhdGhzW3BhdGguc3RhcnQgLSAxXSkpIHtcbiAgICAgICAgc29sdmVkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGVkZ2VMZXZlbERhdGEucHVzaCh7IGVkZ2UsIHNvbHZlZCB9KTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gY2hlY2tWaWN0b3J5KCk6IGJvb2xlYW4ge1xuICBmb3IgKGNvbnN0IGRhdGEgb2YgZWRnZUxldmVsRGF0YSkge1xuICAgIGlmICghZGF0YS5zb2x2ZWQpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwcmludFBhdGhzKCkge1xuICBpZiAoY3VycmVudExldmVsKSB7XG4gICAgcG9wdWxhdGVFZGdlTGV2ZWxEYXRhKCk7XG4gICAgcHJpbnRMZXZlbFBhdGhzKCk7XG4gIH0gZWxzZSB7XG4gICAgcHJpbnRBbGxQYXRocygpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHByaW50QWxsUGF0aHMoKSB7XG4gIHBhdGhzUHJlLmlubmVySFRNTCA9IFwiXCI7XG4gIGNvbnN0IHBhdGhzID0gbGFzZXJncmlkQ29tcG9uZW50Lmxhc2VyZ3JpZC5wYXRocztcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCAyMDsgaSsrKSB7XG4gICAgY29uc3QgY3VyUGF0aCA9IHBhdGhzW2ldO1xuICAgIGxldCBsaW5lID0gcGF0aFRvU3RyaW5nKGN1clBhdGgpO1xuICAgIGlmIChsYXNlcmdyaWRDb21wb25lbnQuc2VsZWN0ZWRFZGdlID09PSBpICsgMSkge1xuICAgICAgbGluZSA9IGA+PGI+JHtsaW5lfTwvYj5gO1xuICAgIH1cbiAgICBwYXRoc1ByZS5pbm5lckhUTUwgKz0gbGluZTtcbiAgICBpZiAoaSA8IDE5KSB7XG4gICAgICBwYXRoc1ByZS5pbm5lckhUTUwgKz0gXCJcXG5cIjtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gcHJpbnRMZXZlbFBhdGhzKCkge1xuICBwYXRoc1ByZS5pbm5lckhUTUwgPSBcIlwiO1xuICBjb25zdCBwYXRocyA9IGxhc2VyZ3JpZENvbXBvbmVudC5sYXNlcmdyaWQucGF0aHM7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgY3VycmVudExldmVsLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgbGV2ZWxQYXRoID0gY3VycmVudExldmVsW2ldO1xuICAgIGNvbnN0IGN1clBhdGggPSBwYXRoc1tsZXZlbFBhdGguc3RhcnQgLSAxXTtcbiAgICBsZXQgbGluZSA9IHBhdGhUb1N0cmluZyhsZXZlbFBhdGgpO1xuICAgIGxpbmUgPSBlcXVhbFBhdGhzKGN1clBhdGgsIGxldmVsUGF0aCkgPyBgPHNwYW4gc3R5bGU9J2NvbG9yOiBncmVlbic+JHtsaW5lfTwvc3Bhbj5gXG4gICAgICA6IGA8c3BhbiBzdHlsZT0nY29sb3I6IHJlZCc+JHtsaW5lfTwvc3Bhbj5gO1xuICAgIGlmIChsYXNlcmdyaWRDb21wb25lbnQuc2VsZWN0ZWRFZGdlID09PSBsZXZlbFBhdGguc3RhcnQpIHtcbiAgICAgIGxpbmUgPSBgPjxiPiR7bGluZX08L2I+YDtcbiAgICB9XG4gICAgcGF0aHNQcmUuaW5uZXJIVE1MICs9IGxpbmU7XG5cbiAgICBpZiAoaSA8IGN1cnJlbnRMZXZlbC5sZW5ndGggLSAxKSB7XG4gICAgICBwYXRoc1ByZS5pbm5lckhUTUwgKz0gXCJcXG5cIjtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBDb252ZXJ0cyB0aGUgeCwgeSBwaXhlbCBjb29yZGluYXRlcyBmcm9tIHdpbmRvdyBwb3NpdGlvbiB0byByZWxhdGl2ZSBjYW52YXMgcG9zaXRpb25cbiAqIEBwYXJhbSB7bnVtYmVyfSB4IGNsaWVudFhcbiAqIEBwYXJhbSB7bnVtYmVyfSB5IGNsaWVudFlcbiAqIEByZXR1cm5zIHt7eDogbnVtYmVyLCB5OiBudW1iZXJ9fSBhIHJlbGF0aXZlIGxvY2F0aW9uIHRvIHRoZSBjYW52YXNcbiAqL1xuZnVuY3Rpb24gd2luZG93VG9DYW52YXMoeDogbnVtYmVyLCB5OiBudW1iZXIpIHtcbiAgY29uc3QgYmJveCA9IGNhbnZhcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuICByZXR1cm4ge1xuICAgIHg6IHggLSBiYm94LmxlZnQgKiAoY2FudmFzLndpZHRoIC8gYmJveC53aWR0aCksXG4gICAgeTogeSAtIGJib3gudG9wICogKGNhbnZhcy5oZWlnaHQgLyBiYm94LmhlaWdodCksXG4gIH07XG59XG5cbmZ1bmN0aW9uIHNldE5ld0xldmVsKHNlZWQ6IHN0cmluZywgZWRnZXM6IG51bWJlciB8IHVuZGVmaW5lZCkge1xuICBsYXNlcmdyaWRDb21wb25lbnQuY2xlYXIoKTtcbiAgY29uc3QgbmV3TGV2ZWwgPSBnZW5lcmF0ZUxldmVsKHNlZWQsIGVkZ2VzKVxuICBjdXJyZW50TGV2ZWwgPSBbXTtcbiAgbmV3TGV2ZWwucGF0aHMuZm9yRWFjaChwID0+IGN1cnJlbnRMZXZlbC5wdXNoKHApKTtcbiAgYXZhaWxhYmxlUGllY2VzID0gbmV3TGV2ZWwuYXZhaWxhYmxlUGllY2VzO1xuICBwcmludFBhdGhzKCk7XG4gIGxhc2VyZ3JpZENvbXBvbmVudC5jYWxjdWxhdGVEcmF3UGF0aFdyYXBwZXIoKTtcbiAgZHJhdygpO1xufVxuXG5mdW5jdGlvbiBzZWVkTGV2ZWwoKSB7XG4gIGxldCBzZWVkID0gc2VlZElucHV0LnZhbHVlO1xuICBsZXQgZWRnZXM6IG51bWJlciB8IHVuZGVmaW5lZCA9IHBhcnNlSW50KGVkZ2VzSW5wdXQudmFsdWUpO1xuXG4gIGlmIChzZWVkID09PSBcIlwiKSB7XG4gICAgc2VlZCA9IERhdGUubm93KCkudG9TdHJpbmcoKTtcbiAgfVxuXG4gIGlmIChpc05hTihlZGdlcykgfHwgZWRnZXMgPCAxIHx8IGVkZ2VzID4gMjApIHtcbiAgICBlZGdlcyA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gIGxldmVsVHlwZSA9IExldmVsVHlwZS5TZWVkO1xuICB2aWN0b3J5UC50ZXh0Q29udGVudCA9IGBDdXJyZW50bHkgcGxheWluZyBzZWVkOiAke3NlZWR9YFxuXG4gIHNldE5ld0xldmVsKHNlZWQsIGVkZ2VzKTtcbn1cblxuZnVuY3Rpb24gZGFpbHlMZXZlbCgpIHtcbiAgY29uc3Qgc2VlZCA9IG5ldyBEYXRlKCkudG9EYXRlU3RyaW5nKCk7XG4gIGNvbnN0IHJuZyA9IHNlZWRyYW5kb20oc2VlZCk7XG4gIGNvbnN0IGVkZ2VzID0gcm5nKCkgKiAxMCArIDU7XG5cbiAgbGV2ZWxUeXBlID0gTGV2ZWxUeXBlLkRhaWx5O1xuICB2aWN0b3J5UC50ZXh0Q29udGVudCA9IGBDdXJyZW50bHkgcGxheWluZyBkYWlseSBsZXZlbDogJHtzZWVkfWBcbiAgc2V0TmV3TGV2ZWwoc2VlZCwgZWRnZXMpO1xufVxuXG53aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImxvYWRcIiwgKCkgPT4ge1xuICBpbml0KCk7XG59KVxuXG4iLCJpbXBvcnQgQ29sb3IgZnJvbSBcIi4vQ29sb3JcIjtcbmltcG9ydCBEaXJlY3Rpb24gZnJvbSBcIi4vRGlyZWN0aW9uXCI7XG5pbXBvcnQgRW5kaW5nLCB7IEVuZCB9IGZyb20gXCIuL0VuZGluZ1wiO1xuaW1wb3J0IExhc2VyU2VnbWVudCBmcm9tIFwiLi9MYXNlclNlZ21lbnRcIjtcbmltcG9ydCBQYXRoIGZyb20gXCIuL1BhdGhcIjtcbmltcG9ydCBQaWVjZUlELCB7IGFwcGx5UGllY2VUb0xhc2VyIH0gZnJvbSBcIi4vUGllY2VJRFwiO1xuaW1wb3J0IFRpbGUsIHsgbmV4dFRpbGUsIHRpbGVXaXRoaW5BcmVhRXhjbHVzaXZlIH0gZnJvbSBcIi4vVGlsZVwiO1xuXG5leHBvcnQgaW50ZXJmYWNlIEdyaWRQaWVjZSB7XG4gIHJlYWRvbmx5IHBpZWNlSUQ6IFBpZWNlSUQ7XG4gIHRpbGU6IFRpbGU7XG4gIHJlYWRvbmx5IGluZGV4OiBudW1iZXI7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGludGVyZmFjZSBMYXNlckdyaWQge1xuICBwYXRoczogUGF0aFtdO1xuICByZWFkb25seSBncmlkOiAoR3JpZFBpZWNlIHwgdW5kZWZpbmVkKVtdW107XG4gIHJlYWRvbmx5IGxlbmd0aDogbnVtYmVyO1xuICByZWFkb25seSB3aWR0aDogbnVtYmVyO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbWFrZURlZmF1bHRHcmlkKCk6IExhc2VyR3JpZCB7XG4gIGNvbnN0IGdyaWQgPSBbXTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCA1OyBpKyspIHtcbiAgICBncmlkW2ldID0gW107XG4gIH1cbiAgY29uc3QgbmV3R3JpZCA9IHtcbiAgICBwYXRoczogW10gYXMgUGF0aFtdLFxuICAgIGdyaWQ6IGdyaWQgYXMgR3JpZFBpZWNlW11bXSxcbiAgICBsZW5ndGg6IDUsIHdpZHRoOiA1LFxuICB9O1xuICBjYWxjdWxhdGVBbGxFbmRpbmdzKG5ld0dyaWQpO1xuICByZXR1cm4gbmV3R3JpZDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRpbGVUb0VkZ2VOdW1iZXIodGlsZTogVGlsZSkge1xuICBjb25zdCB4ID0gdGlsZS54O1xuICBjb25zdCB5ID0gdGlsZS55O1xuICBpZiAoeSA9PT0gLTEgJiYgeCA+IC0xICYmIHggPCA1KSB7XG4gICAgcmV0dXJuIDEgKyB4O1xuICB9IGVsc2UgaWYgKHggPT09IDUgJiYgeSA+IC0xICYmIHkgPCA1KSB7XG4gICAgcmV0dXJuIDYgKyB5O1xuICB9IGVsc2UgaWYgKHkgPT09IDUgJiYgeCA+IC0xICYmIHggPCA1KSB7XG4gICAgcmV0dXJuIDE1IC0geDtcbiAgfSBlbHNlIGlmICh4ID09PSAtMSAmJiB5ID4gLTEgJiYgeSA8IDUpIHtcbiAgICByZXR1cm4gMjAgLSB5O1xuICB9XG4gIHJldHVybiAwO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZWRnZU51bWJlclRvTGFzZXIoZWRnZTogbnVtYmVyKTogTGFzZXJTZWdtZW50IHtcbiAgaWYgKGVkZ2UgPCA2KSB7XG4gICAgcmV0dXJuIHsgdGlsZTogeyB4OiBlZGdlIC0gMSwgeTogLTEgfSwgZGlyOiBEaXJlY3Rpb24uU09VVEgsIGNvbG9yOiBDb2xvci5CTEFDSyB9O1xuICB9IGVsc2UgaWYgKGVkZ2UgPCAxMSkge1xuICAgIHJldHVybiB7IHRpbGU6IHsgeDogNSwgeTogZWRnZSAtIDYgfSwgZGlyOiBEaXJlY3Rpb24uV0VTVCwgY29sb3I6IENvbG9yLkJMQUNLIH07XG4gIH0gZWxzZSBpZiAoZWRnZSA8IDE2KSB7XG4gICAgcmV0dXJuIHsgdGlsZTogeyB4OiAtZWRnZSArIDE1LCB5OiA1IH0sIGRpcjogRGlyZWN0aW9uLk5PUlRILCBjb2xvcjogQ29sb3IuQkxBQ0sgfTtcbiAgfSBlbHNlIGlmIChlZGdlIDwgMjEpIHtcbiAgICByZXR1cm4geyB0aWxlOiB7IHg6IC0xLCB5OiAtZWRnZSArIDIwIH0sIGRpcjogRGlyZWN0aW9uLkVBU1QsIGNvbG9yOiBDb2xvci5CTEFDSyB9O1xuICB9XG4gIHRocm93IG5ldyBFcnJvcihcIkluY29ycmVjdCBFZGdlXCIpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRQaWVjZUZyb21HcmlkKGxhc2VyR3JpZDogTGFzZXJHcmlkLCB0aWxlOiBUaWxlKSB7XG4gIGlmIChsYXNlckdyaWQuZ3JpZFt0aWxlLnldKSB7XG4gICAgcmV0dXJuIGxhc2VyR3JpZC5ncmlkW3RpbGUueV1bdGlsZS54XTtcbiAgfVxuICByZXR1cm4gdW5kZWZpbmVkO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNWYWxpZFNwYWNlKGxhc2VyR3JpZDogTGFzZXJHcmlkLCB0aWxlOiBUaWxlKSB7XG4gIHJldHVybiB0aWxlV2l0aGluQXJlYUV4Y2x1c2l2ZSh0aWxlLCB7IHg6IC0xLCB5OiAtMSB9LCB7IHg6IGxhc2VyR3JpZC53aWR0aCwgeTogbGFzZXJHcmlkLmxlbmd0aCB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZVBpZWNlRnJvbUdyaWQobGFzZXJHcmlkOiBMYXNlckdyaWQsIHBpZWNlOiBHcmlkUGllY2UpOiBHcmlkUGllY2Uge1xuICBsYXNlckdyaWQuZ3JpZFtwaWVjZS50aWxlLnldW3BpZWNlLnRpbGUueF0gPSB1bmRlZmluZWQ7XG4gIHBpZWNlLnRpbGUgPSB7IHg6IC0xLCB5OiAtMSB9O1xuICBjYWxjdWxhdGVBbGxFbmRpbmdzKGxhc2VyR3JpZCk7XG4gIHJldHVybiBwaWVjZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNldFBpZWNlSW5HcmlkKGxhc2VyR3JpZDogTGFzZXJHcmlkLCBwaWVjZTogR3JpZFBpZWNlLCB0aWxlOiBUaWxlKTogR3JpZFBpZWNlIHwgdW5kZWZpbmVkIHtcbiAgaWYgKGlzVmFsaWRTcGFjZShsYXNlckdyaWQsIHBpZWNlLnRpbGUpKSB7XG4gICAgbGFzZXJHcmlkLmdyaWRbcGllY2UudGlsZS55XVtwaWVjZS50aWxlLnhdID0gdW5kZWZpbmVkO1xuICB9XG4gIGNvbnN0IGN1cnJlbnRQaWVjZSA9IGdldFBpZWNlRnJvbUdyaWQobGFzZXJHcmlkLCB0aWxlKTtcbiAgbGV0IHJlbW92ZWRQaWVjZSA9IHVuZGVmaW5lZDtcbiAgaWYgKGN1cnJlbnRQaWVjZSkge1xuICAgIHJlbW92ZWRQaWVjZSA9IHJlbW92ZVBpZWNlRnJvbUdyaWQobGFzZXJHcmlkLCBjdXJyZW50UGllY2UpO1xuICB9XG4gIHBpZWNlLnRpbGUgPSB0aWxlO1xuICBsYXNlckdyaWQuZ3JpZFt0aWxlLnldW3RpbGUueF0gPSBwaWVjZTtcbiAgY2FsY3VsYXRlQWxsRW5kaW5ncyhsYXNlckdyaWQpO1xuICByZXR1cm4gcmVtb3ZlZFBpZWNlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2FsY3VsYXRlQWxsRW5kaW5ncyhsYXNlckdyaWQ6IExhc2VyR3JpZCkge1xuICBjb25zdCBlbmRpbmdzOiBQYXRoW10gPSBbXTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCAyMDsgaSsrKSB7XG4gICAgZW5kaW5nc1tpXSA9IHsgc3RhcnQ6IGkgKyAxLCBlbmRpbmdzOiBjYWxjdWxhdGVFbmRpbmdMaXN0KGxhc2VyR3JpZCwgaSArIDEpIH07XG4gIH1cbiAgbGFzZXJHcmlkLnBhdGhzID0gZW5kaW5ncztcbn1cblxuZnVuY3Rpb24gY2FsY3VsYXRlRW5kaW5nTGlzdChsYXNlckdyaWQ6IExhc2VyR3JpZCwgZWRnZTogbnVtYmVyKSB7XG4gIGNvbnN0IGVuZGluZ0xpc3Q6IEVuZGluZ1tdID0gW107XG5cbiAgZnVuY3Rpb24gdHJhY2tPbmVFbmRpbmcoZ3JpZDogTGFzZXJHcmlkLCBsYXNlcjogTGFzZXJTZWdtZW50KSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCAxMDA7IGkrKykge1xuICAgICAgbGFzZXIudGlsZSA9IG5leHRUaWxlKGxhc2VyLnRpbGUsIGxhc2VyLmRpcik7XG4gICAgICBpZiAoIWlzVmFsaWRTcGFjZShncmlkLCBsYXNlci50aWxlKSkge1xuICAgICAgICBjb25zdCBlbmRFZGdlID0gdGlsZVRvRWRnZU51bWJlcihsYXNlci50aWxlKTtcbiAgICAgICAgZW5kaW5nTGlzdC5wdXNoKHsgZW5kOiBlbmRFZGdlLCBjb2xvcjogbGFzZXIuY29sb3IgfSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHBpZWNlID0gZ2V0UGllY2VGcm9tR3JpZChncmlkLCBsYXNlci50aWxlKTtcbiAgICAgIGlmIChwaWVjZSkge1xuICAgICAgICBhcHBseVBpZWNlVG9MYXNlcihsYXNlciwgcGllY2UucGllY2VJRCk7XG4gICAgICAgIHN3aXRjaCAobGFzZXIuZGlyKSB7XG4gICAgICAgICAgY2FzZSBEaXJlY3Rpb24uU1BMSVRfTk9SVEhfU09VVEg6XG4gICAgICAgICAgICBsYXNlci5kaXIgPSBEaXJlY3Rpb24uTk9SVEg7XG4gICAgICAgICAgICB0cmFja09uZUVuZGluZyhncmlkLCB7IHRpbGU6IGxhc2VyLnRpbGUsIGRpcjogRGlyZWN0aW9uLlNPVVRILCBjb2xvcjogbGFzZXIuY29sb3IgfSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIERpcmVjdGlvbi5TUExJVF9FQVNUX1dFU1Q6XG4gICAgICAgICAgICBsYXNlci5kaXIgPSBEaXJlY3Rpb24uRUFTVDtcbiAgICAgICAgICAgIHRyYWNrT25lRW5kaW5nKGdyaWQsIHsgdGlsZTogbGFzZXIudGlsZSwgZGlyOiBEaXJlY3Rpb24uV0VTVCwgY29sb3I6IGxhc2VyLmNvbG9yIH0pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBEaXJlY3Rpb24uTk9ORTpcbiAgICAgICAgICAgIGVuZGluZ0xpc3QucHVzaCh7IGVuZDogRW5kLkJsb2NrZWQsIGNvbG9yOiBsYXNlci5jb2xvciB9KTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfSAvLyBpZiBwaWVjZSBpcyBub3QgbnVsbFxuICAgIH0gLy8gZm9yXG4gICAgZW5kaW5nTGlzdC5wdXNoKHsgZW5kOiBFbmQuTG9vcCwgY29sb3I6IGxhc2VyLmNvbG9yIH0pO1xuICB9IC8vIHRyYWNrT25lRW5kaW5nKClcblxuICB0cmFja09uZUVuZGluZyhsYXNlckdyaWQsIGVkZ2VOdW1iZXJUb0xhc2VyKGVkZ2UpKTtcbiAgZW5kaW5nTGlzdC5zb3J0KChhLCBiKSA9PiBhLmVuZCA8IGIuZW5kID8gLTEgOiAxKTtcbiAgcmV0dXJuIGVuZGluZ0xpc3Q7XG59XG4iLCJpbXBvcnQgQ29sb3IgZnJvbSBcIi4vQ29sb3JcIjtcblxuZXhwb3J0IGRlZmF1bHQgaW50ZXJmYWNlIEVuZGluZyB7XG4gIHJlYWRvbmx5IGVuZDogRW5kO1xuICByZWFkb25seSBjb2xvcjogQ29sb3I7XG59XG5cbmV4cG9ydCBlbnVtIEVuZCB7XG4gIEJsb2NrZWQgPSAtMixcbiAgTG9vcCxcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGVuZGluZ3NFcXVhbChhOiBFbmRpbmcsIGI6IEVuZGluZykge1xuICByZXR1cm4gYS5lbmQgPT09IGIuZW5kICYmIGEuY29sb3IgPT09IGIuY29sb3I7XG59XG4iLCJpbXBvcnQgQ29sb3IsICogYXMgY29sb3JNYW5hZ2VyIGZyb20gXCIuL0NvbG9yXCI7XG5pbXBvcnQgRGlyZWN0aW9uIGZyb20gXCIuL0RpcmVjdGlvblwiO1xuaW1wb3J0IExhc2VyU2VnbWVudCBmcm9tIFwiLi9MYXNlclNlZ21lbnRcIjtcblxuZW51bSBQaWVjZUlEIHtcbiAgRk9SV0FSRF9TTEFTSCxcbiAgQkFDS19TTEFTSCxcbiAgQkxBQ0tfSE9MRSxcbiAgSE9SSV9TUExJVCxcbiAgVkVSVF9TUExJVCxcblxuICBSRUQsXG4gIEJMVUUsXG4gIEdSRUVOLFxufVxuZXhwb3J0IGRlZmF1bHQgUGllY2VJRDtcblxuaW50ZXJmYWNlIFBpZWNlUnVsZSB7XG4gIGRpcnM/OiBEaXJlY3Rpb25bXTtcbiAgY29sb3I/OiBDb2xvcjtcbn1cblxuY29uc3QgcGllY2VSdWxlTGlzdDogUmVhZG9ubHlBcnJheTxQaWVjZVJ1bGU+ID0gW1xuICB7IGRpcnM6IFtEaXJlY3Rpb24uRUFTVCwgRGlyZWN0aW9uLk5PUlRILCBEaXJlY3Rpb24uV0VTVCwgRGlyZWN0aW9uLlNPVVRIXSB9LFxuICB7IGRpcnM6IFtEaXJlY3Rpb24uV0VTVCwgRGlyZWN0aW9uLlNPVVRILCBEaXJlY3Rpb24uRUFTVCwgRGlyZWN0aW9uLk5PUlRIXSB9LFxuICB7IGRpcnM6IFtEaXJlY3Rpb24uTk9ORSwgRGlyZWN0aW9uLk5PTkUsIERpcmVjdGlvbi5OT05FLCBEaXJlY3Rpb24uTk9ORV0gfSxcbiAgeyBkaXJzOiBbRGlyZWN0aW9uLkVBU1QsIERpcmVjdGlvbi5OT05FLCBEaXJlY3Rpb24uRUFTVCwgRGlyZWN0aW9uLlNQTElUX05PUlRIX1NPVVRIXSB9LFxuICB7IGRpcnM6IFtEaXJlY3Rpb24uTk9ORSwgRGlyZWN0aW9uLk5PUlRILCBEaXJlY3Rpb24uU1BMSVRfRUFTVF9XRVNULCBEaXJlY3Rpb24uTk9SVEhdIH0sXG5cbiAgeyBjb2xvcjogQ29sb3IuUkVEIH0sXG4gIHsgY29sb3I6IENvbG9yLkJMVUUgfSxcbiAgeyBjb2xvcjogQ29sb3IuR1JFRU4gfSxcbl07XG5cbmV4cG9ydCBmdW5jdGlvbiBhcHBseVBpZWNlVG9MYXNlcihsYXNlcjogTGFzZXJTZWdtZW50LCBwaWVjZUlEOiBQaWVjZUlEKSB7XG4gIGNvbnN0IHBpZWNlUnVsZXMgPSBwaWVjZVJ1bGVMaXN0W3BpZWNlSURdO1xuICBpZiAocGllY2VSdWxlcy5kaXJzKSB7XG4gICAgbGFzZXIuZGlyID0gcGllY2VSdWxlcy5kaXJzW2xhc2VyLmRpcl07XG4gIH1cbiAgaWYgKHBpZWNlUnVsZXMuY29sb3IpIHtcbiAgICBsYXNlci5jb2xvciA9IGNvbG9yTWFuYWdlci5hZGRDb2xvcnMobGFzZXIuY29sb3IsIHBpZWNlUnVsZXMuY29sb3IpO1xuICB9XG4gIHJldHVybiBsYXNlcjtcbn1cbiIsImltcG9ydCBFbmRpbmcsIHtlbmRpbmdzRXF1YWx9IGZyb20gXCIuL0VuZGluZ1wiO1xuXG5leHBvcnQgZGVmYXVsdCBpbnRlcmZhY2UgUGF0aCB7XG4gIHN0YXJ0OiBudW1iZXI7XG4gIGVuZGluZ3M6IEVuZGluZ1tdO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZXF1YWxQYXRocyhhOiBQYXRoLCBiOiBQYXRoKSB7XG4gIGlmIChhLmVuZGluZ3MubGVuZ3RoICE9PSBiLmVuZGluZ3MubGVuZ3RoKSByZXR1cm4gZmFsc2U7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgYS5lbmRpbmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKCFlbmRpbmdzRXF1YWwoYS5lbmRpbmdzW2ldLCBiLmVuZGluZ3NbaV0pKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIHJldHVybiB0cnVlO1xufVxuIiwiaW1wb3J0IFRpbGUsIHtzdWJUaWxlcywgdGlsZVdpdGhpbkFyZWFFeGNsdXNpdmV9IGZyb20gXCIuLi8uLi9UaWxlXCI7XG5pbXBvcnQgeyB0aWxlRnJvbVBpeGVscywgdGlsZVRvUGl4ZWxzIH0gZnJvbSBcIi4uL0Zyb250ZW5kVGlsZVwiO1xuXG4vKipcbiAqIEFuIGFic3RyYWN0IGNsYXNzIHJlcHJlc2VudGluZyBhIHNtYWxsZXIgc2VjdGlvbiBvZiB0aGUgY2FudmFzXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGFic3RyYWN0IGNsYXNzIENhbnZhc0NvbXBvbmVudCB7XG4gIHB1YmxpYyB0aWxlOiBUaWxlO1xuICBwdWJsaWMgd2lkdGhJblRpbGVzOiBudW1iZXI7XG4gIHB1YmxpYyBoZWlnaHRJblRpbGVzOiBudW1iZXI7XG4gIHB1YmxpYyBvZmZzZXRYOiBudW1iZXI7XG4gIHB1YmxpYyBvZmZzZXRZOiBudW1iZXI7XG4gIHByaXZhdGUgaW1nOiBIVE1MSW1hZ2VFbGVtZW50O1xuXG4gIGNvbnN0cnVjdG9yKHNyYzogc3RyaW5nLCB0aWxlOiBUaWxlLCB3aWR0aEluVGlsZXM6IG51bWJlciwgaGVpZ2h0SW5UaWxlczogbnVtYmVyLCBkcmF3OiAoKSA9PiB2b2lkLFxuICAgICAgICAgICAgICBvZmZzZXRYID0gMCwgb2Zmc2V0WSA9IDApIHtcbiAgICB0aGlzLmltZyA9IG5ldyBJbWFnZSgpO1xuICAgIHRoaXMuaW1nLm9ubG9hZCA9ICgpID0+IHsgZHJhdygpOyB9O1xuICAgIHRoaXMuaW1nLnNyYyA9IHNyYztcbiAgICB0aGlzLnRpbGUgPSB0aWxlO1xuICAgIHRoaXMud2lkdGhJblRpbGVzID0gd2lkdGhJblRpbGVzO1xuICAgIHRoaXMuaGVpZ2h0SW5UaWxlcyA9IGhlaWdodEluVGlsZXM7XG4gICAgdGhpcy5vZmZzZXRYID0gb2Zmc2V0WDtcbiAgICB0aGlzLm9mZnNldFkgPSBvZmZzZXRZO1xuICB9XG5cbiAgLyoqXG4gICAqIERyYXdzIHRoZSBjb21wb25lbnRzIGltYWdlIGF0IHRoZSBsb2NhdGlvblxuICAgKi9cbiAgcHVibGljIGRyYXcoY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQpIHtcbiAgICBjb25zdCBsb2MgPSB0aWxlVG9QaXhlbHModGhpcy50aWxlKTtcbiAgICBjdHguZHJhd0ltYWdlKHRoaXMuaW1nLCBsb2MucHggKyB0aGlzLm9mZnNldFgsIGxvYy5weSArIHRoaXMub2Zmc2V0WSk7XG4gIH1cblxuICAvKipcbiAgICogRmlndXJlcyBvdXQgd2hldGhlciBhIGJ1dHRvbiBwcmVzcyBoYXBwZW5lZCBpbnNpZGUgdGhlIGNvbXBvbmVudCBhbmQgcmV0dXJucyBpdC4gSWYgaXQgZGlkbid0LCByZXR1cm5zIG51bGwuXG4gICAqL1xuICBwdWJsaWMgcHJvY2Vzc01vdXNlQ2xpY2soeDogbnVtYmVyLCB5OiBudW1iZXIsIF9idXR0b246IG51bWJlcikge1xuICAgIGNvbnN0IHJlbGF0aXZlVGlsZSA9IHN1YlRpbGVzKHRpbGVGcm9tUGl4ZWxzKHgsIHkpLCB0aGlzLnRpbGUpO1xuICAgIGlmICh0aWxlV2l0aGluQXJlYUV4Y2x1c2l2ZShyZWxhdGl2ZVRpbGUsIHt4OiAtMSwgeTogLTF9LCB7eDogdGhpcy53aWR0aEluVGlsZXMsIHk6IHRoaXMuaGVpZ2h0SW5UaWxlc30pKSB7XG4gICAgICByZXR1cm4gcmVsYXRpdmVUaWxlO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxufVxuIiwiLy8gQSBsaWJyYXJ5IG9mIHNlZWRhYmxlIFJOR3MgaW1wbGVtZW50ZWQgaW4gSmF2YXNjcmlwdC5cbi8vXG4vLyBVc2FnZTpcbi8vXG4vLyB2YXIgc2VlZHJhbmRvbSA9IHJlcXVpcmUoJ3NlZWRyYW5kb20nKTtcbi8vIHZhciByYW5kb20gPSBzZWVkcmFuZG9tKDEpOyAvLyBvciBhbnkgc2VlZC5cbi8vIHZhciB4ID0gcmFuZG9tKCk7ICAgICAgIC8vIDAgPD0geCA8IDEuICBFdmVyeSBiaXQgaXMgcmFuZG9tLlxuLy8gdmFyIHggPSByYW5kb20ucXVpY2soKTsgLy8gMCA8PSB4IDwgMS4gIDMyIGJpdHMgb2YgcmFuZG9tbmVzcy5cblxuLy8gYWxlYSwgYSA1My1iaXQgbXVsdGlwbHktd2l0aC1jYXJyeSBnZW5lcmF0b3IgYnkgSm9oYW5uZXMgQmFhZ8O4ZS5cbi8vIFBlcmlvZDogfjJeMTE2XG4vLyBSZXBvcnRlZCB0byBwYXNzIGFsbCBCaWdDcnVzaCB0ZXN0cy5cbnZhciBhbGVhID0gcmVxdWlyZSgnLi9saWIvYWxlYScpO1xuXG4vLyB4b3IxMjgsIGEgcHVyZSB4b3Itc2hpZnQgZ2VuZXJhdG9yIGJ5IEdlb3JnZSBNYXJzYWdsaWEuXG4vLyBQZXJpb2Q6IDJeMTI4LTEuXG4vLyBSZXBvcnRlZCB0byBmYWlsOiBNYXRyaXhSYW5rIGFuZCBMaW5lYXJDb21wLlxudmFyIHhvcjEyOCA9IHJlcXVpcmUoJy4vbGliL3hvcjEyOCcpO1xuXG4vLyB4b3J3b3csIEdlb3JnZSBNYXJzYWdsaWEncyAxNjAtYml0IHhvci1zaGlmdCBjb21iaW5lZCBwbHVzIHdleWwuXG4vLyBQZXJpb2Q6IDJeMTkyLTJeMzJcbi8vIFJlcG9ydGVkIHRvIGZhaWw6IENvbGxpc2lvbk92ZXIsIFNpbXBQb2tlciwgYW5kIExpbmVhckNvbXAuXG52YXIgeG9yd293ID0gcmVxdWlyZSgnLi9saWIveG9yd293Jyk7XG5cbi8vIHhvcnNoaWZ0NywgYnkgRnJhbsOnb2lzIFBhbm5ldG9uIGFuZCBQaWVycmUgTCdlY3V5ZXIsIHRha2VzXG4vLyBhIGRpZmZlcmVudCBhcHByb2FjaDogaXQgYWRkcyByb2J1c3RuZXNzIGJ5IGFsbG93aW5nIG1vcmUgc2hpZnRzXG4vLyB0aGFuIE1hcnNhZ2xpYSdzIG9yaWdpbmFsIHRocmVlLiAgSXQgaXMgYSA3LXNoaWZ0IGdlbmVyYXRvclxuLy8gd2l0aCAyNTYgYml0cywgdGhhdCBwYXNzZXMgQmlnQ3J1c2ggd2l0aCBubyBzeXN0bWF0aWMgZmFpbHVyZXMuXG4vLyBQZXJpb2QgMl4yNTYtMS5cbi8vIE5vIHN5c3RlbWF0aWMgQmlnQ3J1c2ggZmFpbHVyZXMgcmVwb3J0ZWQuXG52YXIgeG9yc2hpZnQ3ID0gcmVxdWlyZSgnLi9saWIveG9yc2hpZnQ3Jyk7XG5cbi8vIHhvcjQwOTYsIGJ5IFJpY2hhcmQgQnJlbnQsIGlzIGEgNDA5Ni1iaXQgeG9yLXNoaWZ0IHdpdGggYVxuLy8gdmVyeSBsb25nIHBlcmlvZCB0aGF0IGFsc28gYWRkcyBhIFdleWwgZ2VuZXJhdG9yLiBJdCBhbHNvIHBhc3Nlc1xuLy8gQmlnQ3J1c2ggd2l0aCBubyBzeXN0ZW1hdGljIGZhaWx1cmVzLiAgSXRzIGxvbmcgcGVyaW9kIG1heVxuLy8gYmUgdXNlZnVsIGlmIHlvdSBoYXZlIG1hbnkgZ2VuZXJhdG9ycyBhbmQgbmVlZCB0byBhdm9pZFxuLy8gY29sbGlzaW9ucy5cbi8vIFBlcmlvZDogMl40MTI4LTJeMzIuXG4vLyBObyBzeXN0ZW1hdGljIEJpZ0NydXNoIGZhaWx1cmVzIHJlcG9ydGVkLlxudmFyIHhvcjQwOTYgPSByZXF1aXJlKCcuL2xpYi94b3I0MDk2Jyk7XG5cbi8vIFR5Y2hlLWksIGJ5IFNhbXVlbCBOZXZlcyBhbmQgRmlsaXBlIEFyYXVqbywgaXMgYSBiaXQtc2hpZnRpbmcgcmFuZG9tXG4vLyBudW1iZXIgZ2VuZXJhdG9yIGRlcml2ZWQgZnJvbSBDaGFDaGEsIGEgbW9kZXJuIHN0cmVhbSBjaXBoZXIuXG4vLyBodHRwczovL2VkZW4uZGVpLnVjLnB0L35zbmV2ZXMvcHVicy8yMDExLXNuZmEyLnBkZlxuLy8gUGVyaW9kOiB+Ml4xMjdcbi8vIE5vIHN5c3RlbWF0aWMgQmlnQ3J1c2ggZmFpbHVyZXMgcmVwb3J0ZWQuXG52YXIgdHljaGVpID0gcmVxdWlyZSgnLi9saWIvdHljaGVpJyk7XG5cbi8vIFRoZSBvcmlnaW5hbCBBUkM0LWJhc2VkIHBybmcgaW5jbHVkZWQgaW4gdGhpcyBsaWJyYXJ5LlxuLy8gUGVyaW9kOiB+Ml4xNjAwXG52YXIgc3IgPSByZXF1aXJlKCcuL3NlZWRyYW5kb20nKTtcblxuc3IuYWxlYSA9IGFsZWE7XG5zci54b3IxMjggPSB4b3IxMjg7XG5zci54b3J3b3cgPSB4b3J3b3c7XG5zci54b3JzaGlmdDcgPSB4b3JzaGlmdDc7XG5zci54b3I0MDk2ID0geG9yNDA5NjtcbnNyLnR5Y2hlaSA9IHR5Y2hlaTtcblxubW9kdWxlLmV4cG9ydHMgPSBzcjtcbiIsImVudW0gTGV2ZWxUeXBlIHtcbiAgRGFpbHksXG4gIFNlZWQsXG4gIEN1c3RvbSxcbn1cblxuZXhwb3J0IGRlZmF1bHQgTGV2ZWxUeXBlO1xuIiwiaW1wb3J0IHsgY29sb3JUb1JHQlN0cmluZyB9IGZyb20gXCIuLi8uLi9Db2xvclwiO1xuaW1wb3J0IERpcmVjdGlvbiBmcm9tIFwiLi4vLi4vRGlyZWN0aW9uXCI7XG5pbXBvcnQgTGFzZXJHcmlkLCB7IGVkZ2VOdW1iZXJUb0xhc2VyLCBnZXRQaWVjZUZyb21HcmlkLCBtYWtlRGVmYXVsdEdyaWQsIHJlbW92ZVBpZWNlRnJvbUdyaWQsIHNldFBpZWNlSW5HcmlkLCB0aWxlVG9FZGdlTnVtYmVyIH0gZnJvbSBcIi4uLy4uL0xhc2VyR3JpZFwiO1xuaW1wb3J0IExhc2VyU2VnbWVudCwgeyBjb3B5TGFzZXJTZWdtZW50LCBnZXRPcHBvc2l0ZUxhc2VyU2VnbWVudCB9IGZyb20gXCIuLi8uLi9MYXNlclNlZ21lbnRcIjtcbmltcG9ydCB7IGFwcGx5UGllY2VUb0xhc2VyIH0gZnJvbSBcIi4uLy4uL1BpZWNlSURcIjtcbmltcG9ydCBUaWxlLCB7IGFkZFRpbGVzLCBkaXJlY3Rpb25Ub1RpbGUsIG5leHRUaWxlLCBzdWJUaWxlcywgdGlsZVdpdGhpbkFyZWFJbmNsdXNpdmUgfSBmcm9tIFwiLi4vLi4vVGlsZVwiO1xuaW1wb3J0IHsgYXZhaWxhYmxlUGllY2VzLCBlZGdlTGV2ZWxEYXRhLCBwaWVjZUNvbXBvbmVudHMsIHByaW50UGF0aHMsIHRvb2xiYXIgfSBmcm9tIFwiLi4vRnJvbnRlbmRMYXNlcmdhbWVcIjtcbmltcG9ydCB7IHRpbGVUb1BpeGVscywgVElMRV9GVUxMLCBUSUxFX0hBTEYgfSBmcm9tIFwiLi4vRnJvbnRlbmRUaWxlXCI7XG5pbXBvcnQgQ2FudmFzQ29tcG9uZW50IGZyb20gXCIuL0NhbnZhc0NvbXBvbmVudFwiO1xuXG5cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTGFzZXJHcmlkQ29tcG9uZW50IGV4dGVuZHMgQ2FudmFzQ29tcG9uZW50IHtcbiAgcHVibGljIGxhc2VyZ3JpZDogTGFzZXJHcmlkO1xuICBwdWJsaWMgc2VsZWN0ZWRFZGdlOiBudW1iZXI7XG4gIHB1YmxpYyBkcmF3UGF0aDogTGFzZXJTZWdtZW50W107XG5cbiAgY29uc3RydWN0b3IoXG4gICAgc3JjOiBzdHJpbmcsIHRpbGU6IFRpbGUsIHdpZHRoSW5UaWxlczogbnVtYmVyLCBoZWlnaHRJblRpbGVzOiBudW1iZXIsIGRyYXc6ICgpID0+IHZvaWQsXG4gICAgb2Zmc2V0WCA9IDAsIG9mZnNldFkgPSAwKSB7XG4gICAgc3VwZXIoc3JjLCB0aWxlLCB3aWR0aEluVGlsZXMsIGhlaWdodEluVGlsZXMsIGRyYXcsIG9mZnNldFgsIG9mZnNldFkpO1xuXG4gICAgdGhpcy5sYXNlcmdyaWQgPSBtYWtlRGVmYXVsdEdyaWQoKTtcblxuICAgIHRoaXMuc2VsZWN0ZWRFZGdlID0gMTtcbiAgICB0aGlzLmRyYXdQYXRoID0gW107XG4gIH1cblxuICBwdWJsaWMgZHJhdyhjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCkge1xuICAgIHN1cGVyLmRyYXcoY3R4KTtcblxuICAgIC8vIERyYXcgcGllY2VzIG9uIGdyaWRcbiAgICBmb3IgKGNvbnN0IHBpZWNlIG9mIGF2YWlsYWJsZVBpZWNlcykge1xuICAgICAgaWYgKCh0aWxlV2l0aGluQXJlYUluY2x1c2l2ZShwaWVjZS50aWxlLCB7IHg6IDAsIHk6IDAgfSwgeyB4OiA0LCB5OiA0IH0pKSkge1xuICAgICAgICBwaWVjZUNvbXBvbmVudHNbcGllY2UucGllY2VJRF0uZHJhd0F0KGFkZFRpbGVzKHRoaXMudGlsZSwgcGllY2UudGlsZSwgeyB4OiAxLCB5OiAxIH0pLCBjdHgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIERyYXcgbGFzZXIgcGF0aCBvbiBncmlkXG4gICAgZm9yIChjb25zdCBsYXNlciBvZiB0aGlzLmRyYXdQYXRoKSB7XG4gICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICBjdHguc3Ryb2tlU3R5bGUgPSBjb2xvclRvUkdCU3RyaW5nKGxhc2VyLmNvbG9yKTtcbiAgICAgIGNvbnN0IGxvYyA9IHRpbGVUb1BpeGVscyhhZGRUaWxlcyhsYXNlci50aWxlLCB7IHg6IDEsIHk6IDEgfSkpO1xuICAgICAgbG9jLnB4ICs9IFRJTEVfSEFMRjtcbiAgICAgIGxvYy5weSArPSBUSUxFX0hBTEY7XG4gICAgICBjdHgubW92ZVRvKGxvYy5weCwgbG9jLnB5KTtcbiAgICAgIGNvbnN0IHRpbGVtYXAgPSBkaXJlY3Rpb25Ub1RpbGUobGFzZXIuZGlyKTtcbiAgICAgIGN0eC5saW5lVG8obG9jLnB4ICsgdGlsZW1hcC54ICogVElMRV9IQUxGLCBsb2MucHkgKyB0aWxlbWFwLnkgKiBUSUxFX0hBTEYpO1xuICAgICAgY3R4LnN0cm9rZSgpO1xuICAgIH1cblxuICAgIC8vIERyYXcgc2VsZWN0ZWQgZWRnZSBtYXJrZXIgb24gZ3JpZFxuICAgIGxldCBzZWxlY3RlZEVkZ2VQaXhlbHMgPSB0aWxlVG9QaXhlbHMoYWRkVGlsZXMoZWRnZU51bWJlclRvTGFzZXIodGhpcy5zZWxlY3RlZEVkZ2UpLnRpbGUsIHsgeDogMSwgeTogMSB9KSk7XG4gICAgY3R4LnN0cm9rZVN0eWxlID0gXCIjRkZGRkZGXCI7XG4gICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgIGlmICh0aGlzLnNlbGVjdGVkRWRnZSA8IDYpIHtcbiAgICAgIGN0eC5tb3ZlVG8oc2VsZWN0ZWRFZGdlUGl4ZWxzLnB4ICsgVElMRV9IQUxGIC0gNSwgc2VsZWN0ZWRFZGdlUGl4ZWxzLnB5ICsgVElMRV9GVUxMIC0gNSk7XG4gICAgICBjdHgubGluZVRvKHNlbGVjdGVkRWRnZVBpeGVscy5weCArIFRJTEVfSEFMRiwgc2VsZWN0ZWRFZGdlUGl4ZWxzLnB5ICsgVElMRV9GVUxMKTtcbiAgICAgIGN0eC5saW5lVG8oc2VsZWN0ZWRFZGdlUGl4ZWxzLnB4ICsgVElMRV9IQUxGICsgNSwgc2VsZWN0ZWRFZGdlUGl4ZWxzLnB5ICsgVElMRV9GVUxMIC0gNSk7XG4gICAgfSBlbHNlIGlmICh0aGlzLnNlbGVjdGVkRWRnZSA8IDExKSB7XG4gICAgICBjdHgubW92ZVRvKHNlbGVjdGVkRWRnZVBpeGVscy5weCArIDUsIHNlbGVjdGVkRWRnZVBpeGVscy5weSArIFRJTEVfSEFMRiAtIDUpO1xuICAgICAgY3R4LmxpbmVUbyhzZWxlY3RlZEVkZ2VQaXhlbHMucHgsIHNlbGVjdGVkRWRnZVBpeGVscy5weSArIFRJTEVfSEFMRik7XG4gICAgICBjdHgubGluZVRvKHNlbGVjdGVkRWRnZVBpeGVscy5weCArIDUsIHNlbGVjdGVkRWRnZVBpeGVscy5weSArIFRJTEVfSEFMRiArIDUpO1xuICAgIH0gZWxzZSBpZiAodGhpcy5zZWxlY3RlZEVkZ2UgPCAxNikge1xuICAgICAgY3R4Lm1vdmVUbyhzZWxlY3RlZEVkZ2VQaXhlbHMucHggKyBUSUxFX0hBTEYgLSA1LCBzZWxlY3RlZEVkZ2VQaXhlbHMucHkgKyA1KTtcbiAgICAgIGN0eC5saW5lVG8oc2VsZWN0ZWRFZGdlUGl4ZWxzLnB4ICsgVElMRV9IQUxGLCBzZWxlY3RlZEVkZ2VQaXhlbHMucHkpO1xuICAgICAgY3R4LmxpbmVUbyhzZWxlY3RlZEVkZ2VQaXhlbHMucHggKyBUSUxFX0hBTEYgKyA1LCBzZWxlY3RlZEVkZ2VQaXhlbHMucHkgKyA1KTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuc2VsZWN0ZWRFZGdlIDwgMjEpIHtcbiAgICAgIGN0eC5tb3ZlVG8oc2VsZWN0ZWRFZGdlUGl4ZWxzLnB4ICsgVElMRV9GVUxMIC0gNSwgc2VsZWN0ZWRFZGdlUGl4ZWxzLnB5ICsgVElMRV9IQUxGIC0gNSk7XG4gICAgICBjdHgubGluZVRvKHNlbGVjdGVkRWRnZVBpeGVscy5weCArIFRJTEVfRlVMTCwgc2VsZWN0ZWRFZGdlUGl4ZWxzLnB5ICsgVElMRV9IQUxGKTtcbiAgICAgIGN0eC5saW5lVG8oc2VsZWN0ZWRFZGdlUGl4ZWxzLnB4ICsgVElMRV9GVUxMIC0gNSwgc2VsZWN0ZWRFZGdlUGl4ZWxzLnB5ICsgVElMRV9IQUxGICsgNSk7XG4gICAgfVxuICAgIGN0eC5zdHJva2UoKTtcblxuICAgIC8vIERyYXcgbGV2ZWwgZWRnZSBoaW50c1xuICAgIGlmIChlZGdlTGV2ZWxEYXRhKSB7XG4gICAgICBjdHguZ2xvYmFsQWxwaGEgPSAwLjE7XG4gICAgICBmb3IgKGNvbnN0IGVkZ2VEYXRhIG9mIGVkZ2VMZXZlbERhdGEpIHtcbiAgICAgICAgc2VsZWN0ZWRFZGdlUGl4ZWxzID0gdGlsZVRvUGl4ZWxzKGFkZFRpbGVzKGVkZ2VOdW1iZXJUb0xhc2VyKGVkZ2VEYXRhLmVkZ2UpLnRpbGUsIHsgeDogMSwgeTogMSB9KSk7XG4gICAgICAgIGN0eC5maWxsU3R5bGUgPSBlZGdlRGF0YS5zb2x2ZWQgPyBcIiMwMEZGMDBcIiA6IFwiI0ZGMDAwMFwiO1xuICAgICAgICBjdHguZmlsbFJlY3Qoc2VsZWN0ZWRFZGdlUGl4ZWxzLnB4LCBzZWxlY3RlZEVkZ2VQaXhlbHMucHksIFRJTEVfRlVMTCwgVElMRV9GVUxMKTtcbiAgICAgIH1cbiAgICAgIGN0eC5nbG9iYWxBbHBoYSA9IDEuMDtcbiAgICB9XG5cbiAgICAvLyBEcmF3IGVkZ2UgbnVtYmVyc1xuICAgIGZvciAobGV0IGUgPSAxOyBlIDw9IDIwOyBlKyspIHtcbiAgICAgIHNlbGVjdGVkRWRnZVBpeGVscyA9IHRpbGVUb1BpeGVscyhhZGRUaWxlcyhlZGdlTnVtYmVyVG9MYXNlcihlKS50aWxlLCB7IHg6IDEsIHk6IDEgfSkpO1xuICAgICAgY3R4LmZpbGxTdHlsZSA9IFwiIzAwMDAwMFwiO1xuICAgICAgY3R4LmZvbnQgPSBcIjI0cHggc2Fucy1zZXJpZlwiO1xuICAgICAgY3R4LnRleHRCYXNlbGluZSA9IFwibWlkZGxlXCI7XG4gICAgICBjdHguZmlsbFRleHQoZS50b1N0cmluZygpLCBzZWxlY3RlZEVkZ2VQaXhlbHMucHggKyBUSUxFX0hBTEYgLSBjdHgubWVhc3VyZVRleHQoZS50b1N0cmluZygpKS53aWR0aCAvIDIsXG4gICAgICAgIHNlbGVjdGVkRWRnZVBpeGVscy5weSArIFRJTEVfSEFMRik7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIGNsZWFyKCkge1xuICAgIHRoaXMubGFzZXJncmlkID0gbWFrZURlZmF1bHRHcmlkKCk7XG4gICAgdGhpcy5zZWxlY3RlZEVkZ2UgPSAxO1xuICAgIHRoaXMuZHJhd1BhdGggPSBbXTtcbiAgfVxuXG4gIHB1YmxpYyBwcm9jZXNzTW91c2VDbGljayh4OiBudW1iZXIsIHk6IG51bWJlciwgYnV0dG9uOiBudW1iZXIpIHtcbiAgICBjb25zdCByZWxhdGl2ZVRpbGUgPSBzdXBlci5wcm9jZXNzTW91c2VDbGljayh4LCB5LCBidXR0b24pO1xuICAgIGNvbnNvbGUubG9nKGJ1dHRvbik7XG4gICAgaWYgKHJlbGF0aXZlVGlsZSA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgaWYgKHRpbGVXaXRoaW5BcmVhSW5jbHVzaXZlKHJlbGF0aXZlVGlsZSwgeyB4OiAxLCB5OiAxIH0sIHsgeDogNSwgeTogNSB9KSkge1xuICAgICAgLy8gdGlsZSBpbiBncmlkXG4gICAgICBjb25zdCBsb2MgPSBzdWJUaWxlcyhyZWxhdGl2ZVRpbGUsIHsgeDogMSwgeTogMSB9KTtcbiAgICAgIGNvbnN0IHBpZWNlID0gZ2V0UGllY2VGcm9tR3JpZCh0aGlzLmxhc2VyZ3JpZCwgbG9jKTtcbiAgICAgIGlmIChwaWVjZSkge1xuICAgICAgICBjb25zdCByZW1vdmVkUGllY2UgPSByZW1vdmVQaWVjZUZyb21HcmlkKHRoaXMubGFzZXJncmlkLCBwaWVjZSk7XG4gICAgICAgIGlmIChidXR0b24gPT09IDApIHsgLy8gbGVmdCBtb3VzZSBidXR0b25cbiAgICAgICAgICB0b29sYmFyLnNlbGVjdGVkUGllY2UgPSByZW1vdmVkUGllY2UuaW5kZXg7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNldFBpZWNlSW5HcmlkKHRoaXMubGFzZXJncmlkLCBhdmFpbGFibGVQaWVjZXNbdG9vbGJhci5zZWxlY3RlZFBpZWNlXSwgbG9jKTtcbiAgICAgIH1cbiAgICAgIHByaW50UGF0aHMoKTtcblxuICAgICAgdGhpcy5jYWxjdWxhdGVEcmF3UGF0aFdyYXBwZXIoKTtcbiAgICB9XG5cbiAgICBjb25zdCBuZXdFZGdlID0gdGlsZVRvRWRnZU51bWJlcihhZGRUaWxlcyhyZWxhdGl2ZVRpbGUsIHsgeDogLTEsIHk6IC0xIH0pKTtcbiAgICBpZiAobmV3RWRnZSAhPT0gMCkge1xuICAgICAgdGhpcy5zZWxlY3RlZEVkZ2UgPSBuZXdFZGdlO1xuICAgIH1cbiAgICB0aGlzLmNhbGN1bGF0ZURyYXdQYXRoV3JhcHBlcigpO1xuXG4gICAgcmV0dXJuIHJlbGF0aXZlVGlsZTtcbiAgfVxuXG4gIHB1YmxpYyBjYWxjdWxhdGVEcmF3UGF0aFdyYXBwZXIoKSB7XG4gICAgdGhpcy5kcmF3UGF0aCA9IFtdO1xuICAgIHRoaXMuY2FsY3VsYXRlRHJhd1BhdGgoZWRnZU51bWJlclRvTGFzZXIodGhpcy5zZWxlY3RlZEVkZ2UpKTtcbiAgfVxuXG4gIHByaXZhdGUgY2FsY3VsYXRlRHJhd1BhdGgobGFzZXI6IExhc2VyU2VnbWVudCkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMTAwOyBpKyspIHtcbiAgICAgIGxhc2VyLnRpbGUgPSBuZXh0VGlsZShsYXNlci50aWxlLCBsYXNlci5kaXIpO1xuICAgICAgaWYgKCF0aWxlV2l0aGluQXJlYUluY2x1c2l2ZShsYXNlci50aWxlLCB7IHg6IDAsIHk6IDAgfSwgeyB4OiA0LCB5OiA0IH0pKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHBpZWNlID0gZ2V0UGllY2VGcm9tR3JpZCh0aGlzLmxhc2VyZ3JpZCwgbGFzZXIudGlsZSk7XG4gICAgICB0aGlzLmRyYXdQYXRoLnB1c2goZ2V0T3Bwb3NpdGVMYXNlclNlZ21lbnQobGFzZXIpKTtcbiAgICAgIGlmIChwaWVjZSkge1xuICAgICAgICBhcHBseVBpZWNlVG9MYXNlcihsYXNlciwgcGllY2UucGllY2VJRCk7XG4gICAgICAgIHN3aXRjaCAobGFzZXIuZGlyKSB7XG4gICAgICAgICAgY2FzZSBEaXJlY3Rpb24uU1BMSVRfTk9SVEhfU09VVEg6XG4gICAgICAgICAgICBsYXNlci5kaXIgPSBEaXJlY3Rpb24uTk9SVEg7XG4gICAgICAgICAgICB0aGlzLmRyYXdQYXRoLnB1c2goZ2V0T3Bwb3NpdGVMYXNlclNlZ21lbnQobGFzZXIpKTtcbiAgICAgICAgICAgIHRoaXMuY2FsY3VsYXRlRHJhd1BhdGgoZ2V0T3Bwb3NpdGVMYXNlclNlZ21lbnQobGFzZXIpKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgRGlyZWN0aW9uLlNQTElUX0VBU1RfV0VTVDpcbiAgICAgICAgICAgIGxhc2VyLmRpciA9IERpcmVjdGlvbi5FQVNUO1xuICAgICAgICAgICAgdGhpcy5kcmF3UGF0aC5wdXNoKGdldE9wcG9zaXRlTGFzZXJTZWdtZW50KGxhc2VyKSk7XG4gICAgICAgICAgICB0aGlzLmNhbGN1bGF0ZURyYXdQYXRoKGdldE9wcG9zaXRlTGFzZXJTZWdtZW50KGxhc2VyKSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIERpcmVjdGlvbi5OT05FOlxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9IC8vIGlmIHBpZWNlIGlzIG5vdCBudWxsXG4gICAgICB0aGlzLmRyYXdQYXRoLnB1c2goY29weUxhc2VyU2VnbWVudChsYXNlcikpO1xuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IENvbG9yIGZyb20gXCIuL0NvbG9yXCI7XG5pbXBvcnQgRGlyZWN0aW9uLCB7IGdldE9wcG9zaXRlRGlyZWN0aW9uIH0gZnJvbSBcIi4vRGlyZWN0aW9uXCI7XG5pbXBvcnQgVGlsZSwgeyBjb3B5VGlsZSB9IGZyb20gXCIuL1RpbGVcIjtcblxuZXhwb3J0IGRlZmF1bHQgaW50ZXJmYWNlIExhc2VyU2VnbWVudCB7XG4gIHRpbGU6IFRpbGU7XG4gIGRpcjogRGlyZWN0aW9uO1xuICBjb2xvcjogQ29sb3I7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRPcHBvc2l0ZUxhc2VyU2VnbWVudChsYXNlcjogTGFzZXJTZWdtZW50KTogTGFzZXJTZWdtZW50IHtcbiAgcmV0dXJuIHsgdGlsZTogY29weVRpbGUobGFzZXIudGlsZSksIGRpcjogZ2V0T3Bwb3NpdGVEaXJlY3Rpb24obGFzZXIuZGlyKSwgY29sb3I6IGxhc2VyLmNvbG9yIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjb3B5TGFzZXJTZWdtZW50KGxhc2VyOiBMYXNlclNlZ21lbnQpOiBMYXNlclNlZ21lbnQge1xuICByZXR1cm4geyB0aWxlOiBjb3B5VGlsZShsYXNlci50aWxlKSwgZGlyOiBsYXNlci5kaXIsIGNvbG9yOiBsYXNlci5jb2xvciB9O1xufVxuIiwiaW1wb3J0IHsgR3JpZFBpZWNlIH0gZnJvbSBcIi4uLy4uL0xhc2VyR3JpZFwiO1xuaW1wb3J0IFBpZWNlSUQgZnJvbSBcIi4uLy4uL1BpZWNlSURcIjtcbmltcG9ydCBUaWxlIGZyb20gXCIuLi8uLi9UaWxlXCI7XG5pbXBvcnQgeyB0aWxlVG9QaXhlbHMgfSBmcm9tIFwiLi4vRnJvbnRlbmRUaWxlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBpZWNlQ29tcG9uZW50IHtcbiAgcHVibGljIGlzUGxhY2VkOiBib29sZWFuO1xuICBwcml2YXRlIGltZzogSFRNTEltYWdlRWxlbWVudDtcblxuICBjb25zdHJ1Y3RvcihzcmM6IHN0cmluZywgZHJhdzogKCkgPT4gdm9pZCkge1xuICAgIHRoaXMuaXNQbGFjZWQgPSBmYWxzZTtcbiAgICB0aGlzLmltZyA9IG5ldyBJbWFnZSgpO1xuICAgIHRoaXMuaW1nLm9ubG9hZCA9ICgpID0+IHsgZHJhdygpOyB9O1xuICAgIHRoaXMuaW1nLnNyYyA9IHNyYztcbiAgfVxuXG4gIHB1YmxpYyBkcmF3QXQodGlsZTogVGlsZSwgY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQpIHtcbiAgICBjb25zdCBwb3MgPSB0aWxlVG9QaXhlbHModGlsZSk7XG4gICAgY3R4LmRyYXdJbWFnZSh0aGlzLmltZywgcG9zLnB4LCBwb3MucHkpO1xuICB9XG59XG4iLCJpbXBvcnQgVGlsZSwgeyBhZGRUaWxlcywgdGlsZU5vdE5lZ2F0aXZlIH0gZnJvbSBcIi4uLy4uL1RpbGVcIjtcbmltcG9ydCB7IGF2YWlsYWJsZVBpZWNlcywgcGllY2VDb21wb25lbnRzIH0gZnJvbSBcIi4uL0Zyb250ZW5kTGFzZXJnYW1lXCI7XG5pbXBvcnQgeyBUSUxFX0ZVTEwsIHRpbGVUb1BpeGVscyB9IGZyb20gXCIuLi9Gcm9udGVuZFRpbGVcIjtcbmltcG9ydCBDYW52YXNDb21wb25lbnQgZnJvbSBcIi4vQ2FudmFzQ29tcG9uZW50XCI7XG5cbi8qKlxuICogVGhlIHRvb2xiYXIgdG8gc2VsZWN0IHRoZSBwaWVjZXMgdG8gcHV0IGluIHRoZSBncmlkXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRvb2xiYXJDb21wb25lbnQgZXh0ZW5kcyBDYW52YXNDb21wb25lbnQge1xuICBwdWJsaWMgc2VsZWN0ZWRQaWVjZTogbnVtYmVyO1xuXG4gIC8qKlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3JjXG4gICAqIEBwYXJhbSB7VGlsZX0gdGlsZVxuICAgKiBAcGFyYW0ge251bWJlcn0gd2lkdGhJblRpbGVzXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBoZWlnaHRJblRpbGVzXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbb2Zmc2V0WCA9IDBdIHBpeGVsIG9mZnNldCBmb3IgdGhlIGltYWdlXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbb2Zmc2V0WSA9IDBdIHBpeGVsIG9mZnNldCBmb3IgdGhlIGltYWdlXG4gICAqL1xuICBjb25zdHJ1Y3RvcihcbiAgICBzcmM6IHN0cmluZywgdGlsZTogVGlsZSwgd2lkdGhJblRpbGVzOiBudW1iZXIsIGhlaWdodEluVGlsZXM6IG51bWJlcixcbiAgICBkcmF3OiAoKSA9PiB2b2lkLCBvZmZzZXRYID0gMCwgb2Zmc2V0WSA9IDApIHtcbiAgICBzdXBlcihzcmMsIHRpbGUsIHdpZHRoSW5UaWxlcywgaGVpZ2h0SW5UaWxlcywgZHJhdywgb2Zmc2V0WCwgb2Zmc2V0WSk7XG4gICAgdGhpcy5zZWxlY3RlZFBpZWNlID0gMDtcbiAgfVxuXG4gIC8qKlxuICAgKiBkcmF3cyB0aGUgaW1hZ2UsIHRoZSBwaWVjZXMgYW5kIHRoZSBoaWdobGlnaHRcbiAgICovXG4gIHB1YmxpYyBkcmF3KGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEKSB7XG4gICAgc3VwZXIuZHJhdyhjdHgpO1xuXG4gICAgLy8gZHJhdyBwaWVjZXMgaW4gZWFjaCBib3hcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGF2YWlsYWJsZVBpZWNlcy5sZW5ndGg7IGkrKykge1xuICAgICAgcGllY2VDb21wb25lbnRzW2F2YWlsYWJsZVBpZWNlc1tpXS5waWVjZUlEXS5kcmF3QXQoYWRkVGlsZXModGhpcy50aWxlLCB7eDogaSwgeTogMH0pLCBjdHgpO1xuICAgIH1cblxuICAgIC8vIGRyYXcgdGhlIGdyZWVuIGFuZCByZWQgaGlnaGxpZ2h0c1xuICAgIGN0eC5maWxsU3R5bGUgPSBcImdyZWVuXCI7XG4gICAgY3R4Lmdsb2JhbEFscGhhID0gMC4yO1xuICAgIGxldCBsb2MgPSB0aWxlVG9QaXhlbHMoYWRkVGlsZXModGhpcy50aWxlLCB7eDogdGhpcy5zZWxlY3RlZFBpZWNlLCB5OiAwfSkpO1xuICAgIGN0eC5maWxsUmVjdChsb2MucHgsIGxvYy5weSwgVElMRV9GVUxMLCBUSUxFX0ZVTEwpO1xuXG4gICAgY3R4LmZpbGxTdHlsZSA9IFwicmVkXCI7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhdmFpbGFibGVQaWVjZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IHBpZWNlID0gYXZhaWxhYmxlUGllY2VzW2ldO1xuICAgICAgaWYgKGkgIT09IHRoaXMuc2VsZWN0ZWRQaWVjZSAmJiB0aWxlTm90TmVnYXRpdmUocGllY2UudGlsZSkpIHtcbiAgICAgICAgbG9jID0gdGlsZVRvUGl4ZWxzKGFkZFRpbGVzKHRoaXMudGlsZSwge3g6IGksIHk6IDB9KSk7XG4gICAgICAgIGN0eC5maWxsUmVjdChsb2MucHgsIGxvYy5weSwgVElMRV9GVUxMLCBUSUxFX0ZVTEwpO1xuICAgICAgfVxuICAgIH1cbiAgICBjdHguZ2xvYmFsQWxwaGEgPSAxLjA7XG4gIH1cblxuICAvKipcbiAgICogU2VsZWN0cyBhIHBpZWNlIGlmIGNsaWNrZWQgb24uXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB4IGEgcGl4ZWwgeCB2YWx1ZVxuICAgKiBAcGFyYW0ge251bWJlcn0geSBhIHBpeGVsIHkgdmFsdWVcbiAgICovXG4gIHB1YmxpYyBwcm9jZXNzTW91c2VDbGljayh4OiBudW1iZXIsIHk6IG51bWJlciwgYnV0dG9uOiBudW1iZXIpIHtcbiAgICBjb25zdCByZWxhdGl2ZVRpbGUgPSBzdXBlci5wcm9jZXNzTW91c2VDbGljayh4LCB5LCBidXR0b24pO1xuICAgIGlmIChyZWxhdGl2ZVRpbGUgIT09IG51bGwpIHtcbiAgICAgIHRoaXMuc2VsZWN0ZWRQaWVjZSA9IHJlbGF0aXZlVGlsZS54O1xuICAgIH1cbiAgICByZXR1cm4gcmVsYXRpdmVUaWxlO1xuICB9XG5cbiAgLyoqXG4gICAqIEZldGNoZXMgdGhlIHNlbGVjdGVkIHBpZWNlIG9iamVjdC5cbiAgICogQHJldHVybnMge1BpZWNlfVxuICAgKi9cbiAgcHVibGljIGdldFNlbGVjdGVkUGllY2VDb21wb25lbnQoKSB7XG4gICAgcmV0dXJuIHBpZWNlQ29tcG9uZW50c1t0aGlzLnNlbGVjdGVkUGllY2VdO1xuICB9XG59XG4iLCJpbXBvcnQgUGF0aCBmcm9tIFwiLi4vUGF0aFwiO1xuaW1wb3J0IHtlbmRpbmdUb1N0cmluZ30gZnJvbSBcIi4vRnJvbnRlbmRFbmRpbmdcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIHBhdGhUb1N0cmluZyhwYXRoOiBQYXRoKSB7XG4gIHJldHVybiBzdGFydFRvU3RyaW5nKHBhdGgpICsgZW5kaW5nTGlzdFRvU3RyaW5nKHBhdGgpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc3RhcnRUb1N0cmluZyhwYXRoOiBQYXRoKSB7XG4gIGxldCBzdHIgPSBgJHtwYXRoLnN0YXJ0fWA7XG4gIGlmIChwYXRoLnN0YXJ0IDwgMTApIHtcbiAgICBzdHIgKz0gXCIgIC0+IFwiO1xuICB9IGVsc2Uge1xuICAgIHN0ciArPSBcIiAtPiBcIjtcbiAgfVxuICByZXR1cm4gc3RyO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZW5kaW5nTGlzdFRvU3RyaW5nKHBhdGg6IFBhdGgpIHtcbiAgaWYgKHBhdGguZW5kaW5ncy5sZW5ndGggPiAxKSB7XG4gICAgbGV0IHN0ciA9IGB7JHtlbmRpbmdUb1N0cmluZyhwYXRoLmVuZGluZ3NbMF0pfSwgYDtcbiAgICBmb3IgKGxldCBjdXJFbmRpbmcgPSAxOyBjdXJFbmRpbmcgPCBwYXRoLmVuZGluZ3MubGVuZ3RoIC0gMTsgY3VyRW5kaW5nKyspIHtcbiAgICAgIHN0ciArPSBgJHtlbmRpbmdUb1N0cmluZyhwYXRoLmVuZGluZ3NbY3VyRW5kaW5nXSl9LCBgO1xuICAgIH1cbiAgICBzdHIgKz0gYCR7ZW5kaW5nVG9TdHJpbmcocGF0aC5lbmRpbmdzW3BhdGguZW5kaW5ncy5sZW5ndGggLSAxXSl9fWA7XG4gICAgcmV0dXJuIHN0cjtcbiAgfVxuICByZXR1cm4gZW5kaW5nVG9TdHJpbmcocGF0aC5lbmRpbmdzWzBdKTtcbn1cbiIsImltcG9ydCB7Y29sb3JUb05hbWV9IGZyb20gXCIuLi9Db2xvclwiO1xuaW1wb3J0IEVuZGluZywge0VuZH0gZnJvbSBcIi4uL0VuZGluZ1wiO1xuXG5leHBvcnQgZnVuY3Rpb24gZW5kaW5nVG9TdHJpbmcoZW5kaW5nOiBFbmRpbmcpIHtcbiAgY29uc3QgY29sb3JTdHJpbmcgPSBjb2xvclRvTmFtZShlbmRpbmcuY29sb3IpO1xuICByZXR1cm4gZW5kaW5nLmVuZCA9PT0gRW5kLkJsb2NrZWQgPyBgYmxvY2tlZCAke2NvbG9yU3RyaW5nfWAgOlxuICAgIGVuZGluZy5lbmQgPT09IEVuZC5Mb29wID8gYGxvb3AgJHtjb2xvclN0cmluZ31gIDpcbiAgICBgJHtlbmRpbmcuZW5kfSAke2NvbG9yU3RyaW5nfWA7XG59XG4iLCJleHBvcnQgY29uc3QgaW1wb3J0UHJlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJpbXBvcnRlZC1wcmVcIikgYXMgSFRNTFByZUVsZW1lbnQ7XG5leHBvcnQgY29uc3QgcGF0aHNQcmUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInBhdGhzLXByZVwiKSBhcyBIVE1MUHJlRWxlbWVudDtcbmV4cG9ydCBjb25zdCBjYW52YXMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImxhc2VyLWdhbWUtY2FudmFzXCIpIGFzIEhUTUxDYW52YXNFbGVtZW50O1xuZXhwb3J0IGNvbnN0IHZpY3RvcnlQID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ2aWN0b3J5LXBcIikgYXMgSFRNTFBhcmFncmFwaEVsZW1lbnQ7XG5cbmV4cG9ydCBjb25zdCBzZWVkTGV2ZWxCdXR0b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInNlZWQtbGV2ZWxcIikgYXMgSFRNTElucHV0RWxlbWVudDtcbmV4cG9ydCBjb25zdCBkYWlseUxldmVsQnV0dG9uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJkYWlseS1sZXZlbFwiKSBhcyBIVE1MSW5wdXRFbGVtZW50O1xuZXhwb3J0IGNvbnN0IGVkZ2VzSW5wdXQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImVkZ2VzXCIpIGFzIEhUTUxJbnB1dEVsZW1lbnQ7XG5leHBvcnQgY29uc3Qgc2VlZElucHV0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzZWVkXCIpIGFzIEhUTUxJbnB1dEVsZW1lbnQ7XG5cbmV4cG9ydCBjb25zdCBjdHggPSBjYW52YXMuZ2V0Q29udGV4dChcIjJkXCIpIGFzIENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRDtcbiIsImltcG9ydCBQYXRoLCB7IGVxdWFsUGF0aHMgfSBmcm9tIFwiLi9QYXRoXCI7XG5pbXBvcnQgKiBhcyBzZWVkcmFuZG9tIGZyb20gXCJzZWVkcmFuZG9tXCI7XG5pbXBvcnQgeyBHcmlkUGllY2UsIGdldFBpZWNlRnJvbUdyaWQsIHNldFBpZWNlSW5HcmlkLCBtYWtlRGVmYXVsdEdyaWQgfSBmcm9tIFwiLi9MYXNlckdyaWRcIjtcbmltcG9ydCBUaWxlIGZyb20gXCIuL1RpbGVcIjtcblxuY29uc3QgZGVmYXVsdEdyaWQgPSBtYWtlRGVmYXVsdEdyaWQoKTtcblxuZXhwb3J0IGZ1bmN0aW9uIGdlbmVyYXRlTGV2ZWwoc2VlZCA9IERhdGUubm93KCkudG9TdHJpbmcoKSwgbnVtUGF0aHMgPSA1KSB7XG4gIGNvbnN0IHJuZyA9IHNlZWRyYW5kb20oc2VlZCk7XG5cbiAgY29uc3QgaW50ZXJlc3RpbmdQYXRoczogUGF0aFtdID0gW107XG4gIGNvbnN0IGJvcmluZ1BhdGhzOiBQYXRoW10gPSBbXTtcblxuICBjb25zdCBhdmFpbGFibGVQaWVjZXM6IEdyaWRQaWVjZVtdID0gW107XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCA4OyBpKyspIHtcbiAgICBhdmFpbGFibGVQaWVjZXNbaV0gPSB7IHBpZWNlSUQ6IE1hdGguZmxvb3Iocm5nKCkgKiA4KSwgdGlsZTogeyB4OiAtMSwgeTogLTEgfSwgaW5kZXg6IGkgfTtcbiAgfVxuXG4gIGNvbnN0IHJhbmRvbUdyaWQgPSBtYWtlRGVmYXVsdEdyaWQoKTtcblxuICBhdmFpbGFibGVQaWVjZXMuZm9yRWFjaCgocGllY2U6IEdyaWRQaWVjZSkgPT4ge1xuICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICBjb25zdCByYW5kVGlsZTogVGlsZSA9IHsgeDogTWF0aC5mbG9vcihybmcoKSAqIDUpLCB5OiBNYXRoLmZsb29yKHJuZygpICogNSkgfTtcbiAgICAgIGlmICghZ2V0UGllY2VGcm9tR3JpZChyYW5kb21HcmlkLCByYW5kVGlsZSkpIHtcbiAgICAgICAgc2V0UGllY2VJbkdyaWQocmFuZG9tR3JpZCwgcGllY2UsIHJhbmRUaWxlKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICBjb25zdCBncmlkUGF0aHMgPSByYW5kb21HcmlkLnBhdGhzO1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgZ3JpZFBhdGhzLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKCFlcXVhbFBhdGhzKGdyaWRQYXRoc1tpXSwgZGVmYXVsdEdyaWQucGF0aHNbaV0pKSB7XG4gICAgICBpbnRlcmVzdGluZ1BhdGhzLnB1c2goZ3JpZFBhdGhzW2ldKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYm9yaW5nUGF0aHMucHVzaChncmlkUGF0aHNbaV0pO1xuICAgIH1cbiAgfVxuXG4gIC8vIHNodWZmbGUgY2xlYW5zZWRFbmRpbmdzXG4gIHNodWZmbGUoaW50ZXJlc3RpbmdQYXRocywgcm5nKTtcblxuICBsZXQgcmFuZG9tUGF0aHM6IFBhdGhbXSA9IGludGVyZXN0aW5nUGF0aHMuc2xpY2UoMCwgbnVtUGF0aHMpO1xuXG4gIGlmIChyYW5kb21QYXRocy5sZW5ndGggPCBudW1QYXRocykge1xuICAgIHNodWZmbGUoYm9yaW5nUGF0aHMsIHJuZyk7XG4gICAgcmFuZG9tUGF0aHMgPSByYW5kb21QYXRocy5jb25jYXQoYm9yaW5nUGF0aHMuc2xpY2UoMCwgbnVtUGF0aHMgLSByYW5kb21QYXRocy5sZW5ndGgpKTtcbiAgfVxuXG4gIHJhbmRvbVBhdGhzLnNvcnQoKGEsIGIpID0+IGEuc3RhcnQgPCBiLnN0YXJ0ID8gLTEgOiAxKTtcblxuICBmb3IgKGNvbnN0IHBpZWNlIG9mIGF2YWlsYWJsZVBpZWNlcykge1xuICAgIHBpZWNlLnRpbGUgPSB7IHg6IC0xLCB5OiAtMSB9O1xuICB9XG5cbiAgcmV0dXJuIHsgcGF0aHM6IHJhbmRvbVBhdGhzLCBhdmFpbGFibGVQaWVjZXMgfTtcbn1cblxuZnVuY3Rpb24gc2h1ZmZsZShwYXRoczogUGF0aFtdLCBybmc6IGFueSkge1xuICBsZXQgbSA9IHBhdGhzLmxlbmd0aDtcbiAgbGV0IHQ6IFBhdGg7IGxldCBpOiBudW1iZXI7XG4gIHdoaWxlIChtKSB7XG4gICAgaSA9IE1hdGguZmxvb3Iocm5nKCkgKiBtLS0pO1xuXG4gICAgdCA9IHBhdGhzW21dO1xuICAgIHBhdGhzW21dID0gcGF0aHNbaV07XG4gICAgcGF0aHNbaV0gPSB0O1xuICB9XG59IiwiLy8gQSBwb3J0IG9mIGFuIGFsZ29yaXRobSBieSBKb2hhbm5lcyBCYWFnw7hlIDxiYWFnb2VAYmFhZ29lLmNvbT4sIDIwMTBcbi8vIGh0dHA6Ly9iYWFnb2UuY29tL2VuL1JhbmRvbU11c2luZ3MvamF2YXNjcmlwdC9cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9ucXVpbmxhbi9iZXR0ZXItcmFuZG9tLW51bWJlcnMtZm9yLWphdmFzY3JpcHQtbWlycm9yXG4vLyBPcmlnaW5hbCB3b3JrIGlzIHVuZGVyIE1JVCBsaWNlbnNlIC1cblxuLy8gQ29weXJpZ2h0IChDKSAyMDEwIGJ5IEpvaGFubmVzIEJhYWfDuGUgPGJhYWdvZUBiYWFnb2Uub3JnPlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbi8vIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbi8vIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbi8vIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbi8vIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuLy8gZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vIFxuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbi8vIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy8gXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4vLyBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbi8vIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuLy8gQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuLy8gTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbi8vIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbi8vIFRIRSBTT0ZUV0FSRS5cblxuXG5cbihmdW5jdGlvbihnbG9iYWwsIG1vZHVsZSwgZGVmaW5lKSB7XG5cbmZ1bmN0aW9uIEFsZWEoc2VlZCkge1xuICB2YXIgbWUgPSB0aGlzLCBtYXNoID0gTWFzaCgpO1xuXG4gIG1lLm5leHQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgdCA9IDIwOTE2MzkgKiBtZS5zMCArIG1lLmMgKiAyLjMyODMwNjQzNjUzODY5NjNlLTEwOyAvLyAyXi0zMlxuICAgIG1lLnMwID0gbWUuczE7XG4gICAgbWUuczEgPSBtZS5zMjtcbiAgICByZXR1cm4gbWUuczIgPSB0IC0gKG1lLmMgPSB0IHwgMCk7XG4gIH07XG5cbiAgLy8gQXBwbHkgdGhlIHNlZWRpbmcgYWxnb3JpdGhtIGZyb20gQmFhZ29lLlxuICBtZS5jID0gMTtcbiAgbWUuczAgPSBtYXNoKCcgJyk7XG4gIG1lLnMxID0gbWFzaCgnICcpO1xuICBtZS5zMiA9IG1hc2goJyAnKTtcbiAgbWUuczAgLT0gbWFzaChzZWVkKTtcbiAgaWYgKG1lLnMwIDwgMCkgeyBtZS5zMCArPSAxOyB9XG4gIG1lLnMxIC09IG1hc2goc2VlZCk7XG4gIGlmIChtZS5zMSA8IDApIHsgbWUuczEgKz0gMTsgfVxuICBtZS5zMiAtPSBtYXNoKHNlZWQpO1xuICBpZiAobWUuczIgPCAwKSB7IG1lLnMyICs9IDE7IH1cbiAgbWFzaCA9IG51bGw7XG59XG5cbmZ1bmN0aW9uIGNvcHkoZiwgdCkge1xuICB0LmMgPSBmLmM7XG4gIHQuczAgPSBmLnMwO1xuICB0LnMxID0gZi5zMTtcbiAgdC5zMiA9IGYuczI7XG4gIHJldHVybiB0O1xufVxuXG5mdW5jdGlvbiBpbXBsKHNlZWQsIG9wdHMpIHtcbiAgdmFyIHhnID0gbmV3IEFsZWEoc2VlZCksXG4gICAgICBzdGF0ZSA9IG9wdHMgJiYgb3B0cy5zdGF0ZSxcbiAgICAgIHBybmcgPSB4Zy5uZXh0O1xuICBwcm5nLmludDMyID0gZnVuY3Rpb24oKSB7IHJldHVybiAoeGcubmV4dCgpICogMHgxMDAwMDAwMDApIHwgMDsgfVxuICBwcm5nLmRvdWJsZSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBwcm5nKCkgKyAocHJuZygpICogMHgyMDAwMDAgfCAwKSAqIDEuMTEwMjIzMDI0NjI1MTU2NWUtMTY7IC8vIDJeLTUzXG4gIH07XG4gIHBybmcucXVpY2sgPSBwcm5nO1xuICBpZiAoc3RhdGUpIHtcbiAgICBpZiAodHlwZW9mKHN0YXRlKSA9PSAnb2JqZWN0JykgY29weShzdGF0ZSwgeGcpO1xuICAgIHBybmcuc3RhdGUgPSBmdW5jdGlvbigpIHsgcmV0dXJuIGNvcHkoeGcsIHt9KTsgfVxuICB9XG4gIHJldHVybiBwcm5nO1xufVxuXG5mdW5jdGlvbiBNYXNoKCkge1xuICB2YXIgbiA9IDB4ZWZjODI0OWQ7XG5cbiAgdmFyIG1hc2ggPSBmdW5jdGlvbihkYXRhKSB7XG4gICAgZGF0YSA9IGRhdGEudG9TdHJpbmcoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyBpKyspIHtcbiAgICAgIG4gKz0gZGF0YS5jaGFyQ29kZUF0KGkpO1xuICAgICAgdmFyIGggPSAwLjAyNTE5NjAzMjgyNDE2OTM4ICogbjtcbiAgICAgIG4gPSBoID4+PiAwO1xuICAgICAgaCAtPSBuO1xuICAgICAgaCAqPSBuO1xuICAgICAgbiA9IGggPj4+IDA7XG4gICAgICBoIC09IG47XG4gICAgICBuICs9IGggKiAweDEwMDAwMDAwMDsgLy8gMl4zMlxuICAgIH1cbiAgICByZXR1cm4gKG4gPj4+IDApICogMi4zMjgzMDY0MzY1Mzg2OTYzZS0xMDsgLy8gMl4tMzJcbiAgfTtcblxuICByZXR1cm4gbWFzaDtcbn1cblxuXG5pZiAobW9kdWxlICYmIG1vZHVsZS5leHBvcnRzKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gaW1wbDtcbn0gZWxzZSBpZiAoZGVmaW5lICYmIGRlZmluZS5hbWQpIHtcbiAgZGVmaW5lKGZ1bmN0aW9uKCkgeyByZXR1cm4gaW1wbDsgfSk7XG59IGVsc2Uge1xuICB0aGlzLmFsZWEgPSBpbXBsO1xufVxuXG59KShcbiAgdGhpcyxcbiAgKHR5cGVvZiBtb2R1bGUpID09ICdvYmplY3QnICYmIG1vZHVsZSwgICAgLy8gcHJlc2VudCBpbiBub2RlLmpzXG4gICh0eXBlb2YgZGVmaW5lKSA9PSAnZnVuY3Rpb24nICYmIGRlZmluZSAgIC8vIHByZXNlbnQgd2l0aCBhbiBBTUQgbG9hZGVyXG4pO1xuXG5cbiIsIi8vIEEgSmF2YXNjcmlwdCBpbXBsZW1lbnRhaW9uIG9mIHRoZSBcInhvcjEyOFwiIHBybmcgYWxnb3JpdGhtIGJ5XG4vLyBHZW9yZ2UgTWFyc2FnbGlhLiAgU2VlIGh0dHA6Ly93d3cuanN0YXRzb2Z0Lm9yZy92MDgvaTE0L3BhcGVyXG5cbihmdW5jdGlvbihnbG9iYWwsIG1vZHVsZSwgZGVmaW5lKSB7XG5cbmZ1bmN0aW9uIFhvckdlbihzZWVkKSB7XG4gIHZhciBtZSA9IHRoaXMsIHN0cnNlZWQgPSAnJztcblxuICBtZS54ID0gMDtcbiAgbWUueSA9IDA7XG4gIG1lLnogPSAwO1xuICBtZS53ID0gMDtcblxuICAvLyBTZXQgdXAgZ2VuZXJhdG9yIGZ1bmN0aW9uLlxuICBtZS5uZXh0ID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHQgPSBtZS54IF4gKG1lLnggPDwgMTEpO1xuICAgIG1lLnggPSBtZS55O1xuICAgIG1lLnkgPSBtZS56O1xuICAgIG1lLnogPSBtZS53O1xuICAgIHJldHVybiBtZS53IF49IChtZS53ID4+PiAxOSkgXiB0IF4gKHQgPj4+IDgpO1xuICB9O1xuXG4gIGlmIChzZWVkID09PSAoc2VlZCB8IDApKSB7XG4gICAgLy8gSW50ZWdlciBzZWVkLlxuICAgIG1lLnggPSBzZWVkO1xuICB9IGVsc2Uge1xuICAgIC8vIFN0cmluZyBzZWVkLlxuICAgIHN0cnNlZWQgKz0gc2VlZDtcbiAgfVxuXG4gIC8vIE1peCBpbiBzdHJpbmcgc2VlZCwgdGhlbiBkaXNjYXJkIGFuIGluaXRpYWwgYmF0Y2ggb2YgNjQgdmFsdWVzLlxuICBmb3IgKHZhciBrID0gMDsgayA8IHN0cnNlZWQubGVuZ3RoICsgNjQ7IGsrKykge1xuICAgIG1lLnggXj0gc3Ryc2VlZC5jaGFyQ29kZUF0KGspIHwgMDtcbiAgICBtZS5uZXh0KCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY29weShmLCB0KSB7XG4gIHQueCA9IGYueDtcbiAgdC55ID0gZi55O1xuICB0LnogPSBmLno7XG4gIHQudyA9IGYudztcbiAgcmV0dXJuIHQ7XG59XG5cbmZ1bmN0aW9uIGltcGwoc2VlZCwgb3B0cykge1xuICB2YXIgeGcgPSBuZXcgWG9yR2VuKHNlZWQpLFxuICAgICAgc3RhdGUgPSBvcHRzICYmIG9wdHMuc3RhdGUsXG4gICAgICBwcm5nID0gZnVuY3Rpb24oKSB7IHJldHVybiAoeGcubmV4dCgpID4+PiAwKSAvIDB4MTAwMDAwMDAwOyB9O1xuICBwcm5nLmRvdWJsZSA9IGZ1bmN0aW9uKCkge1xuICAgIGRvIHtcbiAgICAgIHZhciB0b3AgPSB4Zy5uZXh0KCkgPj4+IDExLFxuICAgICAgICAgIGJvdCA9ICh4Zy5uZXh0KCkgPj4+IDApIC8gMHgxMDAwMDAwMDAsXG4gICAgICAgICAgcmVzdWx0ID0gKHRvcCArIGJvdCkgLyAoMSA8PCAyMSk7XG4gICAgfSB3aGlsZSAocmVzdWx0ID09PSAwKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuICBwcm5nLmludDMyID0geGcubmV4dDtcbiAgcHJuZy5xdWljayA9IHBybmc7XG4gIGlmIChzdGF0ZSkge1xuICAgIGlmICh0eXBlb2Yoc3RhdGUpID09ICdvYmplY3QnKSBjb3B5KHN0YXRlLCB4Zyk7XG4gICAgcHJuZy5zdGF0ZSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gY29weSh4Zywge30pOyB9XG4gIH1cbiAgcmV0dXJuIHBybmc7XG59XG5cbmlmIChtb2R1bGUgJiYgbW9kdWxlLmV4cG9ydHMpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBpbXBsO1xufSBlbHNlIGlmIChkZWZpbmUgJiYgZGVmaW5lLmFtZCkge1xuICBkZWZpbmUoZnVuY3Rpb24oKSB7IHJldHVybiBpbXBsOyB9KTtcbn0gZWxzZSB7XG4gIHRoaXMueG9yMTI4ID0gaW1wbDtcbn1cblxufSkoXG4gIHRoaXMsXG4gICh0eXBlb2YgbW9kdWxlKSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUsICAgIC8vIHByZXNlbnQgaW4gbm9kZS5qc1xuICAodHlwZW9mIGRlZmluZSkgPT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUgICAvLyBwcmVzZW50IHdpdGggYW4gQU1EIGxvYWRlclxuKTtcblxuXG4iLCIvLyBBIEphdmFzY3JpcHQgaW1wbGVtZW50YWlvbiBvZiB0aGUgXCJ4b3J3b3dcIiBwcm5nIGFsZ29yaXRobSBieVxuLy8gR2VvcmdlIE1hcnNhZ2xpYS4gIFNlZSBodHRwOi8vd3d3LmpzdGF0c29mdC5vcmcvdjA4L2kxNC9wYXBlclxuXG4oZnVuY3Rpb24oZ2xvYmFsLCBtb2R1bGUsIGRlZmluZSkge1xuXG5mdW5jdGlvbiBYb3JHZW4oc2VlZCkge1xuICB2YXIgbWUgPSB0aGlzLCBzdHJzZWVkID0gJyc7XG5cbiAgLy8gU2V0IHVwIGdlbmVyYXRvciBmdW5jdGlvbi5cbiAgbWUubmV4dCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciB0ID0gKG1lLnggXiAobWUueCA+Pj4gMikpO1xuICAgIG1lLnggPSBtZS55OyBtZS55ID0gbWUuejsgbWUueiA9IG1lLnc7IG1lLncgPSBtZS52O1xuICAgIHJldHVybiAobWUuZCA9IChtZS5kICsgMzYyNDM3IHwgMCkpICtcbiAgICAgICAobWUudiA9IChtZS52IF4gKG1lLnYgPDwgNCkpIF4gKHQgXiAodCA8PCAxKSkpIHwgMDtcbiAgfTtcblxuICBtZS54ID0gMDtcbiAgbWUueSA9IDA7XG4gIG1lLnogPSAwO1xuICBtZS53ID0gMDtcbiAgbWUudiA9IDA7XG5cbiAgaWYgKHNlZWQgPT09IChzZWVkIHwgMCkpIHtcbiAgICAvLyBJbnRlZ2VyIHNlZWQuXG4gICAgbWUueCA9IHNlZWQ7XG4gIH0gZWxzZSB7XG4gICAgLy8gU3RyaW5nIHNlZWQuXG4gICAgc3Ryc2VlZCArPSBzZWVkO1xuICB9XG5cbiAgLy8gTWl4IGluIHN0cmluZyBzZWVkLCB0aGVuIGRpc2NhcmQgYW4gaW5pdGlhbCBiYXRjaCBvZiA2NCB2YWx1ZXMuXG4gIGZvciAodmFyIGsgPSAwOyBrIDwgc3Ryc2VlZC5sZW5ndGggKyA2NDsgaysrKSB7XG4gICAgbWUueCBePSBzdHJzZWVkLmNoYXJDb2RlQXQoaykgfCAwO1xuICAgIGlmIChrID09IHN0cnNlZWQubGVuZ3RoKSB7XG4gICAgICBtZS5kID0gbWUueCA8PCAxMCBeIG1lLnggPj4+IDQ7XG4gICAgfVxuICAgIG1lLm5leHQoKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjb3B5KGYsIHQpIHtcbiAgdC54ID0gZi54O1xuICB0LnkgPSBmLnk7XG4gIHQueiA9IGYuejtcbiAgdC53ID0gZi53O1xuICB0LnYgPSBmLnY7XG4gIHQuZCA9IGYuZDtcbiAgcmV0dXJuIHQ7XG59XG5cbmZ1bmN0aW9uIGltcGwoc2VlZCwgb3B0cykge1xuICB2YXIgeGcgPSBuZXcgWG9yR2VuKHNlZWQpLFxuICAgICAgc3RhdGUgPSBvcHRzICYmIG9wdHMuc3RhdGUsXG4gICAgICBwcm5nID0gZnVuY3Rpb24oKSB7IHJldHVybiAoeGcubmV4dCgpID4+PiAwKSAvIDB4MTAwMDAwMDAwOyB9O1xuICBwcm5nLmRvdWJsZSA9IGZ1bmN0aW9uKCkge1xuICAgIGRvIHtcbiAgICAgIHZhciB0b3AgPSB4Zy5uZXh0KCkgPj4+IDExLFxuICAgICAgICAgIGJvdCA9ICh4Zy5uZXh0KCkgPj4+IDApIC8gMHgxMDAwMDAwMDAsXG4gICAgICAgICAgcmVzdWx0ID0gKHRvcCArIGJvdCkgLyAoMSA8PCAyMSk7XG4gICAgfSB3aGlsZSAocmVzdWx0ID09PSAwKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuICBwcm5nLmludDMyID0geGcubmV4dDtcbiAgcHJuZy5xdWljayA9IHBybmc7XG4gIGlmIChzdGF0ZSkge1xuICAgIGlmICh0eXBlb2Yoc3RhdGUpID09ICdvYmplY3QnKSBjb3B5KHN0YXRlLCB4Zyk7XG4gICAgcHJuZy5zdGF0ZSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gY29weSh4Zywge30pOyB9XG4gIH1cbiAgcmV0dXJuIHBybmc7XG59XG5cbmlmIChtb2R1bGUgJiYgbW9kdWxlLmV4cG9ydHMpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBpbXBsO1xufSBlbHNlIGlmIChkZWZpbmUgJiYgZGVmaW5lLmFtZCkge1xuICBkZWZpbmUoZnVuY3Rpb24oKSB7IHJldHVybiBpbXBsOyB9KTtcbn0gZWxzZSB7XG4gIHRoaXMueG9yd293ID0gaW1wbDtcbn1cblxufSkoXG4gIHRoaXMsXG4gICh0eXBlb2YgbW9kdWxlKSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUsICAgIC8vIHByZXNlbnQgaW4gbm9kZS5qc1xuICAodHlwZW9mIGRlZmluZSkgPT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUgICAvLyBwcmVzZW50IHdpdGggYW4gQU1EIGxvYWRlclxuKTtcblxuXG4iLCIvLyBBIEphdmFzY3JpcHQgaW1wbGVtZW50YWlvbiBvZiB0aGUgXCJ4b3JzaGlmdDdcIiBhbGdvcml0aG0gYnlcbi8vIEZyYW7Dp29pcyBQYW5uZXRvbiBhbmQgUGllcnJlIEwnZWN1eWVyOlxuLy8gXCJPbiB0aGUgWG9yZ3NoaWZ0IFJhbmRvbSBOdW1iZXIgR2VuZXJhdG9yc1wiXG4vLyBodHRwOi8vc2FsdWMuZW5nci51Y29ubi5lZHUvcmVmcy9jcnlwdG8vcm5nL3Bhbm5ldG9uMDVvbnRoZXhvcnNoaWZ0LnBkZlxuXG4oZnVuY3Rpb24oZ2xvYmFsLCBtb2R1bGUsIGRlZmluZSkge1xuXG5mdW5jdGlvbiBYb3JHZW4oc2VlZCkge1xuICB2YXIgbWUgPSB0aGlzO1xuXG4gIC8vIFNldCB1cCBnZW5lcmF0b3IgZnVuY3Rpb24uXG4gIG1lLm5leHQgPSBmdW5jdGlvbigpIHtcbiAgICAvLyBVcGRhdGUgeG9yIGdlbmVyYXRvci5cbiAgICB2YXIgWCA9IG1lLngsIGkgPSBtZS5pLCB0LCB2LCB3O1xuICAgIHQgPSBYW2ldOyB0IF49ICh0ID4+PiA3KTsgdiA9IHQgXiAodCA8PCAyNCk7XG4gICAgdCA9IFhbKGkgKyAxKSAmIDddOyB2IF49IHQgXiAodCA+Pj4gMTApO1xuICAgIHQgPSBYWyhpICsgMykgJiA3XTsgdiBePSB0IF4gKHQgPj4+IDMpO1xuICAgIHQgPSBYWyhpICsgNCkgJiA3XTsgdiBePSB0IF4gKHQgPDwgNyk7XG4gICAgdCA9IFhbKGkgKyA3KSAmIDddOyB0ID0gdCBeICh0IDw8IDEzKTsgdiBePSB0IF4gKHQgPDwgOSk7XG4gICAgWFtpXSA9IHY7XG4gICAgbWUuaSA9IChpICsgMSkgJiA3O1xuICAgIHJldHVybiB2O1xuICB9O1xuXG4gIGZ1bmN0aW9uIGluaXQobWUsIHNlZWQpIHtcbiAgICB2YXIgaiwgdywgWCA9IFtdO1xuXG4gICAgaWYgKHNlZWQgPT09IChzZWVkIHwgMCkpIHtcbiAgICAgIC8vIFNlZWQgc3RhdGUgYXJyYXkgdXNpbmcgYSAzMi1iaXQgaW50ZWdlci5cbiAgICAgIHcgPSBYWzBdID0gc2VlZDtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gU2VlZCBzdGF0ZSB1c2luZyBhIHN0cmluZy5cbiAgICAgIHNlZWQgPSAnJyArIHNlZWQ7XG4gICAgICBmb3IgKGogPSAwOyBqIDwgc2VlZC5sZW5ndGg7ICsraikge1xuICAgICAgICBYW2ogJiA3XSA9IChYW2ogJiA3XSA8PCAxNSkgXlxuICAgICAgICAgICAgKHNlZWQuY2hhckNvZGVBdChqKSArIFhbKGogKyAxKSAmIDddIDw8IDEzKTtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gRW5mb3JjZSBhbiBhcnJheSBsZW5ndGggb2YgOCwgbm90IGFsbCB6ZXJvZXMuXG4gICAgd2hpbGUgKFgubGVuZ3RoIDwgOCkgWC5wdXNoKDApO1xuICAgIGZvciAoaiA9IDA7IGogPCA4ICYmIFhbal0gPT09IDA7ICsraik7XG4gICAgaWYgKGogPT0gOCkgdyA9IFhbN10gPSAtMTsgZWxzZSB3ID0gWFtqXTtcblxuICAgIG1lLnggPSBYO1xuICAgIG1lLmkgPSAwO1xuXG4gICAgLy8gRGlzY2FyZCBhbiBpbml0aWFsIDI1NiB2YWx1ZXMuXG4gICAgZm9yIChqID0gMjU2OyBqID4gMDsgLS1qKSB7XG4gICAgICBtZS5uZXh0KCk7XG4gICAgfVxuICB9XG5cbiAgaW5pdChtZSwgc2VlZCk7XG59XG5cbmZ1bmN0aW9uIGNvcHkoZiwgdCkge1xuICB0LnggPSBmLnguc2xpY2UoKTtcbiAgdC5pID0gZi5pO1xuICByZXR1cm4gdDtcbn1cblxuZnVuY3Rpb24gaW1wbChzZWVkLCBvcHRzKSB7XG4gIGlmIChzZWVkID09IG51bGwpIHNlZWQgPSArKG5ldyBEYXRlKTtcbiAgdmFyIHhnID0gbmV3IFhvckdlbihzZWVkKSxcbiAgICAgIHN0YXRlID0gb3B0cyAmJiBvcHRzLnN0YXRlLFxuICAgICAgcHJuZyA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gKHhnLm5leHQoKSA+Pj4gMCkgLyAweDEwMDAwMDAwMDsgfTtcbiAgcHJuZy5kb3VibGUgPSBmdW5jdGlvbigpIHtcbiAgICBkbyB7XG4gICAgICB2YXIgdG9wID0geGcubmV4dCgpID4+PiAxMSxcbiAgICAgICAgICBib3QgPSAoeGcubmV4dCgpID4+PiAwKSAvIDB4MTAwMDAwMDAwLFxuICAgICAgICAgIHJlc3VsdCA9ICh0b3AgKyBib3QpIC8gKDEgPDwgMjEpO1xuICAgIH0gd2hpbGUgKHJlc3VsdCA9PT0gMCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcbiAgcHJuZy5pbnQzMiA9IHhnLm5leHQ7XG4gIHBybmcucXVpY2sgPSBwcm5nO1xuICBpZiAoc3RhdGUpIHtcbiAgICBpZiAoc3RhdGUueCkgY29weShzdGF0ZSwgeGcpO1xuICAgIHBybmcuc3RhdGUgPSBmdW5jdGlvbigpIHsgcmV0dXJuIGNvcHkoeGcsIHt9KTsgfVxuICB9XG4gIHJldHVybiBwcm5nO1xufVxuXG5pZiAobW9kdWxlICYmIG1vZHVsZS5leHBvcnRzKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gaW1wbDtcbn0gZWxzZSBpZiAoZGVmaW5lICYmIGRlZmluZS5hbWQpIHtcbiAgZGVmaW5lKGZ1bmN0aW9uKCkgeyByZXR1cm4gaW1wbDsgfSk7XG59IGVsc2Uge1xuICB0aGlzLnhvcnNoaWZ0NyA9IGltcGw7XG59XG5cbn0pKFxuICB0aGlzLFxuICAodHlwZW9mIG1vZHVsZSkgPT0gJ29iamVjdCcgJiYgbW9kdWxlLCAgICAvLyBwcmVzZW50IGluIG5vZGUuanNcbiAgKHR5cGVvZiBkZWZpbmUpID09ICdmdW5jdGlvbicgJiYgZGVmaW5lICAgLy8gcHJlc2VudCB3aXRoIGFuIEFNRCBsb2FkZXJcbik7XG5cbiIsIi8vIEEgSmF2YXNjcmlwdCBpbXBsZW1lbnRhaW9uIG9mIFJpY2hhcmQgQnJlbnQncyBYb3JnZW5zIHhvcjQwOTYgYWxnb3JpdGhtLlxuLy9cbi8vIFRoaXMgZmFzdCBub24tY3J5cHRvZ3JhcGhpYyByYW5kb20gbnVtYmVyIGdlbmVyYXRvciBpcyBkZXNpZ25lZCBmb3Jcbi8vIHVzZSBpbiBNb250ZS1DYXJsbyBhbGdvcml0aG1zLiBJdCBjb21iaW5lcyBhIGxvbmctcGVyaW9kIHhvcnNoaWZ0XG4vLyBnZW5lcmF0b3Igd2l0aCBhIFdleWwgZ2VuZXJhdG9yLCBhbmQgaXQgcGFzc2VzIGFsbCBjb21tb24gYmF0dGVyaWVzXG4vLyBvZiBzdGFzdGljaWFsIHRlc3RzIGZvciByYW5kb21uZXNzIHdoaWxlIGNvbnN1bWluZyBvbmx5IGEgZmV3IG5hbm9zZWNvbmRzXG4vLyBmb3IgZWFjaCBwcm5nIGdlbmVyYXRlZC4gIEZvciBiYWNrZ3JvdW5kIG9uIHRoZSBnZW5lcmF0b3IsIHNlZSBCcmVudCdzXG4vLyBwYXBlcjogXCJTb21lIGxvbmctcGVyaW9kIHJhbmRvbSBudW1iZXIgZ2VuZXJhdG9ycyB1c2luZyBzaGlmdHMgYW5kIHhvcnMuXCJcbi8vIGh0dHA6Ly9hcnhpdi5vcmcvcGRmLzEwMDQuMzExNXYxLnBkZlxuLy9cbi8vIFVzYWdlOlxuLy9cbi8vIHZhciB4b3I0MDk2ID0gcmVxdWlyZSgneG9yNDA5NicpO1xuLy8gcmFuZG9tID0geG9yNDA5NigxKTsgICAgICAgICAgICAgICAgICAgICAgICAvLyBTZWVkIHdpdGggaW50MzIgb3Igc3RyaW5nLlxuLy8gYXNzZXJ0LmVxdWFsKHJhbmRvbSgpLCAwLjE1MjA0MzY0NTA1Mzg1NDcpOyAvLyAoMCwgMSkgcmFuZ2UsIDUzIGJpdHMuXG4vLyBhc3NlcnQuZXF1YWwocmFuZG9tLmludDMyKCksIDE4MDY1MzQ4OTcpOyAgIC8vIHNpZ25lZCBpbnQzMiwgMzIgYml0cy5cbi8vXG4vLyBGb3Igbm9uemVybyBudW1lcmljIGtleXMsIHRoaXMgaW1wZWxlbWVudGF0aW9uIHByb3ZpZGVzIGEgc2VxdWVuY2Vcbi8vIGlkZW50aWNhbCB0byB0aGF0IGJ5IEJyZW50J3MgeG9yZ2VucyAzIGltcGxlbWVudGFpb24gaW4gQy4gIFRoaXNcbi8vIGltcGxlbWVudGF0aW9uIGFsc28gcHJvdmlkZXMgZm9yIGluaXRhbGl6aW5nIHRoZSBnZW5lcmF0b3Igd2l0aFxuLy8gc3RyaW5nIHNlZWRzLCBvciBmb3Igc2F2aW5nIGFuZCByZXN0b3JpbmcgdGhlIHN0YXRlIG9mIHRoZSBnZW5lcmF0b3IuXG4vL1xuLy8gT24gQ2hyb21lLCB0aGlzIHBybmcgYmVuY2htYXJrcyBhYm91dCAyLjEgdGltZXMgc2xvd2VyIHRoYW5cbi8vIEphdmFzY3JpcHQncyBidWlsdC1pbiBNYXRoLnJhbmRvbSgpLlxuXG4oZnVuY3Rpb24oZ2xvYmFsLCBtb2R1bGUsIGRlZmluZSkge1xuXG5mdW5jdGlvbiBYb3JHZW4oc2VlZCkge1xuICB2YXIgbWUgPSB0aGlzO1xuXG4gIC8vIFNldCB1cCBnZW5lcmF0b3IgZnVuY3Rpb24uXG4gIG1lLm5leHQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgdyA9IG1lLncsXG4gICAgICAgIFggPSBtZS5YLCBpID0gbWUuaSwgdCwgdjtcbiAgICAvLyBVcGRhdGUgV2V5bCBnZW5lcmF0b3IuXG4gICAgbWUudyA9IHcgPSAodyArIDB4NjFjODg2NDcpIHwgMDtcbiAgICAvLyBVcGRhdGUgeG9yIGdlbmVyYXRvci5cbiAgICB2ID0gWFsoaSArIDM0KSAmIDEyN107XG4gICAgdCA9IFhbaSA9ICgoaSArIDEpICYgMTI3KV07XG4gICAgdiBePSB2IDw8IDEzO1xuICAgIHQgXj0gdCA8PCAxNztcbiAgICB2IF49IHYgPj4+IDE1O1xuICAgIHQgXj0gdCA+Pj4gMTI7XG4gICAgLy8gVXBkYXRlIFhvciBnZW5lcmF0b3IgYXJyYXkgc3RhdGUuXG4gICAgdiA9IFhbaV0gPSB2IF4gdDtcbiAgICBtZS5pID0gaTtcbiAgICAvLyBSZXN1bHQgaXMgdGhlIGNvbWJpbmF0aW9uLlxuICAgIHJldHVybiAodiArICh3IF4gKHcgPj4+IDE2KSkpIHwgMDtcbiAgfTtcblxuICBmdW5jdGlvbiBpbml0KG1lLCBzZWVkKSB7XG4gICAgdmFyIHQsIHYsIGksIGosIHcsIFggPSBbXSwgbGltaXQgPSAxMjg7XG4gICAgaWYgKHNlZWQgPT09IChzZWVkIHwgMCkpIHtcbiAgICAgIC8vIE51bWVyaWMgc2VlZHMgaW5pdGlhbGl6ZSB2LCB3aGljaCBpcyB1c2VkIHRvIGdlbmVyYXRlcyBYLlxuICAgICAgdiA9IHNlZWQ7XG4gICAgICBzZWVkID0gbnVsbDtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gU3RyaW5nIHNlZWRzIGFyZSBtaXhlZCBpbnRvIHYgYW5kIFggb25lIGNoYXJhY3RlciBhdCBhIHRpbWUuXG4gICAgICBzZWVkID0gc2VlZCArICdcXDAnO1xuICAgICAgdiA9IDA7XG4gICAgICBsaW1pdCA9IE1hdGgubWF4KGxpbWl0LCBzZWVkLmxlbmd0aCk7XG4gICAgfVxuICAgIC8vIEluaXRpYWxpemUgY2lyY3VsYXIgYXJyYXkgYW5kIHdleWwgdmFsdWUuXG4gICAgZm9yIChpID0gMCwgaiA9IC0zMjsgaiA8IGxpbWl0OyArK2opIHtcbiAgICAgIC8vIFB1dCB0aGUgdW5pY29kZSBjaGFyYWN0ZXJzIGludG8gdGhlIGFycmF5LCBhbmQgc2h1ZmZsZSB0aGVtLlxuICAgICAgaWYgKHNlZWQpIHYgXj0gc2VlZC5jaGFyQ29kZUF0KChqICsgMzIpICUgc2VlZC5sZW5ndGgpO1xuICAgICAgLy8gQWZ0ZXIgMzIgc2h1ZmZsZXMsIHRha2UgdiBhcyB0aGUgc3RhcnRpbmcgdyB2YWx1ZS5cbiAgICAgIGlmIChqID09PSAwKSB3ID0gdjtcbiAgICAgIHYgXj0gdiA8PCAxMDtcbiAgICAgIHYgXj0gdiA+Pj4gMTU7XG4gICAgICB2IF49IHYgPDwgNDtcbiAgICAgIHYgXj0gdiA+Pj4gMTM7XG4gICAgICBpZiAoaiA+PSAwKSB7XG4gICAgICAgIHcgPSAodyArIDB4NjFjODg2NDcpIHwgMDsgICAgIC8vIFdleWwuXG4gICAgICAgIHQgPSAoWFtqICYgMTI3XSBePSAodiArIHcpKTsgIC8vIENvbWJpbmUgeG9yIGFuZCB3ZXlsIHRvIGluaXQgYXJyYXkuXG4gICAgICAgIGkgPSAoMCA9PSB0KSA/IGkgKyAxIDogMDsgICAgIC8vIENvdW50IHplcm9lcy5cbiAgICAgIH1cbiAgICB9XG4gICAgLy8gV2UgaGF2ZSBkZXRlY3RlZCBhbGwgemVyb2VzOyBtYWtlIHRoZSBrZXkgbm9uemVyby5cbiAgICBpZiAoaSA+PSAxMjgpIHtcbiAgICAgIFhbKHNlZWQgJiYgc2VlZC5sZW5ndGggfHwgMCkgJiAxMjddID0gLTE7XG4gICAgfVxuICAgIC8vIFJ1biB0aGUgZ2VuZXJhdG9yIDUxMiB0aW1lcyB0byBmdXJ0aGVyIG1peCB0aGUgc3RhdGUgYmVmb3JlIHVzaW5nIGl0LlxuICAgIC8vIEZhY3RvcmluZyB0aGlzIGFzIGEgZnVuY3Rpb24gc2xvd3MgdGhlIG1haW4gZ2VuZXJhdG9yLCBzbyBpdCBpcyBqdXN0XG4gICAgLy8gdW5yb2xsZWQgaGVyZS4gIFRoZSB3ZXlsIGdlbmVyYXRvciBpcyBub3QgYWR2YW5jZWQgd2hpbGUgd2FybWluZyB1cC5cbiAgICBpID0gMTI3O1xuICAgIGZvciAoaiA9IDQgKiAxMjg7IGogPiAwOyAtLWopIHtcbiAgICAgIHYgPSBYWyhpICsgMzQpICYgMTI3XTtcbiAgICAgIHQgPSBYW2kgPSAoKGkgKyAxKSAmIDEyNyldO1xuICAgICAgdiBePSB2IDw8IDEzO1xuICAgICAgdCBePSB0IDw8IDE3O1xuICAgICAgdiBePSB2ID4+PiAxNTtcbiAgICAgIHQgXj0gdCA+Pj4gMTI7XG4gICAgICBYW2ldID0gdiBeIHQ7XG4gICAgfVxuICAgIC8vIFN0b3Jpbmcgc3RhdGUgYXMgb2JqZWN0IG1lbWJlcnMgaXMgZmFzdGVyIHRoYW4gdXNpbmcgY2xvc3VyZSB2YXJpYWJsZXMuXG4gICAgbWUudyA9IHc7XG4gICAgbWUuWCA9IFg7XG4gICAgbWUuaSA9IGk7XG4gIH1cblxuICBpbml0KG1lLCBzZWVkKTtcbn1cblxuZnVuY3Rpb24gY29weShmLCB0KSB7XG4gIHQuaSA9IGYuaTtcbiAgdC53ID0gZi53O1xuICB0LlggPSBmLlguc2xpY2UoKTtcbiAgcmV0dXJuIHQ7XG59O1xuXG5mdW5jdGlvbiBpbXBsKHNlZWQsIG9wdHMpIHtcbiAgaWYgKHNlZWQgPT0gbnVsbCkgc2VlZCA9ICsobmV3IERhdGUpO1xuICB2YXIgeGcgPSBuZXcgWG9yR2VuKHNlZWQpLFxuICAgICAgc3RhdGUgPSBvcHRzICYmIG9wdHMuc3RhdGUsXG4gICAgICBwcm5nID0gZnVuY3Rpb24oKSB7IHJldHVybiAoeGcubmV4dCgpID4+PiAwKSAvIDB4MTAwMDAwMDAwOyB9O1xuICBwcm5nLmRvdWJsZSA9IGZ1bmN0aW9uKCkge1xuICAgIGRvIHtcbiAgICAgIHZhciB0b3AgPSB4Zy5uZXh0KCkgPj4+IDExLFxuICAgICAgICAgIGJvdCA9ICh4Zy5uZXh0KCkgPj4+IDApIC8gMHgxMDAwMDAwMDAsXG4gICAgICAgICAgcmVzdWx0ID0gKHRvcCArIGJvdCkgLyAoMSA8PCAyMSk7XG4gICAgfSB3aGlsZSAocmVzdWx0ID09PSAwKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuICBwcm5nLmludDMyID0geGcubmV4dDtcbiAgcHJuZy5xdWljayA9IHBybmc7XG4gIGlmIChzdGF0ZSkge1xuICAgIGlmIChzdGF0ZS5YKSBjb3B5KHN0YXRlLCB4Zyk7XG4gICAgcHJuZy5zdGF0ZSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gY29weSh4Zywge30pOyB9XG4gIH1cbiAgcmV0dXJuIHBybmc7XG59XG5cbmlmIChtb2R1bGUgJiYgbW9kdWxlLmV4cG9ydHMpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBpbXBsO1xufSBlbHNlIGlmIChkZWZpbmUgJiYgZGVmaW5lLmFtZCkge1xuICBkZWZpbmUoZnVuY3Rpb24oKSB7IHJldHVybiBpbXBsOyB9KTtcbn0gZWxzZSB7XG4gIHRoaXMueG9yNDA5NiA9IGltcGw7XG59XG5cbn0pKFxuICB0aGlzLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB3aW5kb3cgb2JqZWN0IG9yIGdsb2JhbFxuICAodHlwZW9mIG1vZHVsZSkgPT0gJ29iamVjdCcgJiYgbW9kdWxlLCAgICAvLyBwcmVzZW50IGluIG5vZGUuanNcbiAgKHR5cGVvZiBkZWZpbmUpID09ICdmdW5jdGlvbicgJiYgZGVmaW5lICAgLy8gcHJlc2VudCB3aXRoIGFuIEFNRCBsb2FkZXJcbik7XG4iLCIvLyBBIEphdmFzY3JpcHQgaW1wbGVtZW50YWlvbiBvZiB0aGUgXCJUeWNoZS1pXCIgcHJuZyBhbGdvcml0aG0gYnlcbi8vIFNhbXVlbCBOZXZlcyBhbmQgRmlsaXBlIEFyYXVqby5cbi8vIFNlZSBodHRwczovL2VkZW4uZGVpLnVjLnB0L35zbmV2ZXMvcHVicy8yMDExLXNuZmEyLnBkZlxuXG4oZnVuY3Rpb24oZ2xvYmFsLCBtb2R1bGUsIGRlZmluZSkge1xuXG5mdW5jdGlvbiBYb3JHZW4oc2VlZCkge1xuICB2YXIgbWUgPSB0aGlzLCBzdHJzZWVkID0gJyc7XG5cbiAgLy8gU2V0IHVwIGdlbmVyYXRvciBmdW5jdGlvbi5cbiAgbWUubmV4dCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBiID0gbWUuYiwgYyA9IG1lLmMsIGQgPSBtZS5kLCBhID0gbWUuYTtcbiAgICBiID0gKGIgPDwgMjUpIF4gKGIgPj4+IDcpIF4gYztcbiAgICBjID0gKGMgLSBkKSB8IDA7XG4gICAgZCA9IChkIDw8IDI0KSBeIChkID4+PiA4KSBeIGE7XG4gICAgYSA9IChhIC0gYikgfCAwO1xuICAgIG1lLmIgPSBiID0gKGIgPDwgMjApIF4gKGIgPj4+IDEyKSBeIGM7XG4gICAgbWUuYyA9IGMgPSAoYyAtIGQpIHwgMDtcbiAgICBtZS5kID0gKGQgPDwgMTYpIF4gKGMgPj4+IDE2KSBeIGE7XG4gICAgcmV0dXJuIG1lLmEgPSAoYSAtIGIpIHwgMDtcbiAgfTtcblxuICAvKiBUaGUgZm9sbG93aW5nIGlzIG5vbi1pbnZlcnRlZCB0eWNoZSwgd2hpY2ggaGFzIGJldHRlciBpbnRlcm5hbFxuICAgKiBiaXQgZGlmZnVzaW9uLCBidXQgd2hpY2ggaXMgYWJvdXQgMjUlIHNsb3dlciB0aGFuIHR5Y2hlLWkgaW4gSlMuXG4gIG1lLm5leHQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgYSA9IG1lLmEsIGIgPSBtZS5iLCBjID0gbWUuYywgZCA9IG1lLmQ7XG4gICAgYSA9IChtZS5hICsgbWUuYiB8IDApID4+PiAwO1xuICAgIGQgPSBtZS5kIF4gYTsgZCA9IGQgPDwgMTYgXiBkID4+PiAxNjtcbiAgICBjID0gbWUuYyArIGQgfCAwO1xuICAgIGIgPSBtZS5iIF4gYzsgYiA9IGIgPDwgMTIgXiBkID4+PiAyMDtcbiAgICBtZS5hID0gYSA9IGEgKyBiIHwgMDtcbiAgICBkID0gZCBeIGE7IG1lLmQgPSBkID0gZCA8PCA4IF4gZCA+Pj4gMjQ7XG4gICAgbWUuYyA9IGMgPSBjICsgZCB8IDA7XG4gICAgYiA9IGIgXiBjO1xuICAgIHJldHVybiBtZS5iID0gKGIgPDwgNyBeIGIgPj4+IDI1KTtcbiAgfVxuICAqL1xuXG4gIG1lLmEgPSAwO1xuICBtZS5iID0gMDtcbiAgbWUuYyA9IDI2NTQ0MzU3NjkgfCAwO1xuICBtZS5kID0gMTM2NzEzMDU1MTtcblxuICBpZiAoc2VlZCA9PT0gTWF0aC5mbG9vcihzZWVkKSkge1xuICAgIC8vIEludGVnZXIgc2VlZC5cbiAgICBtZS5hID0gKHNlZWQgLyAweDEwMDAwMDAwMCkgfCAwO1xuICAgIG1lLmIgPSBzZWVkIHwgMDtcbiAgfSBlbHNlIHtcbiAgICAvLyBTdHJpbmcgc2VlZC5cbiAgICBzdHJzZWVkICs9IHNlZWQ7XG4gIH1cblxuICAvLyBNaXggaW4gc3RyaW5nIHNlZWQsIHRoZW4gZGlzY2FyZCBhbiBpbml0aWFsIGJhdGNoIG9mIDY0IHZhbHVlcy5cbiAgZm9yICh2YXIgayA9IDA7IGsgPCBzdHJzZWVkLmxlbmd0aCArIDIwOyBrKyspIHtcbiAgICBtZS5iIF49IHN0cnNlZWQuY2hhckNvZGVBdChrKSB8IDA7XG4gICAgbWUubmV4dCgpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNvcHkoZiwgdCkge1xuICB0LmEgPSBmLmE7XG4gIHQuYiA9IGYuYjtcbiAgdC5jID0gZi5jO1xuICB0LmQgPSBmLmQ7XG4gIHJldHVybiB0O1xufTtcblxuZnVuY3Rpb24gaW1wbChzZWVkLCBvcHRzKSB7XG4gIHZhciB4ZyA9IG5ldyBYb3JHZW4oc2VlZCksXG4gICAgICBzdGF0ZSA9IG9wdHMgJiYgb3B0cy5zdGF0ZSxcbiAgICAgIHBybmcgPSBmdW5jdGlvbigpIHsgcmV0dXJuICh4Zy5uZXh0KCkgPj4+IDApIC8gMHgxMDAwMDAwMDA7IH07XG4gIHBybmcuZG91YmxlID0gZnVuY3Rpb24oKSB7XG4gICAgZG8ge1xuICAgICAgdmFyIHRvcCA9IHhnLm5leHQoKSA+Pj4gMTEsXG4gICAgICAgICAgYm90ID0gKHhnLm5leHQoKSA+Pj4gMCkgLyAweDEwMDAwMDAwMCxcbiAgICAgICAgICByZXN1bHQgPSAodG9wICsgYm90KSAvICgxIDw8IDIxKTtcbiAgICB9IHdoaWxlIChyZXN1bHQgPT09IDApO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG4gIHBybmcuaW50MzIgPSB4Zy5uZXh0O1xuICBwcm5nLnF1aWNrID0gcHJuZztcbiAgaWYgKHN0YXRlKSB7XG4gICAgaWYgKHR5cGVvZihzdGF0ZSkgPT0gJ29iamVjdCcpIGNvcHkoc3RhdGUsIHhnKTtcbiAgICBwcm5nLnN0YXRlID0gZnVuY3Rpb24oKSB7IHJldHVybiBjb3B5KHhnLCB7fSk7IH1cbiAgfVxuICByZXR1cm4gcHJuZztcbn1cblxuaWYgKG1vZHVsZSAmJiBtb2R1bGUuZXhwb3J0cykge1xuICBtb2R1bGUuZXhwb3J0cyA9IGltcGw7XG59IGVsc2UgaWYgKGRlZmluZSAmJiBkZWZpbmUuYW1kKSB7XG4gIGRlZmluZShmdW5jdGlvbigpIHsgcmV0dXJuIGltcGw7IH0pO1xufSBlbHNlIHtcbiAgdGhpcy50eWNoZWkgPSBpbXBsO1xufVxuXG59KShcbiAgdGhpcyxcbiAgKHR5cGVvZiBtb2R1bGUpID09ICdvYmplY3QnICYmIG1vZHVsZSwgICAgLy8gcHJlc2VudCBpbiBub2RlLmpzXG4gICh0eXBlb2YgZGVmaW5lKSA9PSAnZnVuY3Rpb24nICYmIGRlZmluZSAgIC8vIHByZXNlbnQgd2l0aCBhbiBBTUQgbG9hZGVyXG4pO1xuXG5cbiIsIi8qXG5Db3B5cmlnaHQgMjAxNCBEYXZpZCBCYXUuXG5cblBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZ1xuYSBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG5cIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbndpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbmRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0b1xucGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvXG50aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG5cblRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlXG5pbmNsdWRlZCBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cblxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCxcbkVYUFJFU1MgT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULlxuSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTllcbkNMQUlNLCBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsXG5UT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRVxuU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbiovXG5cbihmdW5jdGlvbiAocG9vbCwgbWF0aCkge1xuLy9cbi8vIFRoZSBmb2xsb3dpbmcgY29uc3RhbnRzIGFyZSByZWxhdGVkIHRvIElFRUUgNzU0IGxpbWl0cy5cbi8vXG5cbi8vIERldGVjdCB0aGUgZ2xvYmFsIG9iamVjdCwgZXZlbiBpZiBvcGVyYXRpbmcgaW4gc3RyaWN0IG1vZGUuXG4vLyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8xNDM4NzA1Ny8yNjUyOThcbnZhciBnbG9iYWwgPSAoMCwgZXZhbCkoJ3RoaXMnKSxcbiAgICB3aWR0aCA9IDI1NiwgICAgICAgIC8vIGVhY2ggUkM0IG91dHB1dCBpcyAwIDw9IHggPCAyNTZcbiAgICBjaHVua3MgPSA2LCAgICAgICAgIC8vIGF0IGxlYXN0IHNpeCBSQzQgb3V0cHV0cyBmb3IgZWFjaCBkb3VibGVcbiAgICBkaWdpdHMgPSA1MiwgICAgICAgIC8vIHRoZXJlIGFyZSA1MiBzaWduaWZpY2FudCBkaWdpdHMgaW4gYSBkb3VibGVcbiAgICBybmduYW1lID0gJ3JhbmRvbScsIC8vIHJuZ25hbWU6IG5hbWUgZm9yIE1hdGgucmFuZG9tIGFuZCBNYXRoLnNlZWRyYW5kb21cbiAgICBzdGFydGRlbm9tID0gbWF0aC5wb3cod2lkdGgsIGNodW5rcyksXG4gICAgc2lnbmlmaWNhbmNlID0gbWF0aC5wb3coMiwgZGlnaXRzKSxcbiAgICBvdmVyZmxvdyA9IHNpZ25pZmljYW5jZSAqIDIsXG4gICAgbWFzayA9IHdpZHRoIC0gMSxcbiAgICBub2RlY3J5cHRvOyAgICAgICAgIC8vIG5vZGUuanMgY3J5cHRvIG1vZHVsZSwgaW5pdGlhbGl6ZWQgYXQgdGhlIGJvdHRvbS5cblxuLy9cbi8vIHNlZWRyYW5kb20oKVxuLy8gVGhpcyBpcyB0aGUgc2VlZHJhbmRvbSBmdW5jdGlvbiBkZXNjcmliZWQgYWJvdmUuXG4vL1xuZnVuY3Rpb24gc2VlZHJhbmRvbShzZWVkLCBvcHRpb25zLCBjYWxsYmFjaykge1xuICB2YXIga2V5ID0gW107XG4gIG9wdGlvbnMgPSAob3B0aW9ucyA9PSB0cnVlKSA/IHsgZW50cm9weTogdHJ1ZSB9IDogKG9wdGlvbnMgfHwge30pO1xuXG4gIC8vIEZsYXR0ZW4gdGhlIHNlZWQgc3RyaW5nIG9yIGJ1aWxkIG9uZSBmcm9tIGxvY2FsIGVudHJvcHkgaWYgbmVlZGVkLlxuICB2YXIgc2hvcnRzZWVkID0gbWl4a2V5KGZsYXR0ZW4oXG4gICAgb3B0aW9ucy5lbnRyb3B5ID8gW3NlZWQsIHRvc3RyaW5nKHBvb2wpXSA6XG4gICAgKHNlZWQgPT0gbnVsbCkgPyBhdXRvc2VlZCgpIDogc2VlZCwgMyksIGtleSk7XG5cbiAgLy8gVXNlIHRoZSBzZWVkIHRvIGluaXRpYWxpemUgYW4gQVJDNCBnZW5lcmF0b3IuXG4gIHZhciBhcmM0ID0gbmV3IEFSQzQoa2V5KTtcblxuICAvLyBUaGlzIGZ1bmN0aW9uIHJldHVybnMgYSByYW5kb20gZG91YmxlIGluIFswLCAxKSB0aGF0IGNvbnRhaW5zXG4gIC8vIHJhbmRvbW5lc3MgaW4gZXZlcnkgYml0IG9mIHRoZSBtYW50aXNzYSBvZiB0aGUgSUVFRSA3NTQgdmFsdWUuXG4gIHZhciBwcm5nID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIG4gPSBhcmM0LmcoY2h1bmtzKSwgICAgICAgICAgICAgLy8gU3RhcnQgd2l0aCBhIG51bWVyYXRvciBuIDwgMiBeIDQ4XG4gICAgICAgIGQgPSBzdGFydGRlbm9tLCAgICAgICAgICAgICAgICAgLy8gICBhbmQgZGVub21pbmF0b3IgZCA9IDIgXiA0OC5cbiAgICAgICAgeCA9IDA7ICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgIGFuZCBubyAnZXh0cmEgbGFzdCBieXRlJy5cbiAgICB3aGlsZSAobiA8IHNpZ25pZmljYW5jZSkgeyAgICAgICAgICAvLyBGaWxsIHVwIGFsbCBzaWduaWZpY2FudCBkaWdpdHMgYnlcbiAgICAgIG4gPSAobiArIHgpICogd2lkdGg7ICAgICAgICAgICAgICAvLyAgIHNoaWZ0aW5nIG51bWVyYXRvciBhbmRcbiAgICAgIGQgKj0gd2lkdGg7ICAgICAgICAgICAgICAgICAgICAgICAvLyAgIGRlbm9taW5hdG9yIGFuZCBnZW5lcmF0aW5nIGFcbiAgICAgIHggPSBhcmM0LmcoMSk7ICAgICAgICAgICAgICAgICAgICAvLyAgIG5ldyBsZWFzdC1zaWduaWZpY2FudC1ieXRlLlxuICAgIH1cbiAgICB3aGlsZSAobiA+PSBvdmVyZmxvdykgeyAgICAgICAgICAgICAvLyBUbyBhdm9pZCByb3VuZGluZyB1cCwgYmVmb3JlIGFkZGluZ1xuICAgICAgbiAvPSAyOyAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgbGFzdCBieXRlLCBzaGlmdCBldmVyeXRoaW5nXG4gICAgICBkIC89IDI7ICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICByaWdodCB1c2luZyBpbnRlZ2VyIG1hdGggdW50aWxcbiAgICAgIHggPj4+PSAxOyAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgIHdlIGhhdmUgZXhhY3RseSB0aGUgZGVzaXJlZCBiaXRzLlxuICAgIH1cbiAgICByZXR1cm4gKG4gKyB4KSAvIGQ7ICAgICAgICAgICAgICAgICAvLyBGb3JtIHRoZSBudW1iZXIgd2l0aGluIFswLCAxKS5cbiAgfTtcblxuICBwcm5nLmludDMyID0gZnVuY3Rpb24oKSB7IHJldHVybiBhcmM0LmcoNCkgfCAwOyB9XG4gIHBybmcucXVpY2sgPSBmdW5jdGlvbigpIHsgcmV0dXJuIGFyYzQuZyg0KSAvIDB4MTAwMDAwMDAwOyB9XG4gIHBybmcuZG91YmxlID0gcHJuZztcblxuICAvLyBNaXggdGhlIHJhbmRvbW5lc3MgaW50byBhY2N1bXVsYXRlZCBlbnRyb3B5LlxuICBtaXhrZXkodG9zdHJpbmcoYXJjNC5TKSwgcG9vbCk7XG5cbiAgLy8gQ2FsbGluZyBjb252ZW50aW9uOiB3aGF0IHRvIHJldHVybiBhcyBhIGZ1bmN0aW9uIG9mIHBybmcsIHNlZWQsIGlzX21hdGguXG4gIHJldHVybiAob3B0aW9ucy5wYXNzIHx8IGNhbGxiYWNrIHx8XG4gICAgICBmdW5jdGlvbihwcm5nLCBzZWVkLCBpc19tYXRoX2NhbGwsIHN0YXRlKSB7XG4gICAgICAgIGlmIChzdGF0ZSkge1xuICAgICAgICAgIC8vIExvYWQgdGhlIGFyYzQgc3RhdGUgZnJvbSB0aGUgZ2l2ZW4gc3RhdGUgaWYgaXQgaGFzIGFuIFMgYXJyYXkuXG4gICAgICAgICAgaWYgKHN0YXRlLlMpIHsgY29weShzdGF0ZSwgYXJjNCk7IH1cbiAgICAgICAgICAvLyBPbmx5IHByb3ZpZGUgdGhlIC5zdGF0ZSBtZXRob2QgaWYgcmVxdWVzdGVkIHZpYSBvcHRpb25zLnN0YXRlLlxuICAgICAgICAgIHBybmcuc3RhdGUgPSBmdW5jdGlvbigpIHsgcmV0dXJuIGNvcHkoYXJjNCwge30pOyB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBJZiBjYWxsZWQgYXMgYSBtZXRob2Qgb2YgTWF0aCAoTWF0aC5zZWVkcmFuZG9tKCkpLCBtdXRhdGVcbiAgICAgICAgLy8gTWF0aC5yYW5kb20gYmVjYXVzZSB0aGF0IGlzIGhvdyBzZWVkcmFuZG9tLmpzIGhhcyB3b3JrZWQgc2luY2UgdjEuMC5cbiAgICAgICAgaWYgKGlzX21hdGhfY2FsbCkgeyBtYXRoW3JuZ25hbWVdID0gcHJuZzsgcmV0dXJuIHNlZWQ7IH1cblxuICAgICAgICAvLyBPdGhlcndpc2UsIGl0IGlzIGEgbmV3ZXIgY2FsbGluZyBjb252ZW50aW9uLCBzbyByZXR1cm4gdGhlXG4gICAgICAgIC8vIHBybmcgZGlyZWN0bHkuXG4gICAgICAgIGVsc2UgcmV0dXJuIHBybmc7XG4gICAgICB9KShcbiAgcHJuZyxcbiAgc2hvcnRzZWVkLFxuICAnZ2xvYmFsJyBpbiBvcHRpb25zID8gb3B0aW9ucy5nbG9iYWwgOiAodGhpcyA9PSBtYXRoKSxcbiAgb3B0aW9ucy5zdGF0ZSk7XG59XG5tYXRoWydzZWVkJyArIHJuZ25hbWVdID0gc2VlZHJhbmRvbTtcblxuLy9cbi8vIEFSQzRcbi8vXG4vLyBBbiBBUkM0IGltcGxlbWVudGF0aW9uLiAgVGhlIGNvbnN0cnVjdG9yIHRha2VzIGEga2V5IGluIHRoZSBmb3JtIG9mXG4vLyBhbiBhcnJheSBvZiBhdCBtb3N0ICh3aWR0aCkgaW50ZWdlcnMgdGhhdCBzaG91bGQgYmUgMCA8PSB4IDwgKHdpZHRoKS5cbi8vXG4vLyBUaGUgZyhjb3VudCkgbWV0aG9kIHJldHVybnMgYSBwc2V1ZG9yYW5kb20gaW50ZWdlciB0aGF0IGNvbmNhdGVuYXRlc1xuLy8gdGhlIG5leHQgKGNvdW50KSBvdXRwdXRzIGZyb20gQVJDNC4gIEl0cyByZXR1cm4gdmFsdWUgaXMgYSBudW1iZXIgeFxuLy8gdGhhdCBpcyBpbiB0aGUgcmFuZ2UgMCA8PSB4IDwgKHdpZHRoIF4gY291bnQpLlxuLy9cbmZ1bmN0aW9uIEFSQzQoa2V5KSB7XG4gIHZhciB0LCBrZXlsZW4gPSBrZXkubGVuZ3RoLFxuICAgICAgbWUgPSB0aGlzLCBpID0gMCwgaiA9IG1lLmkgPSBtZS5qID0gMCwgcyA9IG1lLlMgPSBbXTtcblxuICAvLyBUaGUgZW1wdHkga2V5IFtdIGlzIHRyZWF0ZWQgYXMgWzBdLlxuICBpZiAoIWtleWxlbikgeyBrZXkgPSBba2V5bGVuKytdOyB9XG5cbiAgLy8gU2V0IHVwIFMgdXNpbmcgdGhlIHN0YW5kYXJkIGtleSBzY2hlZHVsaW5nIGFsZ29yaXRobS5cbiAgd2hpbGUgKGkgPCB3aWR0aCkge1xuICAgIHNbaV0gPSBpKys7XG4gIH1cbiAgZm9yIChpID0gMDsgaSA8IHdpZHRoOyBpKyspIHtcbiAgICBzW2ldID0gc1tqID0gbWFzayAmIChqICsga2V5W2kgJSBrZXlsZW5dICsgKHQgPSBzW2ldKSldO1xuICAgIHNbal0gPSB0O1xuICB9XG5cbiAgLy8gVGhlIFwiZ1wiIG1ldGhvZCByZXR1cm5zIHRoZSBuZXh0IChjb3VudCkgb3V0cHV0cyBhcyBvbmUgbnVtYmVyLlxuICAobWUuZyA9IGZ1bmN0aW9uKGNvdW50KSB7XG4gICAgLy8gVXNpbmcgaW5zdGFuY2UgbWVtYmVycyBpbnN0ZWFkIG9mIGNsb3N1cmUgc3RhdGUgbmVhcmx5IGRvdWJsZXMgc3BlZWQuXG4gICAgdmFyIHQsIHIgPSAwLFxuICAgICAgICBpID0gbWUuaSwgaiA9IG1lLmosIHMgPSBtZS5TO1xuICAgIHdoaWxlIChjb3VudC0tKSB7XG4gICAgICB0ID0gc1tpID0gbWFzayAmIChpICsgMSldO1xuICAgICAgciA9IHIgKiB3aWR0aCArIHNbbWFzayAmICgoc1tpXSA9IHNbaiA9IG1hc2sgJiAoaiArIHQpXSkgKyAoc1tqXSA9IHQpKV07XG4gICAgfVxuICAgIG1lLmkgPSBpOyBtZS5qID0gajtcbiAgICByZXR1cm4gcjtcbiAgICAvLyBGb3Igcm9idXN0IHVucHJlZGljdGFiaWxpdHksIHRoZSBmdW5jdGlvbiBjYWxsIGJlbG93IGF1dG9tYXRpY2FsbHlcbiAgICAvLyBkaXNjYXJkcyBhbiBpbml0aWFsIGJhdGNoIG9mIHZhbHVlcy4gIFRoaXMgaXMgY2FsbGVkIFJDNC1kcm9wWzI1Nl0uXG4gICAgLy8gU2VlIGh0dHA6Ly9nb29nbGUuY29tL3NlYXJjaD9xPXJzYStmbHVocmVyK3Jlc3BvbnNlJmJ0bklcbiAgfSkod2lkdGgpO1xufVxuXG4vL1xuLy8gY29weSgpXG4vLyBDb3BpZXMgaW50ZXJuYWwgc3RhdGUgb2YgQVJDNCB0byBvciBmcm9tIGEgcGxhaW4gb2JqZWN0LlxuLy9cbmZ1bmN0aW9uIGNvcHkoZiwgdCkge1xuICB0LmkgPSBmLmk7XG4gIHQuaiA9IGYuajtcbiAgdC5TID0gZi5TLnNsaWNlKCk7XG4gIHJldHVybiB0O1xufTtcblxuLy9cbi8vIGZsYXR0ZW4oKVxuLy8gQ29udmVydHMgYW4gb2JqZWN0IHRyZWUgdG8gbmVzdGVkIGFycmF5cyBvZiBzdHJpbmdzLlxuLy9cbmZ1bmN0aW9uIGZsYXR0ZW4ob2JqLCBkZXB0aCkge1xuICB2YXIgcmVzdWx0ID0gW10sIHR5cCA9ICh0eXBlb2Ygb2JqKSwgcHJvcDtcbiAgaWYgKGRlcHRoICYmIHR5cCA9PSAnb2JqZWN0Jykge1xuICAgIGZvciAocHJvcCBpbiBvYmopIHtcbiAgICAgIHRyeSB7IHJlc3VsdC5wdXNoKGZsYXR0ZW4ob2JqW3Byb3BdLCBkZXB0aCAtIDEpKTsgfSBjYXRjaCAoZSkge31cbiAgICB9XG4gIH1cbiAgcmV0dXJuIChyZXN1bHQubGVuZ3RoID8gcmVzdWx0IDogdHlwID09ICdzdHJpbmcnID8gb2JqIDogb2JqICsgJ1xcMCcpO1xufVxuXG4vL1xuLy8gbWl4a2V5KClcbi8vIE1peGVzIGEgc3RyaW5nIHNlZWQgaW50byBhIGtleSB0aGF0IGlzIGFuIGFycmF5IG9mIGludGVnZXJzLCBhbmRcbi8vIHJldHVybnMgYSBzaG9ydGVuZWQgc3RyaW5nIHNlZWQgdGhhdCBpcyBlcXVpdmFsZW50IHRvIHRoZSByZXN1bHQga2V5LlxuLy9cbmZ1bmN0aW9uIG1peGtleShzZWVkLCBrZXkpIHtcbiAgdmFyIHN0cmluZ3NlZWQgPSBzZWVkICsgJycsIHNtZWFyLCBqID0gMDtcbiAgd2hpbGUgKGogPCBzdHJpbmdzZWVkLmxlbmd0aCkge1xuICAgIGtleVttYXNrICYgal0gPVxuICAgICAgbWFzayAmICgoc21lYXIgXj0ga2V5W21hc2sgJiBqXSAqIDE5KSArIHN0cmluZ3NlZWQuY2hhckNvZGVBdChqKyspKTtcbiAgfVxuICByZXR1cm4gdG9zdHJpbmcoa2V5KTtcbn1cblxuLy9cbi8vIGF1dG9zZWVkKClcbi8vIFJldHVybnMgYW4gb2JqZWN0IGZvciBhdXRvc2VlZGluZywgdXNpbmcgd2luZG93LmNyeXB0byBhbmQgTm9kZSBjcnlwdG9cbi8vIG1vZHVsZSBpZiBhdmFpbGFibGUuXG4vL1xuZnVuY3Rpb24gYXV0b3NlZWQoKSB7XG4gIHRyeSB7XG4gICAgdmFyIG91dDtcbiAgICBpZiAobm9kZWNyeXB0byAmJiAob3V0ID0gbm9kZWNyeXB0by5yYW5kb21CeXRlcykpIHtcbiAgICAgIC8vIFRoZSB1c2Ugb2YgJ291dCcgdG8gcmVtZW1iZXIgcmFuZG9tQnl0ZXMgbWFrZXMgdGlnaHQgbWluaWZpZWQgY29kZS5cbiAgICAgIG91dCA9IG91dCh3aWR0aCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG91dCA9IG5ldyBVaW50OEFycmF5KHdpZHRoKTtcbiAgICAgIChnbG9iYWwuY3J5cHRvIHx8IGdsb2JhbC5tc0NyeXB0bykuZ2V0UmFuZG9tVmFsdWVzKG91dCk7XG4gICAgfVxuICAgIHJldHVybiB0b3N0cmluZyhvdXQpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgdmFyIGJyb3dzZXIgPSBnbG9iYWwubmF2aWdhdG9yLFxuICAgICAgICBwbHVnaW5zID0gYnJvd3NlciAmJiBicm93c2VyLnBsdWdpbnM7XG4gICAgcmV0dXJuIFsrbmV3IERhdGUsIGdsb2JhbCwgcGx1Z2lucywgZ2xvYmFsLnNjcmVlbiwgdG9zdHJpbmcocG9vbCldO1xuICB9XG59XG5cbi8vXG4vLyB0b3N0cmluZygpXG4vLyBDb252ZXJ0cyBhbiBhcnJheSBvZiBjaGFyY29kZXMgdG8gYSBzdHJpbmdcbi8vXG5mdW5jdGlvbiB0b3N0cmluZyhhKSB7XG4gIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KDAsIGEpO1xufVxuXG4vL1xuLy8gV2hlbiBzZWVkcmFuZG9tLmpzIGlzIGxvYWRlZCwgd2UgaW1tZWRpYXRlbHkgbWl4IGEgZmV3IGJpdHNcbi8vIGZyb20gdGhlIGJ1aWx0LWluIFJORyBpbnRvIHRoZSBlbnRyb3B5IHBvb2wuICBCZWNhdXNlIHdlIGRvXG4vLyBub3Qgd2FudCB0byBpbnRlcmZlcmUgd2l0aCBkZXRlcm1pbmlzdGljIFBSTkcgc3RhdGUgbGF0ZXIsXG4vLyBzZWVkcmFuZG9tIHdpbGwgbm90IGNhbGwgbWF0aC5yYW5kb20gb24gaXRzIG93biBhZ2FpbiBhZnRlclxuLy8gaW5pdGlhbGl6YXRpb24uXG4vL1xubWl4a2V5KG1hdGgucmFuZG9tKCksIHBvb2wpO1xuXG4vL1xuLy8gTm9kZWpzIGFuZCBBTUQgc3VwcG9ydDogZXhwb3J0IHRoZSBpbXBsZW1lbnRhdGlvbiBhcyBhIG1vZHVsZSB1c2luZ1xuLy8gZWl0aGVyIGNvbnZlbnRpb24uXG4vL1xuaWYgKCh0eXBlb2YgbW9kdWxlKSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUuZXhwb3J0cykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHNlZWRyYW5kb207XG4gIC8vIFdoZW4gaW4gbm9kZS5qcywgdHJ5IHVzaW5nIGNyeXB0byBwYWNrYWdlIGZvciBhdXRvc2VlZGluZy5cbiAgdHJ5IHtcbiAgICBub2RlY3J5cHRvID0gcmVxdWlyZSgnY3J5cHRvJyk7XG4gIH0gY2F0Y2ggKGV4KSB7fVxufSBlbHNlIGlmICgodHlwZW9mIGRlZmluZSkgPT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XG4gIGRlZmluZShmdW5jdGlvbigpIHsgcmV0dXJuIHNlZWRyYW5kb207IH0pO1xufVxuXG4vLyBFbmQgYW5vbnltb3VzIHNjb3BlLCBhbmQgcGFzcyBpbml0aWFsIHZhbHVlcy5cbn0pKFxuICBbXSwgICAgIC8vIHBvb2w6IGVudHJvcHkgcG9vbCBzdGFydHMgZW1wdHlcbiAgTWF0aCAgICAvLyBtYXRoOiBwYWNrYWdlIGNvbnRhaW5pbmcgcmFuZG9tLCBwb3csIGFuZCBzZWVkcmFuZG9tXG4pO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==